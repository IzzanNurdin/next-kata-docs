{
  "app": {
    "config": "./markdown-to-json/settings/tutorials.json",
    "cwd": "./",
    "deterministicOrder": false,
    "display": true,
    "dist": "./markdown-to-json/outputs/tutorials.json",
    "filePattern": "*.md",
    "ignore": "",
    "port": 3001,
    "server": false,
    "src": "./docs/tutorials",
    "name": "tutorials",
    "metadata": true,
    "version": "1.6.1"
  },
  "data": [
    {
      "id": "bot-studio",
      "contents": "<h2 id=\"introduction\">Introduction</h2>\n<p>Building a chatbot on Kata | Platform is quick and easy, even with a lack of programming knowledge. In this tutorial, we will learn how to create a simple bot on LINE Messenger to order a pizza. We will also learn how to train your bot with NL Studio.</p>\n<p>Let&#39;s start by looking at this bot diagram, or commonly called “conversation tree.” Conversation tree is an overview of chatbot functionalities. In this conversation tree, we break down the process of ordering pizza and the types of bot action we want to use on each state.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<h2 id=\"sign-up-to-kata--platform\">Sign up to Kata | Platform</h2>\n<p>Create an account on Kata | Platform to start building chatbot.</p>\n<p>On your browser, open <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a> and click “Sign Up”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-2.png\" alt=\"bse-2\"></p>\n<p>Then fill the form with a username, an email, and an account type. Continue by clicking &quot;Sign Up.&quot;</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-3.png\" alt=\"bse-3\"></p>\n<p>You will get a confirmation email once our team has verified your account.</p>\n<p>You may follow the instructions provided in the confirmation email to activate and start using your account.</p>\n<h2 id=\"create-a-project\">Create a Project</h2>\n<h3 id=\"login-to-kata--platform\">Login to Kata | Platform</h3>\n<p>On your browser, open <a href=\"https://platform.kata.ai/login\" target=\"_blank\">platform.kata.ai/login</a> and enter your username &amp; password.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-4.png\" alt=\"bse-4\"></p>\n<p>Click &quot;Login&quot; to continue.</p>\n<h3 id=\"create-a-project-1\">Create a project</h3>\n<p>After you logged in, you will be taken to the Project Page.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-5.png\" alt=\"bse-5\"></p>\n<p>Click on “Create Project” and fill in the form. Each project contains one bot design, one NL, and one CMS.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-6.png\" alt=\"bse-6\"></p>\n<p>NLU language is used to determine which language model you want to use. Currently, we support Bahasa Indonesia and English.</p>\n<p>You can also choose NLU Visibility to be public or private. If you choose public, <strong>all Kata | Platform users</strong> can utilize your NLU using root and inherit function.</p>\n<h2 id=\"create-fallback-flow\">Create Fallback Flow</h2>\n<h3 id=\"create-fallback-flow-1\">Create fallback flow</h3>\n<p>Once you create a project, you will be redirected to the Bot Studio menu.</p>\n<p>Now we are going to learn how to create a flow. Flow is a container of <strong>intent, state, and action</strong>. A flow typically represents a linear process.</p>\n<p>The first flow that we will create is a Fallback Flow. Its purpose is to handle undefined users input, or commonly called “else condition” state. In this case, the “else condition” is everything that is not “Start Order”.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<p>You may find a flow that is created automatically by the system or default flow. We will delete that flow by pressing more button and then “Delete.”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-8.png\" alt=\"bse-8\"></p>\n<p>Next, click “Create Flow” button to create <code>fallback</code> flow. Set flow to active, persistent, and default.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-9.png\" alt=\"bse-9\"></p>\n<h3 id=\"create-fallback-intent\">Create fallback intent</h3>\n<p>After you have created <code>fallback</code> flow, we will create new intent by pressing the Intents tab on the sub-menu. Then, we will create a new intent for <code>fallback</code> flow. Click “Create Intent” button to create.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-10.png\" alt=\"bse-10\"></p>\n<p>Then, fill in the form as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-11.png\" alt=\"bse-11\"></p>\n<h3 id=\"create-state-init\">Create State init</h3>\n<p>Next, we will create a state called <code>init</code>. Click the ”+” button at the bottom right of your screen.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-12.png\" alt=\"bse-12\"></p>\n<p>Fill state with name <code>init</code> on Overview tab and set it to initial state and end state (as shown below).</p>\n<p>Enabling Initial State and End State will make <code>init</code> the first and the last flow to be checked by the bot when there isn&#39;t any flow that matches a user&#39;s input.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-13.png\" alt=\"bse-13\"></p>\n<p>Now we will create a bot response to display an apology message. Click “Add actions” button to create a response.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-14.png\" alt=\"bse-14\"></p>\n<p>Container for creating action will appear</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-15.png\" alt=\"bse-15\"></p>\n<h3 id=\"create-action-text-in-state-init\">Create Action Text in State init</h3>\n<p>Click on “+” button to create a new action.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-16.png\" alt=\"bse-16\"></p>\n<p>Choose action type “Text”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-17.png\" alt=\"bse-17\"></p>\n<p>Then, fill in the form</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-18.png\" alt=\"bse-18\"></p>\n<p>Click on “Create Action” button.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-19.png\" alt=\"bse-19\"></p>\n<h3 id=\"create-self-transition-in-state-init\">Create Self Transition in State Init</h3>\n<p>The last step to finalize <code>fallback</code> flow is to create self-transition for <code>init</code> state. Self transition is required to avoid error when the next state is not available. Click on “Transitions” and enable Self Transition.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-20.png\" alt=\"bse-20\"></p>\n<p>Click “Create” button. Your screen should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-21.png\" alt=\"bse-21\"></p>\n<h2 id=\"create-order-flow\">Create Order Flow</h2>\n<p>Next, we will create <code>Start Order</code> flow to handle pizza order.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<h3 id=\"create-flow-order\">Create Flow Order</h3>\n<p>First step is to create another flow called <code>order</code> .</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-22.png\" alt=\"bse-22\"></p>\n<p>Created flow will be shown like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-23.png\" alt=\"bse-23\"></p>\n<h3 id=\"create-keyword-nlus-for-order\">Create Keyword NLUs for &#39;Order&#39;</h3>\n<p>In this step, we will define the NLU (Natural Language Understanding) to trigger <code>order</code> flow. NLU is used to translate user inputs into data that machine can understand. There are many types of NLU, but the type that we will use in this particular flow is called <code>keyword</code>. To define the NLU, go to NLUs menu.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-24.png\" alt=\"bse-24\"></p>\n<p>Next, click on “Create NLU”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-25.png\" alt=\"bse-25\"></p>\n<p>Choose Keyword type and enter keywords that represents <code>order</code>, such as “order”, “pls order”, “order pza”.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-26.png\" alt=\"bse-26\"></p>\n<p>Successfully created NLU looks like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-27.png\" alt=\"bse-27\"></p>\n<h3 id=\"create-intent-for-order\">Create Intent for Order</h3>\n<p>Each flow requires an <code>intent</code> to classify user&#39;s inquiry and trigger matching flow. So our next step is to set initial intent for <code>order</code> flow.</p>\n<p>Go back to Conversation Flow menu and click on <code>order</code> flow, then click on “Intents” tab.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-28.png\" alt=\"bse-28\"></p>\n<p>Previously, you already created keyword NLUs called <code>order</code>. We will set that keyword as intent in <code>order</code> flow. Map the NLU on classifier section.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-29.png\" alt=\"bse-29\"></p>\n<p>Click “Create” to create the intent. Your screen should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-30.png\" alt=\"bse-30\"></p>\n<h3 id=\"create-a-state-named-init\">Create a State Named init</h3>\n<p>Every flow must have at least one state. Because we haven&#39;t created any state in <code>order</code> flow, we have to create one. Let&#39;s create a state called <code>init</code>.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-31.png\" alt=\"bse-31\"></p>\n<p>Click “Create” button to create initial state.</p>\n<p>Next, we will define how the bot will respond to user who entered <code>order</code> flow.</p>\n<h2 id=\"create-action-for-pizza-menu\">Create Action for Pizza Menu</h2>\n<p>As seen on the conversation tree below, the first message in <code>order</code> flow is “Show Pizza Type”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<h3 id=\"create-a-state-to-show-pizza-type-in-text-action-type\">Create a State to Show Pizza type in Text Action Type</h3>\n<p>To get started, we need to create a state named <code>showPizza</code> on <code>order</code> flow. Click on “+” button in Conversation Flow menu.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-33.png\" alt=\"bse-33\"></p>\n<p>Let&#39;s begin by creating an action called <code>pizzaOptions</code>. This action will inform users in <strong>text about our available pizza menu</strong>.</p>\n<p>Click on “+” button to create an action and choose Text as action type.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-34.png\" alt=\"bse-34\"></p>\n<p>Fill in Text action type to inform our pizza menu</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-35.png\" alt=\"bse-35\"></p>\n<p>Click on “Create Action” to finalize. Next step is to create an action called <code>askOptions</code></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-36.png\" alt=\"bse-36\"></p>\n<p>Click on “Create Action” button. Your form should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-37.png\" alt=\"bse-37\"></p>\n<p>Then you have to make self-transition in Transition tab as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-37-1.png\" alt=\"bse-37-1\"></p>\n<p>Click “Create” to create the state. Successfully created state will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-38.png\" alt=\"bse-38\"></p>\n<h3 id=\"update-showpizza-state-into-show-pizza-menu-in-carousel-action-type\">Update showPizza state Into Show Pizza Menu in Carousel Action Type</h3>\n<p>Previous step is an example to create action to <strong>show pizza menu in text.</strong> Let&#39;s try to update the state into Carousel action type.</p>\n<p>To update the state, click on <code>showPizza</code> state and an update state form will appear</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-39.png\" alt=\"bse-39\"></p>\n<p>Then, remove all actions in the state by clicking “x” on each action.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-40.png\" alt=\"bse-40\"></p>\n<p>After removing available actions, we will create an action called <code>pizzaMenu</code> as Carousel action type.</p>\n<p>Click on “Add” actions button then click on “+” button to create a new action. Choose Carousel action type to continue.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-41.png\" alt=\"bse-41\"></p>\n<p>Enter <code>pizzaMenu</code> as name</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-42.png\" alt=\"bse-42\"></p>\n<p>Fill in the carousel content by clicking “Add carousel” button, then click on “Add action” button to define the <strong>label and type</strong>. Next, click on Add Payload button to enter <strong>key and value</strong>.</p>\n<p>Fill in first carousel with this data</p>\n<pre><code>Title: Pepperoni\nText: This is the favorite of Peps\nThumbnail Image Url: https://www.wikihow.com/images/thumb/a/a7/Make-Pepperoni-Pizza-Step-19-Version-2.jpg/aid1074004-v4-728px-Make-Pepperoni-Pizza-Step-19-Version-2.jpg.webp\nActions:\n  Label: Pepperoni\n  Type: Postback\n  Payload:\n    - key: type\n      value: pizza\n    - key: pizza\n      value: Pepperoni</code></pre><p>Fill in second carousel with this data</p>\n<pre><code>Title: Veggie Lovers\nText: Vegie vegie stay healthy\nThumbnail Image Url: https://www.calcuttaweb.com/store/image/data/calcutta/pizza/veggie-lovers-pizza-pihu-7.jpg\nActions:\n  Label: Veggie Lovers\n  Type: Postback\n  Payload:\n    - key: type\n      value: pizza\n    - key: pizza\n      value: Veggie Lovers</code></pre><p>Your first form should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-43.png\" alt=\"bse-43\"></p>\n<p>Your second form should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-44.png\" alt=\"bse-44\"></p>\n<p>Finalize this step by clicking “Create Action.”</p>\n<p>It should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-45.png\" alt=\"bse-45\"></p>\n<p>Once the bot displays a carousel containing the type for pizza menu, its next step is to ask user to select the pizza. Click “Add actions” button to trigger drop-down list, then choose <code>askOptions</code></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-46.png\" alt=\"bse-46\"></p>\n<p>After you select <code>askOptions</code> action click “Create Action” button to finalize this step.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-47.png\" alt=\"bse-47\"></p>\n<p>Your form should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-48.png\" alt=\"bse-48\"></p>\n<p>Click “Update” to update the state.</p>\n<h3 id=\"create-intent-to-choose-a-pizza\">Create Intent to Choose A Pizza</h3>\n<p>Now we have to create an intent called <code>pizzaChosen</code> to handle user&#39;s input after they have selected a pizza type. Click on Intent menu in <code>order</code> flow.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-49.png\" alt=\"bse-49\"></p>\n<p>Click on Create Intent and create intent as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-50.png\" alt=\"bse-50\"></p>\n<p>Successfully created intent looks like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-51.png\" alt=\"bse-51\"></p>\n<h3 id=\"create-transition-between-init-and-showpizza\">Create Transition between init and showPizza</h3>\n<p>Now, we will create a transition between two states that we have created before.</p>\n<p>Click the green dot on <code>init</code> state, and a connector line will appear. Connect that line to <code>showPizza</code> state. If you do it right, a Create Transition form will appear.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-52.png\" alt=\"bse-52\"></p>\n<p>Fill in the form with these data, and click “Create”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-52-1.png\" alt=\"bse-52-1\"></p>\n<h3 id=\"create-reenter-intent\">Create &#39;reenter&#39; intent</h3>\n<p>Next, we will add <code>reenter</code> intent so the bot can return to its previous state after triggering fallback state. Create the intent in <code>order</code> flow.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-53.png\" alt=\"bse-53\"></p>\n<h2 id=\"create-action-for-asking-pizza-quantity\">Create Action for Asking Pizza Quantity</h2>\n<p>In this step we will learn how to create “Ask quantity” state.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<h3 id=\"create-pizzaquantity-state\">Create pizzaQuantity state</h3>\n<p>In this step we will create <code>pizzaQuantity</code> state to handle order quantity. The type of action we will use is in this state is Text. Click on “+” button on <code>order</code> flow and fill the form as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-54.png\" alt=\"bse-54\"></p>\n<p>Then you have to make self-transition in Transition tab as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-54_1.png\" alt=\"bse-54_1\"></p>\n<p>Result:</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-55.png\" alt=\"bse-55\"></p>\n<h3 id=\"create-nlus-quantity\">Create NLUs quantity</h3>\n<p>Afterwards, we have to handle user&#39;s input with NLUs. Because we only allowed number from 1 to 9, we will create a limitation in regex format. Click on Create NLUs and follow this screenshot</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-56.png\" alt=\"bse-56\"></p>\n<p>Successfully created NLU will be shown like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-57.png\" alt=\"bse-57\"></p>\n<h3 id=\"create-intent-quantity\">Create Intent quantity</h3>\n<p>After we created the NLU, we will add an intent to respond user&#39;s input. In <code>order</code> flow, click on Create Intent and fill in the form</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-58.png\" alt=\"bse-58\"></p>\n<p>Successfully created intent will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-59.png\" alt=\"bse-59\"></p>\n<h3 id=\"create-transition-between-showpizza-and-pizzaquantity\">Create Transition between showPizza and pizzaQuantity</h3>\n<p>Now we have to create a transition between <code>showPizza</code>and <code>pizzaQuantity</code>. We will also store <code>payload.pizza</code> value into <code>context.pizza</code>. Click on the blue dot on <code>showPizza</code> and drag the line to <code>pizzaQuantity</code> state to create the transition. Create Transition form will appear after you have successfully connected the states.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-60.png\" alt=\"bse-60\"></p>\n<p>Created transition will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-61.png\" alt=\"bse-61\"></p>\n<h2 id=\"create-confirmation-action\">Create Confirmation Action</h2>\n<p>Our next step is creating <code>Ask confirmation</code> state.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-1.jpg\" alt=\"bse-1\"></p>\n<h3 id=\"create-yesno-keyword-nlus\">Create “YESNO” keyword NLUs</h3>\n<p>First, we will create a keyword NLU to handle <code>yes</code> and <code>no</code>. Click on Create NLUs and fill in as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-62.png\" alt=\"bse-62\"></p>\n<p>Successfully created NLU will look like this\n<img src=\"/assets/images/tutorial/bot-studio/bse-63.png\" alt=\"bse-63\"></p>\n<h3 id=\"create-confirmpizza-state\">Create confirmPizza state</h3>\n<p>Now we will create <code>confirmPizza</code> state to handle order confirmation. We will also store chosen pizza &amp; quantity information in this state. Select <code>order</code> flow and click on “+” button to create <code>confirmPizza</code> state.\n<img src=\"/assets/images/tutorial/bot-studio/bse-64.png\" alt=\"bse-64\"></p>\n<h2 id=\"add-mapping-in-ontransit-tab\">Add mapping in onTransit tab</h2>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-67.png\" alt=\"bse-67\"></p>\n<p>Don&#39;t forget to add self-transition in a state. Click Create Action. Your screen should look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-65.png\" alt=\"bse-65\"></p>\n<h3 id=\"create-a-transition-from-pizzaquantity-to-confirmpizza\">Create a transition from pizzaQuantity to confirmPizza</h3>\n<p>We will make a transition by storing value (mapping) from pizza quantity <strong>and</strong> chosen pizza type. Click the blue dot on <code>pizzaQuantity</code> and drag the line to <code>confirmPizza</code> state to create a transition. Create Transition form will appear after you successfully connected the states.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-66.png\" alt=\"bse-66\"></p>\n<p>Result will be shown as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-68.png\" alt=\"bse-68\"></p>\n<h3 id=\"create-intent-yesno\">Create intent yesno</h3>\n<p>Previously, we already made an NLU containing <code>yes</code> and <code>no</code> keywords. We will use that NLU as a classifier on an intent.</p>\n<p>First of all, we will create an intent in <code>order</code> flow for the keyword <code>yes</code></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-69.png\" alt=\"bse-69\"></p>\n<p>Then, we will create an intent for keyword <code>no</code></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-70.png\" alt=\"bse-70\"></p>\n<p>Both intent will appear as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-71.png\" alt=\"bse-71\"></p>\n<h3 id=\"create-done-state\">Create done state</h3>\n<p>In <code>done</code> state, we will complete the order by saying thank you and end the conversation. We will also set a condition when a user wants to cancel the order. So in this state we will create two actions: <code>sayThanks</code> and <code>sayCancel</code>.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-72.png\" alt=\"bse-72\"></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-73.png\" alt=\"bse-73\"></p>\n<p>Also, don&#39;t forget to add self transition in the state. Result:\n<img src=\"/assets/images/tutorial/bot-studio/bse-74.png\" alt=\"bse-74\"></p>\n<h3 id=\"create-a-transition-from-confirmpizza-to-done\">Create a transition from confirmPizza to done</h3>\n<p>Next, we will connect <code>confirmPizza</code> state to <code>done</code> state. Because <code>done</code> is the last state, we will set it as default transition. Connect <code>confirmPizza</code> to <code>done</code> by clicking the blue dot and drag the line to connect the states. Create Transition form will appear after you have successfully connected the states.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-75.png\" alt=\"bse-75\"></p>\n<p>Final flow:</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-76.png\" alt=\"bse-76\"></p>\n<h2 id=\"publish-your-bot\">Publish Your Bot</h2>\n<p>To save your work, click on Publish button located at the top right of your screen. Fill in the changelog as “initial version of pizza bot” for future reference. Click “Publish” to continue.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-77.png\" alt=\"bse-77\"></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-78.png\" alt=\"bse-78\"></p>\n<p>Every time you publish a bot, it will record a hash number (similar to Git&#39;s hash number) in Revision List.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-79.png\" alt=\"bse-79\"></p>\n<h2 id=\"testing-your-chatbot\">Testing Your Chatbot</h2>\n<p>Click on Test Chatbot on Bot Studio then type “order” to initialize <code>order</code> flow.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-80.png\" alt=\"bse-80\"></p>\n<p>Check on the rest of the flow and make sure everything you&#39;ve made works.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy Your Chatbot</h2>\n<p>Now we will try to deploy our chatbot to LINE Messenger.</p>\n<h3 id=\"create-deployment\">Create deployment</h3>\n<p>First of all, we have to create a deployment first. Find the “Deployment” menu on the left sidebar.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-81.png\" alt=\"bse-81\"></p>\n<p>Click on Create Deployment button on top right</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-82.png\" alt=\"bse-82\"></p>\n<p>Choose Patch on Deployment Version.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-83.png\" alt=\"bse-83\"></p>\n<p>Succesfully created deployment looks like this.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-84.png\" alt=\"bse-84\"></p>\n<h3 id=\"create-environment\">Create Environment</h3>\n<p>Kata | Platform 3.0 allows you to set up 3 separate environments in your project: Development, Staging, and Production. Inside each environment, you can add as many messaging channel as you like. You have to setup environment first before integrating to messaging channel.</p>\n<p>In this tutorial, we will try to setup Production environment. Click on Environment menu under Deploy and you will be shown 3 available environments.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-85.png\" alt=\"bse-85\"></p>\n<p>Click “Create Environment” button in Production.</p>\n<p>The first field we have to fill in is deployment version. Choose 0.0.1 (shown on the previous step) as deployment version in Production.</p>\n<p>Another field we have to fill in is environment URL. This URL is used to access CMS Client later.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-86.png\" alt=\"bse-86\"></p>\n<p>Successfully created environment will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-87.png\" alt=\"bse-87\"></p>\n<p>Next, we need to create channel inside the environment. Click on Create Channel on Production environment and you will be redirected to Create Channel page</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-88.png\" alt=\"bse-88\"></p>\n<p>Next, click “Create Channel” and fill in as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-89.png\" alt=\"bse-89\"></p>\n<p>Let&#39;s setup LINE developer console so you can fill in fields highlighted with red box.</p>\n<h3 id=\"registration-to-line-developer-console\">Registration to LINE Developer console</h3>\n<p><strong>Create LINE account</strong></p>\n<p>To sign up for a LINE developer account, you have to have a LINE account by <a href=\"https://line.me/en/download\" target=\"_blank\"> installing LINE application, either desktop or mobile app.</a> After you successfully registered, sign in to <a href=\"https://developers.line.biz/en/\" target=\"_blank\">https://developers.line.biz/en/</a></p>\n<p>In LINE Developer Console click Log In.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-90.png\" alt=\"bse-90\"></p>\n<p>Click on Log in with LINE</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-91.png\" alt=\"bse-91\"></p>\n<p>Enter your email and password</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-92.png\" alt=\"bse-92\"></p>\n<p>After you successfully logged in, you will be redirected to provider list dashboard</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-93.png\" alt=\"bse-93\"></p>\n<p><strong>Create a Provider</strong></p>\n<p>Click “Create New Provider”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-94.png\" alt=\"bse-94\"></p>\n<p>Fill in provider name</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-95.png\" alt=\"bse-95\"></p>\n<p>Click Confirm to continue. You will have to re-confirm the provider name since it cannot be changed later. Click “Create” to confirm.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-96.png\" alt=\"bse-96\"></p>\n<h3 id=\"setup-channel-for-line-integration\">Setup Channel for LINE Integration</h3>\n<p>Setup channel in Messaging API by clicking Create Channel on Messaging API.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-97.png\" alt=\"bse-97\"></p>\n<p>Fill in the form as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-98.png\" alt=\"bse-98\"></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-99.png\" alt=\"bse-99\"></p>\n<p>Next, you have to choose <strong>Developer Trial as Plan</strong></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-100.png\" alt=\"bse-100\">Continue to click Confirm.</p>\n<p>Accept Terms of Use from LINE then click Create</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-101.png\" alt=\"bse-101\"></p>\n<p>Successfuly created channel will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-102.png\" alt=\"bse-102\"></p>\n<h3 id=\"integration-line-and-your-chatbot\">Integration LINE and Your Chatbot</h3>\n<p>Click on created channel to fill in Channel Access Token and Channel Secret. Here is the guideline to fill in those fields</p>\n<h4 id=\"fill-in-channel-access-token-field\">Fill in Channel Access Token field</h4>\n<p>Click “Issue” in Messaging Settings section</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-103.png\" alt=\"bse-103\"></p>\n<p>Then, issue dialog will pop up. Click on Issue to continue</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-104.png\" alt=\"bse-104\"></p>\n<p>Then, copy Channel Access Token below and paste it on Create Channel form in Kata | Platform</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-105.png\" alt=\"bse-105\"></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-106.png\" alt=\"bse-106\"></p>\n<p><strong>Fill in Channel Secret field</strong></p>\n<p>In Basic Information, copy Channel Secret from LINE to Kata | Platform</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-107.png\" alt=\"bse-107\"></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-108.png\" alt=\"bse-108\"></p>\n<p>Final result in Kata | Platform will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-109.png\" alt=\"bse-109\"></p>\n<p>Click “Create” to generate webhook URL from Kata | Platform.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-110.png\" alt=\"bse-110\"></p>\n<p>After webhook URL is generated, go to Messaging Settings in LINE developer console to enable webhook. <strong>Please check that you already enable the webhook by click on Enable in &quot;Use Webhoooks&quot; section which placed above Webhook URL field</strong></p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-111.png\" alt=\"bse-111\">\nClick “Update” then paste the webhook URL to LINE developer console.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-112.png\" alt=\"bse-112\"></p>\n<p>Click “Update” then click “Verify.”</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-113.png\" alt=\"bse-113\"></p>\n<p>Next, disable auto-reply messages and greeting messages</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-114.png\" alt=\"bse-114\"></p>\n<p>Voila! You have successfully deployed your bot to LINE Messenger.</p>\n<p>Scan the QR Code in LINE Developer Console to add the bot.</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-115.png\" alt=\"bse-115\"></p>\n<p>Then, test to scan QR Code</p>\n<p><img src=\"/assets/images/tutorial/bot-studio/bse-116.png\" alt=\"bse-116\"></p>\n",
      "layout": "tutorial",
      "title": "Bot Studio Tutorial",
      "imgSpot": "/assets/images/tutorial/spot-cms.png",
      "product": "kata-platform",
      "prev": "hello-world-tutorial",
      "next": "nl-studio-tutorial",
      "date": "2018-07-07T07:00:00+07:00",
      "excerpt": "<p>Building a chatbot on Kata | Platform is quick and easy, even with a lack of programming knowledge. In this tutorial, we will learn how to create a simple bot on LINE Messenger to order a pizza. We will also learn how to train your bot with NL Studio.</p>",
      "meta": {
        "relativePath": "bot-studio.html",
        "createdAt": "2022-02-03T01:15:32.771Z",
        "lastModified": "2022-02-03T01:15:32.771Z",
        "size": 24958,
        "formattedSize": "24.4 KB"
      }
    },
    {
      "id": "create-igdm-bot-handover-from-chatbot-to-agent",
      "contents": "<p>Kata Platform <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> is a platform to create chatbots and train them with Natural Language Processing (NLP). You can create any chatbots for any use-cases, such as FAQ, campaign, customer service, handover to human agents, and more.</p>\n<p>Currently, we’ve launched Instagram chatbot with various features, such as End-users can receive automated replies by creating an Instagram story that mentioned brand, receive automated replies by replying to brand Instagram story, receive bot responses in image, text, quick reply, ice breaker (for first-time users only) and generic template (similar with a carousel in other messaging platforms). Learn more about <a href=\"/channels/instagram-messaging/\">Instagram DM Automation</a>.</p>\n<p>In this tutorial, we will create an Instagram chatbot that is able to send conversations to human agents, also known as &quot;Agent Handover&#39;&#39;. We will use the Kata Omnichat dashboard to connect chatbots with human agents. Learn more about <a href=\"/kata-omnichat\">Omnichat</a>.</p>\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/dAHnoTX4BUE\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n\n<h2 id=\"chatbot-flow\">Chatbot Flow</h2>\n<p>Before we jump into the tutorial, let’s see the scenario for the conversation. We will create a chatbot using <em>keywords</em>.</p>\n<h3 id=\"conversation-flow-table\">Conversation Flow Table</h3>\n<p>Conversation flow table details can be seen <a href=\"https://drive.google.com/file/d/1rh5XvmGvbNyXZetG6v-tjAr8LvXjU-aj/view\" target=\"_blank\">here</a></p>\n<h2 id=\"create-project\">Create Project</h2>\n<h3 id=\"objective-register-your-new-account-and-login-to-the-platform\">Objective: Register your new account and login to the Platform</h3>\n<ol>\n<li><p>Go to <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> and click <strong>Sign Up</strong> to create new account</p>\n</li>\n<li><p>Input required fields in sign up page: <strong>Username, email address, role and captcha</strong></p>\n</li>\n<li><p>Go to your registered email inbox. You will receive an email to verify your account and input your password</p>\n</li>\n<li><p>When you click the <strong>Confirm Email</strong> button in the verification email, you will be redirected to set up a password. Insert your password and confirm the password.</p>\n</li>\n<li><p>You will be redirected to the Login <strong>Page</strong>. Input your username and password to continue.</p>\n</li>\n</ol>\n<h3 id=\"objective-create-new-chatbot-project\">Objective: Create new chatbot project</h3>\n<h4 id=\"login-to-kata-platform-and-create-a-project\">Login to Kata Platform and create a project</h4>\n<ol>\n<li><p>Open your browser, then open the URL <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a> and enter your username &amp; password.</p>\n</li>\n<li><p>Click <strong>&quot;Login&quot;</strong> to continue.</p>\n</li>\n<li><p>Click on <strong>&quot;Create Project&quot;</strong> and fill in the form. Each project contains one bot design, one NL, and one CMS.</p>\n</li>\n</ol>\n<h2 id=\"create-handover-flow\">Create Handover Flow</h2>\n<h3 id=\"objective-define-a-flow\">Objective: Define a flow</h3>\n<h4 id=\"create-a-flow-name-handover-we-will-use-1-flow-for-this-simple-bot\">Create a flow name &quot;handover&quot;. We will use 1 flow for this simple bot</h4>\n<ol>\n<li><p>Click <strong>&quot;Create Flow&quot;</strong> button on the Conversation Flow screen</p>\n</li>\n<li><p>Create flow &quot;handover&quot;, other fields are left blank. Then, click <strong>Create</strong>.</p>\n</li>\n</ol>\n<h4 id=\"create-init-state\">Create &quot;init&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Create state &quot;init&quot; and click the toggle to turn on “Initial State” and other fields are left blank. Then, click <strong>Create</strong>.</p>\n</li>\n</ol>\n<h2 id=\"create-greetings-state-to-respond-end-users-who-greet-bot-via-direct-message\">Create Greetings State to Respond End-User’s who Greet Bot via Direct Message</h2>\n<p>In this part, we are going to create a greeting flow to respond to end-users who greet the brand&#39;s bot via direct message, <strong>but</strong> <strong>not</strong> via Ice Breaker. For example, the end-user says &quot;hi&quot; to the bot and does not want to choose via Ice Breaker. Learn more about <a href=\"/channels/instagram-messaging\">Ice Breaker</a>.</p>\n<h3 id=\"objective-create-greetings-state-to-define-how-to-respond\">Objective: Create greetings state to define how to respond</h3>\n<h4 id=\"create-greetingsstate-as-bot-response-to-show-keywords-menu\">Create &quot;greetingsState&quot; as bot response to show keywords menu</h4>\n<ol>\n<li><p>Create another state by clicking the <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state named “greetingsState”</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;</strong>, then click <strong>“+”</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;greetingsText&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Halo, selamat datang di layanan CS Bank ABC 😊 \\n\\nUntuk memulai, pilih menu yang tersedia: \\n\\nKetik &quot;1&quot; untuk melihat FAQ \\nKetik “2” untuk melihat promo yang tersedia \\nKetik “3” untuk melihat lokasi Bank ABC \\nKetik “4” untuk berbicara dengan CS Bank ABC \\n\\n💡 Cukup ketik angka pilihannya, ya</code></pre><ol start=\"6\">\n<li>Click <strong>Create Action</strong></li>\n</ol>\n<h4 id=\"set-the-state-into-self-transition\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-catch-end-users-messages-when-greeting-the-bot\">Objective: Catch end-users messages when greeting the bot</h3>\n<h4 id=\"create-greetings-keywords-to-build-understanding-in-chatbots-when-end-users-greet-the-bot-we-will-use-the-nlus-feature-to-create-the-keywords\">Create &quot;greetings&quot; keywords to build understanding in chatbots when end-users greet the bot. We will use the NLUs feature to create the keywords.</h4>\n<ol>\n<li><p>Go to the menu <strong>&quot;NLUs&quot;</strong> which is placed under the “Conversation Flows” menu. Your screen will be switched to create NLUs</p>\n</li>\n<li><p>Click <strong>Create NLU</strong></p>\n</li>\n<li><p>Then, fill in the fields as follow</p>\n</li>\n</ol>\n<pre><code>NLU Name: greetings\nNLU Type: Keyword</code></pre><ol start=\"4\">\n<li>Next, click <strong>&quot;Add Keyword&quot;</strong> to define any words to trigger the bot. Fill in the main keyword as follow</li>\n</ol>\n<pre><code>Main keyword: greetings</code></pre><ol start=\"5\">\n<li>Add a new word by pressing &quot;enter&quot; on your keyboard. Every time you write a new word, press “enter” on your keyboard to save words. Add these words</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_1.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create &quot;greetings&quot; keyword</p>\n</blockquote>\n<ol start=\"6\">\n<li>Click <strong>&quot;Create&quot;</strong> to save the NLUs</li>\n</ol>\n<h4 id=\"create-greetingsintent-intent-to-catch-users-input\">Create &quot;greetingsIntent&quot; intent to catch user’s input</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. The choice of &quot;Intent type&quot; is text, which means it will catch incoming messages with text only. We also set up the intent into “As Initial”, which means the intent will be executed for the first time. On classifier, use “greetings” NLUs that we’ve created in the previous step to connect the intent with creating keywords for greetings.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_2.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent and create mapping with greetings keyword</p>\n</blockquote>\n<h3 id=\"objective-connect-init-and-greetingsstate-states-by-creating-a-transition\">Objective: Connect &quot;init&quot; and “greetingsState” states by creating a transition</h3>\n<h4 id=\"create-a-transition-to-connect-init-and-greetingsstate-states-the-transition-will-define-in-which-condition-the-greetings-state-including-the-actions-state-will-be-executed\">Create a transition to connect &quot;init&quot; and “greetingsState” states. The transition will define in which condition the greetings state, including the actions’ state, will be executed.</h4>\n<ol>\n<li><p>Pull a line from the &quot;init&quot; state and drag it to the “greetingsState” state. If you succeed, then it will show a <strong>Create Transition</strong> drawer</p>\n</li>\n<li><p>Fill in the transition condition as follow</p>\n</li>\n</ol>\n<pre><code>intent == &quot;greetingsIntent&quot;</code></pre><ol start=\"3\">\n<li>Click <strong>&quot;Create Transition&quot;</strong></li>\n</ol>\n<h2 id=\"create-greetings-state-to-respond-end-users-who-greet-bot-via-instagram-story-mention\">Create Greetings State to Respond End-User’s who Greet Bot via Instagram Story Mention</h2>\n<p>In this part, we are going to create a greeting flow to respond to end-users who mentioned the brand’s Instagram account in the end-users Instagram Stories. End-user will receive an automatic message in a direct message. Learn more about <a href=\"/channels/instagram-messaging\">Instagram Story Mention</a>.</p>\n<h3 id=\"objective-catch-end-users-who-mentioned-the-brands-in-the-end-users-instagram-story\">Objective: Catch end-users who mentioned the brand’s in the end-users Instagram Story</h3>\n<h4 id=\"create-igmentionedintent-intent-to-catch-users-input\">Create &quot;igMentionedIntent&quot; intent to catch user’s input</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. We set up the intent into &quot;As Initial&quot;, which means the intent will be executed for the first time. Choose intent type into data, because we will use a payload named story_mention.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_3.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for Instagram Story Mention feature</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h3 id=\"objective-create-greetings-state-to-define-how-to-respond-1\">Objective: Create greetings state to define how to respond</h3>\n<h4 id=\"create-igmentionedstate-as-bot-response-to-show-keywords-menu\">Create &quot;igMentionedState&quot; as bot response to show keywords menu</h4>\n<ol>\n<li><p>Create another state by clicking the <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state named “_igMentionedState_”</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;</strong>, then click <strong>“+”</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;igMentionedText&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Halo, terima kasih telah menyapa Bank ABC di Instagram Story Anda 😊 \\n\\nUntuk memulai, pilih menu yang tersedia: \\n\\nKetik &quot;1&quot; untuk melihat FAQ \\nKetik “2” untuk melihat promo yang tersedia \\nKetik “3” untuk melihat lokasi Bank ABC \\nKetik “4” untuk berbicara dengan CS Bank ABC \\n\\n💡 Cukup ketik angka pilihannya, ya</code></pre><ol start=\"6\">\n<li>Click <strong>Create Action</strong></li>\n</ol>\n<h4 id=\"set-the-state-into-self-transition-1\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-init-and-igmentionedstate-states-by-creating-a-transition\">Objective: Connect &quot;init&quot; and “igMentionedState” states by creating a transition</h3>\n<h4 id=\"create-a-transition-to-connect-init-and-igmentionedstate-states-the-transition-will-define-in-which-condition-the-greetings-state-including-the-actions-state-will-be-executed\">Create a transition to connect &quot;init&quot; and “igMentionedState” states. The transition will define in which condition the greetings state, including the actions’ state, will be executed.</h4>\n<ol>\n<li><p>Pull a line from the &quot;init&quot; state and drag it to the “greetings” state. If you succeed, then it will show a <strong>Create Transition</strong> drawer</p>\n</li>\n<li><p>Fill in the transition as follow</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_4.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create transition and define which intent to trigger the next state &quot;igMentionedState&quot;</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>&quot;Create Transition&quot;</strong></li>\n</ol>\n<h2 id=\"create-greetings-state-to-respond-end-users-who-greet-bot-via-instagram-story-reply\">Create Greetings State to Respond End-User’s who Greet Bot via Instagram Story Reply</h2>\n<p>In this part, we are going to create a greeting flow to respond to end-users who reply to the brand&#39;s Instagram Story. Learn more about <a href=\"/channels/instagram-messaging\">Instagram Story Reply</a>.</p>\n<h3 id=\"objective-catch-end-users-who-reply-to-the-brands-instagram-story\">Objective: Catch end-users who reply to the brand’s Instagram Story</h3>\n<h4 id=\"create-replystoryintent-intent-to-catch-users-input\">Create &quot;replyStoryIntent&quot; intent to catch user’s input</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. We set up the intent into &quot;As Initial&quot;, which means the intent will be executed for the first time. Choose intent type into data, because we will use a payload named story_reply.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_5.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for Instagram Story Reply</p>\n</blockquote>\n<ol start=\"5\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h3 id=\"objective-create-greetings-state-to-define-how-to-respond-2\">Objective: Create greetings state to define how to respond</h3>\n<h4 id=\"create-igstoryreplystate-as-bot-response-to-show-keywords-menu\">Create &quot;igStoryReplyState&quot; as bot response to show keywords menu</h4>\n<ol>\n<li><p>Create another state by clicking the <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state named “igStoryReplyState”</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;</strong>, then click <strong>“+”</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;igStoryReplyText&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Halo, terima kasih telah menyapa Instagram Story Bank ABC 😊 \\n\\nUntuk memulai, pilih menu yang tersedia: \\n\\nKetik &quot;1&quot; untuk melihat FAQ \\nKetik “2” untuk melihat promo yang tersedia \\nKetik “3” untuk melihat lokasi Bank ABC \\nKetik “4” untuk berbicara dengan CS Bank ABC \\n\\n💡 Cukup ketik angka pilihannya, ya</code></pre><ol start=\"6\">\n<li>Click <strong>Create Action</strong></li>\n</ol>\n<h4 id=\"set-the-state-into-self-transition-2\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-init-and-igstoryreplystate-states-by-creating-a-transition\">Objective: Connect &quot;init&quot; and “igStoryReplyState” states by creating a transition</h3>\n<h4 id=\"create-a-transition-to-connect-init-and-igstoryreplystate-states-the-transition-will-define-in-which-condition-the-greetings-state-including-the-actions-state-will-be-executed\">Create a transition to connect &quot;init&quot; and “igStoryReplyState” states. The transition will define in which condition the greetings state, including the actions’ state, will be executed.</h4>\n<ol>\n<li><p>Pull a line from the &quot;init&quot; state and drag it to the “igStoryReplyState” state. If you succeed, then it will show a <strong>Create Transition</strong> drawer</p>\n</li>\n<li><p>Fill in the transition as follow</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_6.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create transition and define which intent to trigger the next state &quot;igStoryReply&quot;</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>&quot;Create Transition&quot;</strong></li>\n</ol>\n<h2 id=\"create-quick-replies\">Create Quick Replies</h2>\n<p>In this step, we will create bot responses named quick reply. Learn more about <a href=\"/channels/instagram-messaging\">Quick Reply for Instagram Messaging</a>.</p>\n<h3 id=\"objective-show-available-faq-topics-to-end-user\">Objective: Show available FAQ topics to end-user</h3>\n<h4 id=\"create-faqstate-state\">Create &quot;faqState&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;<em>faqState</em>&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-quick-reply-response-type\">Create quick reply response type</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Quick Reply&quot;</p>\n</li>\n<li><p>Input action name &quot;qrText&quot;</p>\n</li>\n<li><p>Fill in the Message field with:</p>\n</li>\n</ol>\n<pre><code>Pilih topik yang kamu inginkan 😊</code></pre><ol start=\"5\">\n<li><p>Next, click <strong>Add action</strong> button</p>\n</li>\n<li><p>Fill in the fields as follow</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_7.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create message in quick replies</p>\n</blockquote>\n<ol start=\"7\">\n<li>Click button Create Action</li>\n</ol>\n<h4 id=\"set-the-state-into-self-transition-3\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-all-greetings-states-to-faq-state\">Objective: Connect all greetings states to FAQ state</h3>\n<h4 id=\"connect-greetings-via-direct-message-to-faq-state\">Connect greetings via direct message to FAQ state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;greetingState&quot; to “faqState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;1&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-mention-to-faq-state\">Connect greetings via Instagram story mention to FAQ state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;igMentionedState&quot; to “faqState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;1&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-reply-to-faq-state\">Connect greetings via Instagram story reply to FAQ state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;igStoryReplyState&quot; to “faqState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;1&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h3 id=\"objective-show-bot-response-after-end-user-choose-daftar-rekening-baru\">Objective: Show bot response after end-user choose &quot;Daftar rekening baru&quot;</h3>\n<h4 id=\"create-rekeningbarustate-state\">Create &quot;rekeningBaruState&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;rekeningBaruState&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response\">Create bot response</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;rekeningBaruText&quot;</p>\n</li>\n<li><p>Fill in Message field with:</p>\n</li>\n</ol>\n<pre><code>Untuk mendaftar rekening baru, kamu harus menyiapkan KTP, KK asli dan foto diri</code></pre><ol start=\"5\">\n<li>Click button Create Action</li>\n</ol>\n<h4 id=\"create-bot-action-command-to-trigger-next-state-to-be-executed\">Create bot action command to trigger next state to be executed</h4>\n<p>In this section, the bot will send the &quot;next&quot; command whenever this state is executed. The “next” command will be caught later into an intent for executing another state to confirm end-users whether they want to restart and show the menu or end the conversation.</p>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Command&quot;</p>\n</li>\n<li><p>Input action name &quot;nextCommand&quot;</p>\n</li>\n<li><p>Fill in Command field with:</p>\n</li>\n</ol>\n<pre><code>next</code></pre><ol start=\"6\">\n<li>Click button Create Action</li>\n</ol>\n<h3 id=\"objective-show-bot-response-after-end-user-choose-daftar-kartu-kredit\">Objective: Show bot response after end-user choose &quot;Daftar kartu kredit&quot;</h3>\n<h4 id=\"create-kartukreditstate-state\">Create &quot;kartuKreditState&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;kartuKreditText&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-1\">Create bot response</h4>\n<ol start=\"3\">\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;kartuKreditText&quot;</p>\n</li>\n<li><p>Fill in Message field with:</p>\n</li>\n</ol>\n<pre><code>Untuk mendaftar kartu kredit baru, kamu harus menyiapkan KTP, KK asli dan foto diri</code></pre><ol start=\"7\">\n<li>Click the button Create Action</li>\n</ol>\n<h4 id=\"create-bot-action-command-to-trigger-next-state-to-be-executed-1\">Create bot action command to trigger next state to be executed</h4>\n<p>In this section, the bot will send the &quot;next&quot; command whenever this state is executed. The “next” command will be caught later into an intent for executing another state to confirm end-users whether they want to restart and show the menu or end the conversation. We already created this action in the previous step, so we will choose from available actions.</p>\n<ol>\n<li><p>Click button <strong>Add action</strong> to add more action</p>\n</li>\n<li><p>In &quot;Action name&quot; dropdown, search “nextCommand” actions</p>\n</li>\n<li><p>Click &quot;nextComman&quot; action</p>\n</li>\n<li><p>Then, click <strong>Create Action</strong> button</p>\n</li>\n<li><p>Click <strong>Create</strong> to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-faq-menu-response-to-quick-reply-options\">Objective: Connect FAQ menu response to quick reply options</h3>\n<h4 id=\"create-transition-to-connect-from-faqstate-to-rekeningbarustate\">Create transition to connect from faqState to rekeningBaruState</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;faqState&quot; to “rekeningBaruState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;Daftar rekening baru&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"create-transition-to-connect-from-faqstate-to-kartukreditstate\">Create transition to connect from faqState to kartuKreditState</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;faqState&quot; to “kartuKreditState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;Daftar kartu kredit&quot;</code></pre><ol start=\"5\">\n<li>Click Save</li>\n</ol>\n<h2 id=\"create-generic-template-carousel\">Create Generic Template (Carousel)</h2>\n<p>In this step, we will create bot responses named generic template. Learn more about <a href=\"/kata-omnichat\">Generic Template for Instagram Messaging</a>.</p>\n<h3 id=\"objective-show-bot-response-of-generic-template-carousel-to-end-users\">Objective: Show bot response of generic template (&quot;carousel&quot;) to end-users</h3>\n<h4 id=\"create-carousel\">Create carousel</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;carouselState&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-for-the-first-carousel-buy-1-get-1\">Create bot response for the first carousel: Buy 1 Get 1</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Carousel&quot;</p>\n</li>\n<li><p>Input action name &quot;carousel&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Carousel</strong> button and fill in with the following fields:</p>\n</li>\n</ol>\n<pre><code>Title: Buy 1 Get 1\nText: Gratis 1 pancake di Kafe ABC\nThumbnail image URL: https://images.unsplash.com/photo-1630370939015-408e783fb273?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1yZWxhdGVkfDF8fHxlbnwwfHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60.jpg</code></pre><ol start=\"5\">\n<li>Click the <strong>Add action</strong> button. The first action will trigger another state to execute. Fill in with the following fields:</li>\n</ol>\n<pre><code>Label: B1G1\nPostback\n\nPayload\nKey: carousel\nValue: b1g1</code></pre><ol start=\"6\">\n<li>Then click the <strong>Add action</strong> button again to create another action. The second action will redirect to the open link. Fill in with the following fields:</li>\n</ol>\n<pre><code>Label: Lihat detail\nURL\nhttps://docs.kata.ai</code></pre><h4 id=\"create-bot-response-for-the-second-carousel-diskon-10\">Create bot response for the second carousel: Diskon 10%</h4>\n<ol>\n<li>Next, click the <strong>Add Carousel</strong> button and fill in with the following fields:</li>\n</ol>\n<pre><code>Title: Diskon 10%\nText: Dapatkan di Mart ABC\nThumbnail image URL: https://images.unsplash.com/photo-1515706886582-54c73c5eaf41?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fHNob3B8ZW58MHx8MHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60.jpg</code></pre><ol start=\"8\">\n<li>Click the <strong>Add action</strong> button. The first action will trigger another state to execute. Fill in with the following fields:</li>\n</ol>\n<pre><code>Label: Diskon\nPostback\n\nPayload\nKey: carousel\nValue: diskon</code></pre><ol start=\"9\">\n<li>Then click the <strong>Add action</strong> button again to create another action. The second action will redirect to the open link. Fill in with the following fields:</li>\n</ol>\n<pre><code>Label: Lihat detail\nURL\nhttps://docs.kata.ai</code></pre><ol start=\"10\">\n<li><p>Click <strong>Create Action</strong></p>\n</li>\n<li><p>To finalize the state creation, click <strong>Create</strong> in the state drawer</p>\n</li>\n</ol>\n<h4 id=\"set-the-state-into-self-transition-4\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-all-greetings-states-to-carouselstate\">Objective: Connect all greetings states to carouselState</h3>\n<h4 id=\"connect-greetings-via-direct-message-to-carousel-state\">Connect greetings via direct message to carousel state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;greetingState&quot; to “carouselState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;2&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-mention-to-carousel-state\">Connect greetings via Instagram story mention to carousel state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igMentionedState&quot; to “carouselState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;2&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-reply-to-carousel-state\">Connect greetings via Instagram story reply to carousel state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igStoryReplyState&quot; to “carouselState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;2&quot;</code></pre><ol start=\"3\">\n<li>Click Create</li>\n</ol>\n<h3 id=\"objective-show-bot-response-after-end-users-choose-buy-1-get-1\">Objective: Show bot response after end-users choose &quot;Buy 1 Get 1&quot;</h3>\n<h4 id=\"create-b1g1state-state\">Create &quot;b1g1State&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;b1g1State&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-2\">Create bot response</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;b1g1Text&quot;</p>\n</li>\n<li><p>Fill in Text Response field with:</p>\n</li>\n</ol>\n<pre><code>Kamu telah memilih promo &quot;Buy 1 Get 1&quot; dari Bank ABC. Silahkan mengunjungi Kafe ABC terdekat Anda dan tunjukkan pesan ini 😊</code></pre><ol start=\"5\">\n<li>Click button Create Action</li>\n</ol>\n<h4 id=\"create-bot-action-command-to-trigger-next-state-to-be-executed-2\">Create bot action command to trigger next state to be executed</h4>\n<p>In this section, the bot will send the &quot;next&quot; command whenever this state is executed. The “next” command will be caught later into an intent for executing another state to confirm end-users whether they want to restart and show the menu or end the conversation. We already created this action in the previous step, so we will choose from available actions.</p>\n<ol>\n<li><p>Click button Add action to add more action</p>\n</li>\n<li><p>In the &quot;Action name&quot; dropdown, search “nextCommand” actions</p>\n</li>\n<li><p>Click &quot;nextCommand&quot; action</p>\n</li>\n<li><p>Then, click Create Action button</p>\n</li>\n</ol>\n<h3 id=\"objective-show-bot-response-after-end-users-choose-disc-10\">Objective: Show bot response after end-users choose &quot;Disc 10%&quot;</h3>\n<h4 id=\"create-discstate-state\">Create &quot;discState&quot; state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;discState&quot;</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-3\">Create bot response</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;discText&quot;</p>\n</li>\n<li><p>Fill in Text Response field with:</p>\n</li>\n</ol>\n<pre><code>Kamu telah memilih promo &quot;Diskon 10% di Mart ABC&quot; dari Bank ABC. Silahkan mengunjungi Mart ABC terdekat Anda dan tunjukkan pesan ini 😊</code></pre><ol start=\"6\">\n<li>Click button Create Action</li>\n</ol>\n<h4 id=\"create-bot-action-command-to-trigger-next-state-to-be-executed-3\">Create bot action command to trigger next state to be executed</h4>\n<p>In this section, the bot will send the &quot;next&quot; command whenever this state is executed. The “next” command will be caught later into an intent for executing another state to confirm end-users whether they want to restart and show the menu or end the conversation. We already created this action in the previous step, so we will choose from available actions.</p>\n<ol>\n<li><p>Click button Add action to add more action</p>\n</li>\n<li><p>In the &quot;Action name&quot; dropdown, search “nextCommand” actions</p>\n</li>\n<li><p>Click &quot;nextCommand&quot; action</p>\n</li>\n<li><p>Then, click Create Action button</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-carousel-menu-response-to-postback-options\">Objective: Connect carousel menu response to postback options</h3>\n<h4 id=\"create-transition-to-connect-from-carouselstate-to-b1g1state\">Create transition to connect from carouselState to b1g1State</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;carouselState&quot; to “b1g1State”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;B1G1&quot; || (intent == &quot;carouselIntent&quot; &amp;&amp; payload.carousel == &quot;b1g1&quot;)</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"create-transition-to-connect-from-faqstate-to-kartukreditstate-1\">Create transition to connect from faqState to kartuKreditState</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;carouselState&quot; to “discState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;Diskon&quot; || (intent == &quot;carouselIntent&quot; &amp;&amp; payload.carousel == &quot;diskon&quot;)</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h2 id=\"create-text-response\">Create Text Response</h2>\n<h3 id=\"objective-show-bot-response-in-the-text-to-end-users\">Objective: Show bot response in the text to end-users</h3>\n<h4 id=\"create-text\">Create text</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;locationState&quot;</p>\n</li>\n<li><p>Click <strong>&quot;+&quot;</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;locationText&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button and fill in with following fields:</p>\n</li>\n</ol>\n<pre><code>Lokasi bank ABC terdapat di Jalan Haji Nawi, Jakarta Selatan. Lihat peta: https://goo.gl/maps/eD2BGC6ZL7JpgBnU6</code></pre><ol start=\"8\">\n<li>Click Create Action</li>\n</ol>\n<h4 id=\"create-bot-action-command-to-trigger-next-state-to-be-executed-4\">Create bot action command to trigger next state to be executed</h4>\n<p>In this section, the bot will send the &quot;next&quot; command whenever this state is executed. The “next” command will be catched later into an intent for executing another state to confirm end-users whether they want to restart and show menu or end the conversation.</p>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Command&quot;</p>\n</li>\n<li><p>Input action name &quot;nextCommand&quot;</p>\n</li>\n<li><p>Fill in Command field with:</p>\n</li>\n</ol>\n<pre><code>next</code></pre><ol start=\"5\">\n<li><p>Click button Create Action</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-all-greetings-states-to-locationstate\">Objective: Connect all greetings states to locationState</h3>\n<h4 id=\"connect-greetings-via-direct-message-to-location-state\">Connect greetings via direct message to location state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;greetingState&quot; to “locationState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;3&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-mention-to-carousel-state-1\">Connect greetings via Instagram story mention to carousel state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igMentionedState&quot; to “locationState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;3&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-reply-to-carousel-state-1\">Connect greetings via Instagram story reply to carousel state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igStoryReplyState&quot; to “locationState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;3&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h2 id=\"create-handover-to-human-agent-flow\">Create Handover to Human Agent Flow</h2>\n<p>Handover to human agent path is required to be implemented in Instagram Messaging and we will use Handover API template.</p>\n<h3 id=\"objective-create-a-flow-that-end-user-can-request-handover-to-human-agents-by-using-handover-api\">Objective: Create a flow that end-user can request handover to human agents by using Handover API</h3>\n<h4 id=\"create-handover-state\">Create handover state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom right to create new state</p>\n</li>\n<li><p>Fill in the state name with &quot;handover&quot; and activate toggle “End state”</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-to-inform-end-user-that-the-handover-request-has-been-received-and-waiting-for-agents-to-reply\">Create bot response to inform end-user that the handover request has been received and waiting for agents to reply</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;waitForAgent&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Mohon menunggu, ya. Sedang kami hubungkan ke CS Bank ABC yang tersedia! 😊</code></pre><ol start=\"5\">\n<li>Click <strong>Create Action</strong></li>\n</ol>\n<h4 id=\"use-handover-api-to-send-handover-request-to-omnichat\">Use Handover API to send handover request to Omnichat</h4>\n<ol>\n<li><p>Create another action by clicking <strong>&quot;Add action&quot;</strong></p>\n</li>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create new action</p>\n</li>\n<li><p>Fill in action name with &quot;handover&quot;</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;API&quot;</p>\n</li>\n<li><p>Choose <strong>Handover API</strong></p>\n</li>\n<li><p>Click <strong>Create Action</strong> button</p>\n</li>\n<li><p>To finalize this step when creating a new state, click the <strong>Create</strong> button in the state drawer</p>\n</li>\n</ol>\n<h3 id=\"objective-connect-all-greetings-states-to-handoverstate\">Objective: Connect all greetings states to handoverState</h3>\n<h4 id=\"connect-greetings-via-direct-message-to-handover-state\">Connect greetings via direct message to handover state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;greetingState&quot; to “handoverState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;4&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-mention-to-handover-state\">Connect greetings via Instagram story mention to handover state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igMentionedState&quot; to “handoverState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;4&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-greetings-via-instagram-story-reply-to-handover-state\">Connect greetings via Instagram story reply to handover state</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;igStoryReplyState&quot; to “handoverState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;4&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h2 id=\"create-confirmation-state\">Create Confirmation State</h2>\n<h3 id=\"objective-create-a-state-that-end-user-will-be-asked-to-restart-for-showing-all-menu-or-end-conversation\">Objective: Create a state that end-user will be asked to restart for showing all menu or end conversation</h3>\n<h4 id=\"create-confirmstate\">Create &quot;confirmState&quot;</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom left to create new state</p>\n</li>\n<li><p>Fill in the state name with &quot;confirmState&quot;</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;,</strong> then click “+” to create new action</p>\n</li>\n<li><p>Choose Text, then fill in the action name with &quot;confirmText&quot;.</p>\n</li>\n<li><p>Next, click the <strong>&quot;Add Variant&quot;</strong> button and input the following text:</p>\n</li>\n</ol>\n<pre><code>Apakah ada yang ingin kamu tanyakan kembali? Pilih menu yang tersedia:\\n\\n1. Ketik &quot;1&quot; untuk melihat menu\\n2. Ketik “2” untuk menyelesaikan pembicaraan</code></pre><h4 id=\"set-the-state-into-self-transition-5\">Set the state into self-transition</h4>\n<p>The self-transition will make the actions under state will be repeatedly shown if end-users give an incorrect answer</p>\n<ol>\n<li><p>Go to tab <strong>Transitions</strong></p>\n</li>\n<li><p>Turn on on the Self Transition toggle</p>\n</li>\n<li><p>Then, click Create to finalize the state</p>\n</li>\n</ol>\n<h3 id=\"objective-create-an-intent-to-catch-command-for-executing-next-state\">Objective: Create an intent to catch command for executing next state</h3>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. The choice of &quot;Intent type&quot; is command, which means it will catch command only. On condition, it fills in with content with “next” which is a command that is sent from bot after executed responses such as quick replies, carousel, and text.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_8.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent to catch command for triggering next flow</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click Create to finalize</li>\n</ol>\n<h3 id=\"objective-connect-all-bot-responses-states-to-confirmstate\">Objective: Connect all bot responses states to confirmState</h3>\n<h4 id=\"connect-quick-replies-responses-states-to-confirmation-state\">Connect quick replies responses states to confirmation state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;rekeningBaruState&quot; to “confirmState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;nextIntent&quot;</code></pre><ol start=\"3\">\n<li><p>Click Save</p>\n</li>\n<li><p>Next, pull transition line which starts from &quot;kartuKreditState&quot; to “confirmState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;nextIntent&quot;</code></pre><ol start=\"6\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-carousel-responses-to-confirmation-state\">Connect carousel responses to confirmation state</h4>\n<ol>\n<li><p>Pull transition line which starts from &quot;b1g1State&quot; to “confirmState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;nextIntent&quot;</code></pre><ol start=\"3\">\n<li><p>Click Save</p>\n</li>\n<li><p>Next, pull transition line which start from &quot;discState&quot; to “confirmState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;nextIntent&quot;</code></pre><ol start=\"6\">\n<li>Click Save</li>\n</ol>\n<h4 id=\"connect-locationstate-to-confirmstate\">Connect &quot;locationState&quot; to “confirmState”</h4>\n<ol>\n<li><p>Pull transition line which start from &quot;locationState&quot; to “confirmState”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;nextIntent&quot;</code></pre><ol start=\"3\">\n<li>Click Save</li>\n</ol>\n<h3 id=\"objective-create-state-to-restart-menu\">Objective: Create state to restart menu</h3>\n<h4 id=\"create-a-backtomenu-state-to-restart-menu\">Create a &quot;backToMenu&quot; state to restart menu</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom left to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;backToMenu&quot;</p>\n</li>\n<li><p>Turn on toggle <strong>End State</strong></p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;,</strong> then click “+” to create a new action</p>\n</li>\n<li><p>Choose Command, then fill in the action name with &quot;backToMenu&quot;.</p>\n</li>\n<li><p>Next, fill in the Command with:</p>\n</li>\n</ol>\n<pre><code>toMenu</code></pre><ol start=\"7\">\n<li>Click Create to finalize</li>\n</ol>\n<h4 id=\"create-tomenuintent-intent\">Create &quot;toMenuIntent&quot; intent</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will trigger show main menu as bot response</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_9.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent to catch command for showing main menu again</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h4 id=\"update-transition-condition-from-init-to-greetingsstate\">Update transition condition from &quot;init&quot; to “greetingsState”</h4>\n<p>In this step, we will update transition condition and use toMenuIntent as one of the conditions. It is because this intent, if executed, will trigger a greeting response and showing the menu in bot.</p>\n<ol>\n<li><p>Click transition between &quot;init&quot; and “greetingState”</p>\n</li>\n<li><p>Edit drawer will be shown</p>\n</li>\n<li><p>Update condition field into this</p>\n</li>\n</ol>\n<pre><code>intent == &quot;greetingsIntent&quot; || intent == &quot;toMenuIntent&quot;</code></pre><ol start=\"4\">\n<li>Click Save to update</li>\n</ol>\n<h3 id=\"objective-create-state-to-end-conversation\">Objective: Create state to end conversation</h3>\n<h4 id=\"create-a-bye-state-to-end-conversation-and-show-thank-you-response\">Create a &quot;bye&quot; state to end conversation and show thank you response</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom left to create a new state</p>\n</li>\n<li><p>Fill in the state name with &quot;bye&quot;</p>\n</li>\n<li><p>Turn on toggle <strong>End State</strong></p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;,</strong> then click “+” to create a new action</p>\n</li>\n<li><p>Choose Text, then fill in the action name with &quot;bye&quot;.</p>\n</li>\n<li><p>Click <strong>Add Variant</strong> button</p>\n</li>\n<li><p>Next, fill in the Text with:</p>\n</li>\n</ol>\n<pre><code>Terima kasih sudah menghubungi Bank ABC 😊</code></pre><ol start=\"8\">\n<li>Click <strong>Create</strong> to finalize</li>\n</ol>\n<h3 id=\"objective-connect-transition-between-confirmstate-to-backtomenu-and-bye-state\">Objective: Connect transition between confirmState to backToMenu and bye state</h3>\n<ol>\n<li><p>Pull transition line which starts from &quot;confirmState&quot; to “backToMenu”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;1&quot;</code></pre><ol start=\"4\">\n<li><p>Click Save</p>\n</li>\n<li><p>Next, pull transition line which start from &quot;confirmState&quot; to “bye”</p>\n</li>\n<li><p>Fill in the <strong>Condition</strong> field:</p>\n</li>\n</ol>\n<pre><code>content == &quot;2&quot;</code></pre><ol start=\"7\">\n<li>Click Save</li>\n</ol>\n<h2 id=\"create-fallback-intent\">Create Fallback Intent</h2>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. We set up the intent into &quot;As Fallback&quot;, which means the intent will be executed as fallback. It becomes a new layer of fallback in Handover flow, before literally fallback-ed to fallback flow.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_10.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for being &quot;guard&quot; before fallback flow</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click Create to finalize</li>\n</ol>\n<h2 id=\"finalize-your-new-bot\">Finalize Your New Bot</h2>\n<h3 id=\"objective-publish-your-bot-to-save-the-chatbot-flow\">Objective: Publish your bot to save the chatbot flow</h3>\n<ol>\n<li><p>Click on the <strong>&quot;Publish&quot;</strong> button which is placed on top right corner</p>\n</li>\n<li><p>Fill in the <strong>changelog</strong>. You can input &quot;Initial version&quot; in the changelog</p>\n</li>\n<li><p>Click <strong>Publish</strong> to save the changelog. Lastly, your final chatbot flow will be like this:</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_11.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Final conversation flow</p>\n</blockquote>\n<h3 id=\"objective-testing-your-bot-in-emulator\">Objective: Testing your bot in emulator</h3>\n<ol>\n<li><p>On the bottom of your right screen, there is a small button named <strong>&quot;Test Chatbot&quot;.</strong> Click the <strong>button</strong> to start.</p>\n</li>\n<li><p>You can try to test your bot by inputting a message in the text bot. Say &quot;hi&quot; to your bot. If it succeeds, your bot will reply as follows</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_12.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Testing your bot by typing &quot;hai&quot;</p>\n</blockquote>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_13.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Testing another action response, this example is for text action</p>\n</blockquote>\n<ol start=\"3\">\n<li>If you want to <strong>restart</strong> the session, click refresh icon which is placed at the bottom</li>\n</ol>\n<h3 id=\"objective-deploy-your-bot\">Objective: Deploy your bot</h3>\n<h4 id=\"create-new-deployment\">Create new deployment</h4>\n<ol>\n<li><p>Go to the <strong>&quot;Deploy&quot;</strong> menu in the left sidebar</p>\n</li>\n<li><p>On this page, click on the <strong>&quot;New Deployment&quot;</strong> button which is placed in the top right corner. If you successfully clicked, it will show a create deployment drawer</p>\n</li>\n<li><p>Choose any deployment version you want to deploy and fill in the changelog. Or you can simply follow this screenshot</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_14.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment</li>\n</ol>\n<h4 id=\"create-a-new-environment-as-prerequisites-to-deploy-the-bot-to-channel\">Create a new environment as prerequisites to deploy the bot to channel</h4>\n<ol>\n<li>Go to the <strong>Environment</strong> menu which is placed under the current menu (&quot;Overview&quot;). If you successfully entered the Environment menu, you will see a page like this. These 3 environments represent that your chatbot will be tested in development or staging first before go live as in Production stage.</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_15.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Set up environment, then set up Omnichat channel</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>Click the <strong>Create Environment</strong> button in the Development environment and you will see a drawer to create a new environment</p>\n</li>\n<li><p>Choose the <strong>development version</strong> you want to (in this tutorial we will use the 1.0.0 version)</p>\n</li>\n<li><p>Fill in the <strong>environment URL</strong>. This environment URL will be useful if you use our CMS feature, <a href=\"https://docs.kata.ai/cms-studio/about/&#39;\">learn more about CMS</a>.</p>\n</li>\n<li><p>Click <strong>Create</strong> to finalize</p>\n</li>\n<li><p>You will notice the button is changed into the Create <strong>Channel</strong> button.</p>\n</li>\n</ol>\n<p>In this step, you will need an Omnichat <a href=\"https://kata-omnichat.kata.ai\" target=\"_blank\">https://omnichat.kata.ai</a> account and an Omnichat inbox to deploy the bot. Let’s get started!</p>\n<h2 id=\"create-inbox-in-omnichat\">Create Inbox in Omnichat</h2>\n<p>Follow these tutorials in Omnichat to continue:</p>\n<ol>\n<li><p>Register a new Omnichat account in Omnichat. Learn more about how to <a href=\"/kata-omnichat/general-setup/#self-onboarding\">register account in Omnichat</a></p>\n</li>\n<li><p>Create a new channel inbox. Learn more about <a href=\"/kata-omnichat/general-setup\">create inbox in Omnichat</a></p>\n<ol>\n<li><p>For IGDM chatbot: Section <strong>How to Set Up &gt; Connect to Instagram Messaging</strong></p>\n</li>\n<li><p>For WA chatbot: Section <strong>How to Set Up &gt; Connect to Whatsapp Messaging</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"create-agent-bot-in-omnichat\">Create Agent Bot in Omnichat</h2>\n<p>Follow the tutorial in Omnichat to continue. Continue to <a href=\"/kata-omnichat/setup-agent-bot\">create agent bot</a>.</p>\n<h3 id=\"connect-bot-to-omnichat\">Connect Bot to Omnichat</h3>\n<ol>\n<li>If you succeed to follow the above tutorials, you will see an access token generated in Omnichat that needs to be pasted into the Platform. The screenshot below</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_16.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create agent bot</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>Next, open the Kata Platform URL <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> and do login</p>\n</li>\n<li><p>Click your project that already had a chatbot and deployed</p>\n</li>\n<li><p>Then, go to the menu: Deploy &gt; Environment. You will see this screen.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_17.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Click button &quot;Create channel&quot; to continue copying access token from Omnichat</p>\n</blockquote>\n<ol start=\"5\">\n<li><p>Click Create Channel button to start to connect and you will see an empty channel table</p>\n</li>\n<li><p>Click &quot;+&quot; Create Channel” button in channel table list and drawer to set up the channel will be shown</p>\n</li>\n<li><p>Choose Omnichat in Channel Type</p>\n</li>\n<li><p>In the Access Token field, paste your access token that was generated from the Omnichat inbox.</p>\n</li>\n<li><p>Click Save to deploy your bot</p>\n</li>\n<li><p>Few steps to the final ✨ A created channel will generate a webhook URL. Copy the webhook URL in the Platform to Omnichat.</p>\n</li>\n</ol>\n<h3 id=\"finalize-agent-bot-in-omnichat\">Finalize Agent Bot in Omnichat</h3>\n<ol>\n<li><p>Go back to Omnichat <a href=\"https://kata-omnichat.kata.ai\" target=\"_blank\">https://omnichat.kata.ai</a> and do login</p>\n</li>\n<li><p>Go to menu: Settings &gt; Integrations &gt; Agent Bot. You will see this screen and information that you’re still in the first step to finalize</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_18.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Edit the agent bot to paste webhook URL from Kata Platform</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>Click &quot;Edit&quot; button in the agent bot configuration</p>\n</li>\n<li><p>A drawer will appear to fill in the Platform webhook URL. Paste your chatbot webhook URL</p>\n</li>\n<li><p>Click Update and you will be redirected to agent bot list</p>\n</li>\n<li><p>Lastly, turn on the toggle in Activate Agent Bot. Your chatbot is already connected to the Omnichat inbox and ready to use!</p>\n</li>\n</ol>\n<h2 id=\"update-instagram-bot-to-use-ice-breaker\">Update Instagram Bot to Use Ice Breaker</h2>\n<p>Ice Breaker is useful for first-time users can understand the available menu or topics in your Instagram bot. To use Ice Breaker, we need to create an Instagram inbox as a prerequisite. Learn more about <a href=\"/channels/instagram-messaging/#sending-ice-breaker-reply\">Ice Breaker</a>.</p>\n<p>Also, you need to successfully finish the Instagram bot until connect to agent bot Omnichat. Go back to the first step.</p>\n<p>Before we jump to the tutorial, here is the general conversation flow for using Ice Breaker.</p>\n<table>\n<thead>\n<tr>\n<th>Scenario Flow</th>\n<th>Details <br /> (Each row represents 1 bubble message)</th>\n<th>Component Details</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>First time end-users chat the brand&#39;s Instagram DM, then it will show Ice Breaker. Learn more about Ice Breaker). It will not show when using Instagram Story Mention or Instagram Story Reply.</td>\n<td>Show ice breaker<br/>FAQ<br />Promo <br />Lokasi <br />Berbicara dengan CS</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"objective-create-ice-breaker-in-your-instagram-inbox\">Objective: Create Ice Breaker in your Instagram inbox</h3>\n<p>Follow the tutorial on <a href=\"/kata-omnichat/how-to-use/#inbox-management\">how to set up Ice Breaker in Instagram Inbox</a>.</p>\n<h3 id=\"objective-create-intent-to-trigger-bot-response-if-end-users-click-all-ice-breaker\">Objective: Create intent to trigger bot response if end-users click all Ice Breaker</h3>\n<h4 id=\"create-intent-for-faq-menu\">Create intent for FAQ menu</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will trigger the FAQ state to show FAQ response when end-user click &quot;FAQ&quot; in Ice Breaker feature</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_19.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Edit the agent bot to paste webhook URL from Kata Platform</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h4 id=\"create-intent-for-promo-menu\">Create intent for Promo menu</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will trigger the promo state to show promo response when end-user click &quot;Promo&quot; in Ice Breaker feature</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_20.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for triggering Promo state when user click Ice Breaker with Promo item</p>\n</blockquote>\n<ol start=\"5\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h4 id=\"create-intent-for-lokasi-menu\">Create intent for &quot;Lokasi&quot; menu</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will trigger the location state to show location response when end-user click &quot;Lokasi`&quot; in Ice Breaker feature</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_21.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for triggering Lokasi state when user click Ice Breaker with Location item</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h4 id=\"create-intent-for-berbicara-dengan-cs-menu\">Create intent for &quot;Berbicara dengan CS&quot; menu</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will trigger the handover state to handover end-user to human agent when end-user click &quot;Berbicara dengan CS&quot; in Ice Breaker feature</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/ig-handover/image_22.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for triggering CS state item</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h3 id=\"objective-create-transition-for-mapping-bot-responses-after-end-users-clicked-the-ice-breaker\">Objective: Create transition for mapping bot responses after end-users clicked the Ice Breaker</h3>\n<h4 id=\"connect-init-to-faqstate-to-trigger-faq-response-after-end-users-clicked-faq-in-ice-breaker\">Connect &quot;init&quot; to “faqState” to trigger FAQ response after end-users clicked “FAQ” in Ice Breaker</h4>\n<ol>\n<li><p>Pull transition line from &quot;init&quot; to “faqState”.</p>\n</li>\n<li><p>Create transition drawer will show.</p>\n</li>\n<li><p>Fill in condition as follow:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;faqIceBreaker&quot;</code></pre><ol start=\"4\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-init-to-carouselstate-to-trigger-generic-template-carousel-response-after-end-users-clicked-promo-in-ice-breaker\">Connect &quot;init&quot; to “carouselState” to trigger generic template (“carousel”) response after end-users clicked “Promo” in Ice Breaker</h4>\n<ol>\n<li><p>Pull transition line from &quot;init&quot; to “carouselState”.</p>\n</li>\n<li><p>Create transition drawer will show.</p>\n</li>\n<li><p>Fill in condition as follow:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;promoIceBreaker&quot;</code></pre><ol start=\"4\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-init-to-carouselstate-to-trigger-text-response-after-end-users-clicked-lokasi-in-ice-breaker\">Connect &quot;init&quot; to “carouselState” to trigger text response after end-users clicked “Lokasi” in Ice Breaker</h4>\n<ol>\n<li><p>Pull transition line from &quot;init&quot; to “locationState”.</p>\n</li>\n<li><p>Create transition drawer will show.</p>\n</li>\n<li><p>Fill in condition as follow:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;locationIceBreaker&quot;</code></pre><ol start=\"4\">\n<li>Click Create</li>\n</ol>\n<h4 id=\"connect-init-to-handoverstate-to-trigger-handover-to-human-agents-after-end-users-clicked-berbicara-dengan-cs-in-ice-breaker\">Connect &quot;init&quot; to “handoverState” to trigger handover to human agents after end-users clicked “Berbicara dengan CS” in Ice Breaker</h4>\n<ol>\n<li><p>Pull transition line from &quot;init&quot; to “handoverState”.</p>\n</li>\n<li><p>Create transition drawer will show.</p>\n</li>\n<li><p>Fill in condition as follow:</p>\n</li>\n</ol>\n<pre><code>intent == &quot;csIceBreaker&quot;</code></pre><ol start=\"4\">\n<li>Click Create</li>\n</ol>\n<h3 id=\"objective-publish-updated-bot-and-deploy-to-omnichat-again\">Objective: Publish updated bot and deploy to Omnichat again</h3>\n<p>Follow the tutorial to <a href=\"/tutorial/create-igdm-bot-handover-from-chatbot-to-agent/#finalize-your-new-bot\">finalize your bot</a>.</p>\n<h2 id=\"final-demo\">Final Demo</h2>\n<p>We provide video tutorials and interaction demo for Instagram chatbot features. Check these out:</p>\n<ul>\n<li>Create Instagram bot handover video tutorial</li>\n</ul>\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/dAHnoTX4BUE\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n\n<ul>\n<li><p>Ice Breaker interaction with end-users</p>\n</li>\n<li><p>Instagram Story Mention interaction with end-users</p>\n</li>\n<li><p>Instagram Story Reply interaction with end-users</p>\n</li>\n<li><p>Agent bot interaction with end-users</p>\n</li>\n<li><p>Handover to the human agent and hand-off to bot again</p>\n</li>\n<li><p>Takeover conversation between bot and end-user</p>\n</li>\n</ul>\n",
      "layout": "tutorial",
      "title": "Create Instagram Bot Handover from Chatbot to Agent Tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "prev": "integration-chatbot-with-cms-studio",
      "next": "create-simple-bot-handover-from-chatbot-to-agent",
      "date": "2018-10-10T07:00:00+07:00",
      "excerpt": "<p>Kata Platform <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> is a platform to create chatbots and train them with Natural Language Processing (NLP). You can create any chatbots for any use-cases, such as FAQ, campaign, customer service, handover to human agents, and more.</p>",
      "meta": {
        "relativePath": "create-igdm-bot-handover-from-chatbot-to-agent.html",
        "createdAt": "2022-02-03T01:15:47.439Z",
        "lastModified": "2022-02-03T01:15:47.439Z",
        "size": 46032,
        "formattedSize": "45.0 KB"
      }
    },
    {
      "id": "create-simple-bot-handover-from-chatbot-to-agent",
      "contents": "<p>Kata Platform (<a href=\"www.platform.kata.ai\">platform.kata.ai</a>) is a platform to create chatbots and train them with Natural Language Processing (NLP). You can create any chatbots for any use-cases, such as FAQ, campaign, customer service, handover to human agents, and more.</p>\n<p>In this tutorial, we will create a chatbot that is able to handoff conversations to human agents, also known as &quot;Agent Handover&#39;&#39;. We will use the Kata Omnichat dashboard to connect chatbots with human agents. Check this <a href=\"/kata-omnichat\">documentation</a> for Kata Omnichat explanation.</p>\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/dAHnoTX4BUE\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n\n<h2 id=\"simple-chatbot-flow\">Simple Chatbot Flow</h2>\n<p>Before we jump into the tutorial, let’s see the scenario for the conversation. We will create a chatbot using <em>keywords</em> which when customers enter &quot;1&quot; to end the conversation or “2” to do the handover.</p>\n<h3 id=\"conversation-flow-table\">Conversation Flow Table</h3>\n<table>\n<thead>\n<tr>\n<th>Scenario Flow</th>\n<th>Details <br />(Each row represents 1 bubble message)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Greetings</td>\n<td>Halo, selamat datang di layanan CS Bank ABC 😊 <br /><br />Apakah ingin dihubungkan ke CS Bank ABC yang sedang available? <br /><br />Ya -- lanjut<br />Tidak -- end session<br /><br />💡 Cukup ketik angka pilihannya, ya</td>\n</tr>\n<tr>\n<td>End conversation if customer typing &quot;2&quot;</td>\n<td>Terima kasih sudah menghubungi Bank ABC 😊</td>\n</tr>\n<tr>\n<td>Customer typing “1” and chatbot request handover to agent</td>\n<td>Mohon menunggu, ya. Sedang kami hubungkan ke CS Bank ABC yang tersedia! 😊</td>\n</tr>\n<tr>\n<td>End session after handover done</td>\n<td>Terima kasih sudah menghubungi Bank ABC 😊</td>\n</tr>\n</tbody></table>\n<h2 id=\"create-project\">Create Project</h2>\n<h3 id=\"objective-register-your-new-account-and-login-to-the-platform\">Objective: Register your new account and login to the Platform</h3>\n<ol>\n<li><p>Go to <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> and click <strong>Sign Up</strong> to create new account</p>\n</li>\n<li><p>Input required fields in sign up page: <strong>Username, email address, role and captcha</strong></p>\n</li>\n<li><p>Go to your registered email’s inbox. You will receive an email to verify your account and input your password</p>\n</li>\n<li><p>When you click the <strong>Confirm Email</strong> button in the verification email, you will be redirected to setup password. Insert your password and confirm the password.</p>\n</li>\n<li><p>You will be redirected to the Login <strong>Page</strong>. Input your username and password to continue.</p>\n</li>\n</ol>\n<h3 id=\"objective-create-new-chatbot-project\">Objective: Create new chatbot project</h3>\n<h4 id=\"login-to-kata-platform-and-create-project\">Login to Kata Platform and create project</h4>\n<ol>\n<li><p>Open your browser, then open the URL <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a> and enter your username &amp; password.</p>\n</li>\n<li><p>Click <strong>&quot;Login&quot;</strong> to continue.</p>\n</li>\n<li><p>Click on <strong>&quot;Create Project&quot;</strong> and fill in the form. Each project contains one bot design, one NL, and one CMS.</p>\n</li>\n</ol>\n<h1 id=\"create-greetings-flow\">Create Greetings Flow</h1>\n<h3 id=\"objective-define-a-flow\">Objective: Define a flow</h3>\n<h4 id=\"create-a-flow-name-handover-we-will-use-1-flow-for-this-simple-bot\">Create a flow name &quot;Handover&quot;. We will use 1 flow for this simple bot</h4>\n<ol>\n<li><p>Click <strong>&quot;Create Flow&quot;</strong> button in current screen</p>\n</li>\n<li><p>Create flow &quot;Handover&quot;, other fields are left blank. Then, click <strong>Create</strong>.</p>\n</li>\n</ol>\n<h3 id=\"objective-create-greetings-state-to-define-how-to-respond\">Objective: Create greetings state to define how to respond</h3>\n<h4 id=\"create-init-state\">Create &quot;init&quot; state</h4>\n<ol>\n<li><p>Click &quot;+&quot; icon in bottom right to create new state</p>\n</li>\n<li><p>Create state &quot;init&quot; and click toggle to turn on “Initial State” and other fields are left blank. Then, click Create.</p>\n</li>\n</ol>\n<h4 id=\"create-greetings-as-bot-response-to-show-keywords-menu\">Create &quot;greetings&quot; as bot response to show keywords menu</h4>\n<ol>\n<li><p>Create another state by clicking the <strong>&quot;+&quot;</strong> icon in the bottom right to create a new state named “greetings”</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;</strong>, then click <strong>“+”</strong> in the action box to create a new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;greetings&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Halo, selamat datang di layanan CS Bank ABC 😊\\n\\n Apakah ingin dihubungkan ke CS Bank ABC yang sedang available?\\n\\n1. Ya\\n2. Tidak\\n\\n💡 Cukup ketik angka pilihannya, ya</code></pre><ol start=\"6\">\n<li><p>Click <strong>Create Action</strong></p>\n</li>\n<li><p>To finalize the state creation, click <strong>Create</strong> in state drawer</p>\n</li>\n</ol>\n<h3 id=\"objective-catch-end-users-message-when-greet-the-bot\">Objective: Catch end-user’s message when greet the bot</h3>\n<h4 id=\"create-greetings-keywords-to-build-understanding-in-chatbots-when-end-users-greet-the-bot-we-will-use-the-nlus-feature-to-create-the-keywords\">Create &quot;greetings&quot; keywords to build understanding in chatbots when end-user’s greet the bot. We will use the NLUs feature to create the keywords.</h4>\n<ol>\n<li><p>Go to the menu <strong>&quot;NLUs&quot;</strong> which is placed under the “Conversation Flows” menu. Your screen will be switched to create NLUs</p>\n</li>\n<li><p>Click <strong>Create NLU</strong></p>\n</li>\n<li><p>Then, fill in the fields as follow</p>\n</li>\n</ol>\n<pre><code>NLU Name: greetings\nNLU Type: Keyword</code></pre><ol start=\"4\">\n<li>Next, click <strong>&quot;Add Keyword&quot;</strong> to define any words to trigger the bot. Fill in the main keyword as follow</li>\n</ol>\n<pre><code>Main keyword: hi</code></pre><ol start=\"5\">\n<li>Add a new word by pressing &quot;enter&quot; on your keyboard. Every time you write a new word, press “enter” on your keyboard to save the word. Add these words</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_1.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Add more keywords for greetings</p>\n</blockquote>\n<ol start=\"6\">\n<li>Click <strong>&quot;Create&quot;</strong> to save the NLUs</li>\n</ol>\n<h4 id=\"create-greetings-intent-to-catch-users-input\">Create &quot;greetings&quot; intent to catch user’s input</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. The choice of &quot;Intent type&quot; is text, which means it will catch incoming messages with text only. On classifier, use “greetings” NLUs that we’ve created in previous step to connect the intent with create keywords for greetings</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_2.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent and create mapping with greetings keyword</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h3 id=\"objective-connect-init-and-greetings-states-by-creating-a-transition\">Objective: Connect &quot;init&quot; and “greetings” states by creating a transition</h3>\n<h4 id=\"create-a-transition-to-connect-init-and-_greetings_-states-the-transition-will-define-in-which-condition-the-greetings-state-including-the-actions-state-will-be-executed\">Create a transition to connect &quot;<em>init</em>&quot; and “_greetings_” states. The transition will define in which condition the greetings state, including the actions’ state, will be executed.</h4>\n<ol>\n<li><p>Pull a line from the &quot;init&quot; state and drag it to the “greetings” state. If you succeed, then it will show a <strong>Create Transition</strong> drawer</p>\n</li>\n<li><p>Fill in the transition as follow</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_3.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create transition</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>&quot;Create Transition&quot;</strong></li>\n</ol>\n<h2 id=\"catch-end-users-typing-when-choosing-menu\">Catch End-user’s Typing when Choosing Menu</h2>\n<h3 id=\"objective-catch-end-users-message-when-choosing-menu-by-typing-1-or-2\">Objective: Catch end-user’s message when choosing menu by typing &quot;1&quot; or “2”</h3>\n<h4 id=\"create-menu-keywords\">Create &quot;menu&quot; keywords</h4>\n<ol>\n<li><p>Go to the menu <strong>&quot;NLUs&quot;</strong> which is placed under the “Conversation Flows” menu. Your screen will be switched to create NLUs</p>\n</li>\n<li><p>Click <strong>Create NLU</strong></p>\n</li>\n<li><p>Then, fill in the fields as follow</p>\n</li>\n</ol>\n<pre><code>NLU Name: menu\nNLU Type: Keyword</code></pre><ol start=\"4\">\n<li>Next, click <strong>&quot;Add Keyword&quot;</strong> to define any words to trigger the bot. Fill in the main keyword as follow</li>\n</ol>\n<pre><code>Main keyword: satu</code></pre><ol start=\"5\">\n<li>Add a new word by pressing &quot;enter&quot; on your keyboard. Every time you write a new word, press “enter” on your keyboard to save the word. Add these words. “satu” and “dua” as the main keywords mean they define what your end-users will be inputted when choose menu</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_4.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create keywords to identify input from chatbot users when choosing menu</p>\n</blockquote>\n<ol start=\"6\">\n<li>Click <strong>&quot;Create&quot;</strong> to save the NLUs</li>\n</ol>\n<h4 id=\"create-an-intent-menu-to-catch-the-end-users-input\">Create an intent &quot;menu&quot; to catch the end-user&#39;s input</h4>\n<ol>\n<li><p>Click the Intent tab which is placed next to the Conversation Flows sidebar.</p>\n</li>\n<li><p>Click <strong>Create Intent</strong> button</p>\n</li>\n<li><p>Fill in the intent as follows. This intent will catch the end-user&#39;s input after typing &quot;1&quot; or “2”. Adding a classifier with “menu” to define this intent will be executed whenever a sentence has the “menu” keyword. Add attributes and choose NLU “menu”, because we have 2 main keywords that need to be understood by the intent to execute the handover path or end conversation path.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_5.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create intent for showing main menu and mapping from created keywords</p>\n</blockquote>\n<ol start=\"4\">\n<li>Then, click <strong>Create</strong>.</li>\n</ol>\n<h2 id=\"create-handover-to-human-agent-flow\">Create Handover to Human Agent Flow</h2>\n<h3 id=\"objective-create-a-flow-that-end-user-can-request-handover-to-human-agents-by-using-handover-api\">Objective: Create a flow that end-user can request handover to human agents by using Handover API</h3>\n<h4 id=\"create-handover-state\">Create handover state</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom right to create new state</p>\n</li>\n<li><p>Fill in the state name with &quot;handover&quot; and activate toggle “End state”</p>\n</li>\n</ol>\n<h4 id=\"create-bot-response-to-inform-end-user-that-the-handover-request-has-been-received-and-waiting-for-agents-to-reply\">Create bot response to inform end-user that the handover request has been received and waiting for agents to reply</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create new action</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;Text&quot;</p>\n</li>\n<li><p>Input action name &quot;waitForAgent&quot;</p>\n</li>\n<li><p>Next, click the <strong>Add Variant</strong> button to fill in with this text:</p>\n</li>\n</ol>\n<pre><code>Mohon menunggu, ya. Sedang kami hubungkan ke CS Bank ABC yang tersedia! 😊</code></pre><ol start=\"5\">\n<li>Click <strong>Create Action</strong></li>\n</ol>\n<h4 id=\"use-handover-api-to-send-handover-request-to-omnichat\">Use Handover API to send handover request to Omnichat</h4>\n<ol>\n<li><p>Create another action by clicking <strong>&quot;Add action&quot;</strong></p>\n</li>\n<li><p>Click <strong>&quot;+&quot;</strong> in action box to create new action</p>\n</li>\n<li><p>Fill in action name with &quot;handover&quot;</p>\n</li>\n<li><p>When all actions available are shown, then choose &quot;API&quot;</p>\n</li>\n<li><p>Choose <strong>Handover API</strong></p>\n</li>\n<li><p>Click <strong>Create Action</strong> button</p>\n</li>\n<li><p>To finalize this step when creating a new state, click the <strong>Create</strong> button in the state drawer</p>\n</li>\n</ol>\n<h4 id=\"create-a-transition-to-connect-greetings-and-handover-states\">Create a transition to connect &quot;greetings&quot; and “handover” states</h4>\n<ol>\n<li><p>Pull a line from the &quot;greetings&quot; state and drag it to the “handover” state. If you succeed, then it will show a <strong>Create Transitio</strong>n drawer</p>\n</li>\n<li><p>Fill in the transition as follows. This condition means if the end-user&#39;s keyword is identified as &quot;menu&quot; <em>and</em> they are typing “1”, then it will show the “handover” state including the actions’ state.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_6.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create transition and mapping if chatbot users choose &quot;1&quot;, then execute handover state</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>Create</strong></li>\n</ol>\n<h2 id=\"create-end-conversation-flow\">Create End Conversation Flow</h2>\n<h3 id=\"objective-create-a-flow-that-end-user-doesnt-want-to-handover-to-agent-and-end-the-conversation\">Objective: Create a flow that end-user doesn’t want to handover to agent and end the conversation</h3>\n<h4 id=\"create-end-state-to-cancel-handover-agent-and-finish-the-conversation\">Create &quot;end&quot; state to cancel handover agent and finish the conversation</h4>\n<ol>\n<li><p>Click <strong>&quot;+&quot;</strong> icon in bottom left to create new state</p>\n</li>\n<li><p>Fill in the state name with &quot;end&quot; and click toggle “End state” to set the state as the end of the flow.</p>\n</li>\n<li><p>Click <strong>&quot;Add action&quot;,</strong> then click “+” to create new action</p>\n</li>\n<li><p>Choose Text, then fill in the action name with &quot;end&quot;.</p>\n</li>\n<li><p>Next, click the <strong>&quot;Add Variant&quot;</strong> button and input the following text:</p>\n</li>\n</ol>\n<pre><code>Terima kasih sudah menghubungi Bank ABC 😊</code></pre><ol start=\"6\">\n<li>Click <strong>Create</strong> to finalize</li>\n</ol>\n<h4 id=\"create-a-transition-to-connect-greetings-and-end-states\">Create a transition to connect &quot;greetings&quot; and “end” states</h4>\n<ol>\n<li><p>Pull a line from the &quot;greetings&quot; state and drag it to the “end” state. If you succeed, then it will show a Create Transition drawer</p>\n</li>\n<li><p>Fill in the transition as follows. This condition means if the end-user&#39;s keyword is identified as &quot;menu&quot; <em>and</em> they are typing “2”, then it will execute the “end” state</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_7.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create transition and mapping if chatbot users choose &quot;2&quot;, then execute end conversation</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>Create</strong></li>\n</ol>\n<h2 id=\"finalize-your-new-bot\">Finalize Your New Bot</h2>\n<h3 id=\"objective-publish-your-bot-to-save-the-chatbot-flow\">Objective: Publish your bot to save the chatbot flow</h3>\n<ol>\n<li><p>Click on the <strong>&quot;Publish&quot;</strong> button which is placed on top right corner</p>\n</li>\n<li><p>Fill in the <strong>change log</strong>. You can input &quot;Initial version&quot; in the change log</p>\n</li>\n<li><p>Click <strong>Publish</strong> to save the change log. Lastly, your final chatbot flow will be like this:</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_8.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Final conversation flow</p>\n</blockquote>\n<h3 id=\"objective-testing-your-bot-in-emulator\">Objective: Testing your bot in emulator</h3>\n<ol>\n<li><p>On the bottom of your right screen, there is a small button named <strong>&quot;Test NLU&quot;.</strong> Click the <strong>button</strong> to start.</p>\n</li>\n<li><p>You can try to test your bot by inputting a message in the text bot. Say &quot;hi&quot; to your bot. If it succeeds, your bot will reply as follows</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_9.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Testing your bot in emulator by typing &quot;hi&quot;</p>\n</blockquote>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_10.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Testing bot by typing &quot;1&quot; or &quot;2&quot;</p>\n</blockquote>\n<ol start=\"3\">\n<li>If you want to <strong>restart</strong> the session, click refresh icon which is placed at the bottom</li>\n</ol>\n<h3 id=\"objective-deploy-your-bot\">Objective: Deploy your bot</h3>\n<h4 id=\"create-new-deployment\">Create new deployment</h4>\n<ol>\n<li><p>Go to the <strong>&quot;Deploy&quot;</strong> menu in the left sidebar</p>\n</li>\n<li><p>In this page, click on the <strong>&quot;New Deployment&quot;</strong> button which is placed in the top right corner. If you successfully clicked, it will show a create deployment drawer</p>\n</li>\n<li><p>Choose any deployment version you want to deploy and fill in the change log. Or you can simply follow this screenshot</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_11.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment</li>\n</ol>\n<h4 id=\"create-new-environment-as-prerequisites-to-deploy-the-bot-to-channel\">Create new environment as prerequisites to deploy the bot to channel</h4>\n<ol>\n<li>Go to the <strong>Environment</strong> menu which is placed under the current menu (&quot;Overview&quot;). If you successfully entered the Environment menu, you will see a page like this. These 3 environments represent that your chatbot will be tested in development or staging first, before go live as in Production stage</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_12.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Set up environment</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>Click the <strong>Create Environment</strong> button in the Development environment and you will see a drawer to create new environment</p>\n</li>\n<li><p>Choose the <strong>development version</strong> you want to (in this tutorial we will use the 1.0.0 version)</p>\n</li>\n<li><p>Fill in the <strong>environment URL</strong>. This environment URL will be useful if you use our CMS feature, <a href=\"https://docs.kata.ai/cms-studio/about/&#39;\">learn more about CMS</a>.</p>\n</li>\n<li><p>Click <strong>Create</strong> to finalize</p>\n</li>\n<li><p>You will notice the button is changed into the Create <strong>Channel</strong> button.</p>\n</li>\n</ol>\n<p>In this step, you will need an Omnichat <a href=\"https://kata-omnichat.kata.ai\" target=\"_blank\">https://omnichat.kata.ai</a> account and Omnichat inbox to deploy the bot. Let’s get started!</p>\n<h2 id=\"create-inbox-in-omnichat\">Create Inbox in Omnichat</h2>\n<p>Follow these tutorials in Omnichat to continue:</p>\n<ol>\n<li><p>Register a new Omnichat account in Omnichat. Section <strong>How to Set Up</strong></p>\n</li>\n<li><p>Create a new channel inbox.</p>\n<ul>\n<li><p>For IGDM chatbot: Section <strong>How to Set Up &gt; Connect to Instagram Messaging</strong></p>\n</li>\n<li><p>For WA chatbot: Section <strong>How to Set Up &gt; Connect to Whatsapp Messaging</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"create-agent-bot-in-omnichat\">Create Agent Bot in Omnichat</h2>\n<p>Follow the tutorial below in Omnichat to continue: Section <strong>How to Set Up Agent Bot</strong></p>\n<h2 id=\"connect-bot-to-omnichat\">Connect Bot to Omnichat</h2>\n<ol>\n<li>If you succeed to follow the above tutorials, you will see an access token generated in Omnichat that needs to be pasted into the Platform. The screenshot below</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_13.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Create new agent bot</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>Next, open the Kata Platform URL <a href=\"https://platform.kata.ai\" target=\"_blank\">https://platform.kata.ai</a> and do login</p>\n</li>\n<li><p>Click your project that already had a chatbot and deployed</p>\n</li>\n<li><p>Then, go to the menu: Deploy &gt; Environment. You will see this screen.</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_14.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Set up channel again to paste access token from Omnichat</p>\n</blockquote>\n<ol start=\"5\">\n<li><p>Click Create Channel button to start connect and you will see an empty channel table</p>\n</li>\n<li><p>Click &quot;+ Create Channel&quot; button in channel table list and drawer to set up the channel will be shown</p>\n</li>\n<li><p>Choose Omnichat in Channel Type</p>\n</li>\n<li><p>In the Access Token field, paste your access token that was generated from the Omnichat inbox.</p>\n</li>\n<li><p>Click Save to deploy your bot</p>\n</li>\n<li><p>Few steps to the final ✨ A created channel will generate a webhook URL. Copy the webhook URL in the Platform to Omnichat.</p>\n</li>\n</ol>\n<h2 id=\"finalize-agent-bot-in-omnichat\">Finalize Agent Bot in Omnichat</h2>\n<ol>\n<li><p>Go back to Omnichat <a href=\"https://kata-omnichat.kata.ai\" target=\"_blank\">https://omnichat.kata.ai</a> and do login</p>\n</li>\n<li><p>Go to menu: Settings &gt; Integrations &gt; Agent Bot. You will see this screen and information that you’re still in first step to finalize</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_15.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Edit agent bot to paste webhook URL from Platform</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>Click &quot;Edit&quot; button in the agent bot configuration</p>\n</li>\n<li><p>A drawer will appear to fill in the Platform webhook URL. Paste your chatbot webhook URL</p>\n</li>\n<li><p>Click Update and you will be redirected to agent bot list</p>\n</li>\n<li><p>Lastly, turn on the toggle in Activate Agent Bot. Your chatbot is already connected to the Omnichat inbox and ready to use!</p>\n</li>\n</ol>\n<p><img src=\"/assets/images/tutorial/simple-handover/image_16.png\" alt=\"image alt text\"></p>\n<blockquote>\n<p>Activate agent bot and final step</p>\n</blockquote>\n<h2 id=\"final-demo\">Final Demo</h2>\n<p>We provide video tutorials and interaction demos for agent bot Omnichat features. Check these out:</p>\n<ul>\n<li>Create simple bot handover video tutorial</li>\n</ul>\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/pbqou7Wr4Tc\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n\n<ul>\n<li>Chatbot interaction with end-user and handover to human agent</li>\n</ul>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-simple-handover.png",
      "title": "Create Simple Bot Handover from Chatbot to Agent Tutorial",
      "product": "kata-platform",
      "prev": "create-igdm-bot-handover-from-chatbot-to-agent",
      "date": "2018-11-11T07:00:00+07:00",
      "excerpt": "<p>Kata Platform (<a href=\"www.platform.kata.ai\">platform.kata.ai</a>) is a platform to create chatbots and train them with Natural Language Processing (NLP). You can create any chatbots for any use-cases, such as FAQ, campaign, customer service, handover to human agents, and more.</p>",
      "meta": {
        "relativePath": "create-simple-bot-handover-from-chatbot-to-agent.html",
        "createdAt": "2022-02-03T01:15:52.488Z",
        "lastModified": "2022-02-03T01:15:52.488Z",
        "size": 18562,
        "formattedSize": "18.1 KB"
      }
    },
    {
      "id": "hello-world",
      "contents": "<h2 id=\"create-a-project\">Create a Project</h2>\n<p>First login/sign up to <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a></p>\n<p>And click on “Create Project” and fill in the form. Each project contains one bot design, one NL, and one CMS.\nYou will be directed to this page.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw1.png\" alt=\"bhw-1\"></p>\n<h3 id=\"noted\">Noted</h3>\n<p>You can try bot in Menu Test Chatbot (in the bottom right corner).</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw1test.png\" alt=\"bhw-1test\"></p>\n<h2 id=\"create-a-hello-flow\">Create a Hello Flow</h2>\n<h3 id=\"create-flow\">Create Flow</h3>\n<p>You may find a flow that is created automatically by the system or default flow. We will add a new flow called <code>helloFlow</code>. Set flow to active, and persistent.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw2.png\" alt=\"bhw-2\"></p>\n<p>It will be shown like this.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw3.png\" alt=\"bhw-3\"></p>\n<h3 id=\"create-keyword-nlu-for-helloflow\">Create keyword NLU for helloFlow</h3>\n<p>In this step, we will define the NLU (Natural Language Understanding) to trigger order flow. NLU is used to translate user inputs into data that machine can understand. There are many types of NLU, but the type that we will use in this particular flow is called keyword. To define the NLU, go to NLUs menu and create.</p>\n<p>We will name it hello_NLU</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw4.png\" alt=\"bhw-4\"></p>\n<p>It will be shown like this.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw5.png\" alt=\"bhw-5\"></p>\n<h3 id=\"create-intent\">Create Intent</h3>\n<p>Go back to Conversation flow menu and choose intent. Click on “+” button in Conversation Flow menu. Set the Intent name to <code>helloIntent</code> and choose option as initial.\nAdd a classifier and choose NLU that we create. We are gonna match it with <code>helloWorld</code> (keyword in NLU).</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw6.png\" alt=\"bhw-6\">\n<img src=\"/assets/images/tutorial/bot-hw/bot-hw7.png\" alt=\"bhw-7\"></p>\n<h2 id=\"create-action-for-showing-hello-world\">Create action for showing Hello World</h2>\n<h3 id=\"create-state\">Create State</h3>\n<p>Choose a states and click on &quot;+&quot; button. We will create a initial state. Set name to <code>init</code> and choose Initial State, and click create.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw8.png\" alt=\"bhw-8\"></p>\n<p>We will create another state for showing the response in our bot. Choose action to text.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw9.png\" alt=\"bhw-9\"></p>\n<p>Add text response to Hello World!.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw10.png\" alt=\"bhw-10\"></p>\n<p>Action should be shown like this.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw11.png\" alt=\"bhw-11\"></p>\n<h3 id=\"create-transation\">Create Transation</h3>\n<p>Now, we will create a transition between two states that we have created before.</p>\n<p>Click the green dot on <code>init</code> state, and a connector line will appear. Connect that line to <code>hello</code> state. If you do it right, a Create Transition form will appear.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw12.png\" alt=\"bhw-12\"></p>\n<p>Set the condition to <code>intent==&#39;helloIntent&#39;</code> and click Create.</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw13.png\" alt=\"bhw-13\"></p>\n<h2 id=\"testing\">Testing</h2>\n<p>Before this step don&#39;t forget to <strong>Publish</strong> your change. And then try your bot in Test Chatbot menu. Try to enter keyword that you define in NLU.</p>\n<p>Viola! You have succeed build your first bot!</p>\n<p><img src=\"/assets/images/tutorial/bot-hw/bot-hw14.png\" alt=\"bhw-14\"></p>\n",
      "layout": "tutorial",
      "title": "Creating a Simple Hello World Chatbot",
      "imgSpot": "/assets/images/tutorial/spot-hello-world.png",
      "product": "kata-platform",
      "description": "This is a quick start how to build a 'Hello World' chatbot",
      "next": "bot-studio-tutorial",
      "date": "2018-06-06T07:00:00+07:00",
      "excerpt": "<p>First login/sign up to <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a></p>",
      "meta": {
        "relativePath": "hello-world.html",
        "createdAt": "2022-02-03T01:15:55.265Z",
        "lastModified": "2022-02-03T01:15:55.265Z",
        "size": 3427,
        "formattedSize": "3.3 KB"
      }
    },
    {
      "id": "how-to-deploy-your-chatbot-to-line",
      "contents": "<p>LINE is a free messaging platform and is famous in Indonesia. This messaging platform supports various interactive action types such as carousel, button, Image Map, and many more.</p>\n<p>This tutorial will learn how to deploy your chatbot to LINE. Let’s start.</p>\n<h2 id=\"create-a-deployment\">Create a deployment</h2>\n<p>Deployment is a step to merge all Revisions in Flow, NLU, and CMS so that you can integrate bots into the channel. Before starting channel integration, chatbots must at least have 1 deployment.</p>\n<ol>\n<li><p>In the sidebar, choose the <strong>Deploy</strong> menu. Then, select <strong>Overview</strong>.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/jWZ50Wh_tm65KKeUExFScsNX8jwWBZ4z0qAWbhTzNYN76bwcTPpCwEYmsFS8fep_Q68c9P0qbWLcZ_5a1kjqTWdgfxrDZPAHz2i8id8osU_ejTsviSdcqN0MQsyz5vbii5BgpBM4\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 1:</strong> Deploy menu interface.</p>\n</blockquote>\n</li>\n<li><p>Click the <strong>New Deployment</strong> button. Then it will show a form on the right screen.</p>\n</li>\n<li><p>Choose the deployment version. In the Kata Platform, there are 3 deployment versions which are:</p>\n</li>\n</ol>\n<ul>\n<li><p>Major to deploy significant changes, such as change chatbot use-case.</p>\n</li>\n<li><p>Minor to deploy medium changes, such as adding new features in your chatbot.</p>\n</li>\n<li><p>Patch to deploy small changes, such as change copy in action.</p>\n<p><img src=\"https://lh5.googleusercontent.com/vaIyr4Guve13jLLKL-Fv0C2lCtrFj8ckZUs4sWPyqHQ8BAjU63bvQefjtOhE7Sc4gxA5jcIjVRngH1hVUbwiyHZqhL4hVmsbI_o2U_V91YgfY2bA80hOIDd6oUoKAqGa2HYOnqsL\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 2:</strong> Create a new deployment</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>Then, click the <strong>Submit</strong> button. If deployment is successful, then the interface will be shown like this.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/MCuF58LzD7Cm7QUKyoiSdBhle2165BLVjfXBlqe-ORGc-U3_lYf44ikWvV5SYWzYH4o3sgzLT1uNpBf2Z0XD_vaqZK3LVROcblPopyYR4S_7fuVSo9OyKaMZ3YS9XiVxRcljYhYZ\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> Deployment has been created.</p>\n</blockquote>\n</li>\n</ol>\n<p>The step after creating a deployment is to create an environment. An environment is a zone in computer science that provides a place to run integrated applications. For example, Kata Platform has 3 environments: development, staging, and production.</p>\n<ol>\n<li><p>Choose the menu <strong>Deploy</strong>, then choose <strong>Environment</strong>.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/DX_9nBKZ_TLscSM-F_BX5nNLIVr9khIrBa0zaF0CVUFDt5RrlweiOfWYpipOnDz1ytuyZL9U_zx3QrAVypJiM-3oH_5BqUXN2ExNRNwPJurkFMULEuSGxm-qgGYOuWCpt1SB4IyD\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 4:</strong> Environment interface.</p>\n</blockquote>\n</li>\n<li><p>In this step, you will create a Development environment. Click the button <strong>Create Environment</strong> in the <strong>Development</strong> card.</p>\n</li>\n<li><p>Fill in the environment, then click <strong>Create</strong>.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/Vm3V29J6uptGGtXH_ceakbscsf3Y_WYdFNVQ0tfBdRO62Wnk92nONhLoc5ZtZIzEEBkDv-5xmPJmaG2laqtOzwcdxh9eIfU3MXnBkGZzPn_N5Mgb6odoKP8Ou-3uWoeFFaX2lip3\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 5:</strong> Create an environment interface.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"integration-to-a-channel\">Integration to a channel</h2>\n<p>This step will create a chatbot integration with the Telegram messaging platform. Telegram is a free messaging platform to deploy chatbots with a simple setup.</p>\n<ol>\n<li><p>In the <strong>Deploy &gt; Environment</strong>, click the <strong>Create Channel</strong> button.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/P2Z0ycmOz5NgziL1WDVK_ie5T3n6oazcwRkoO92uON9Rj0AwXuU6fYQxfSIf-U2YTsShNaBFnHnRttRe_eZlOiyZTUCf7M-dNMzFPpB2bHBvTG-DTkUxsEn1e2CavzNQWLGznqHL\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 6:</strong> Button deploys channel in a Development environment.</p>\n</blockquote>\n</li>\n<li><p>You will redirect to the <strong>Create Channel</strong> page. Click the <strong>“+ Create Channel”</strong> button to create a new channel.</p>\n</li>\n<li><p>Fill in the channel name and choose type as LINE.</p>\n</li>\n<li><p>To fill in the Bot User OAuth Access Token field, we must set up a chatbot in Telegram first. The next step is to open your Telegram application and log in.</p>\n</li>\n</ol>\n<p>Before you start, you need a LINE account already registered and logged in to your application.</p>\n<h3 id=\"registration-to-line-developer-console-and-setup\">Registration to LINE Developer console and setup</h3>\n<ol>\n<li><p>Create a LINE account. To sign up for a LINE developer account, you have to have a LINE account by <a href=\"https://line.me/en/download\">installing a LINE application, either desktop or mobile app</a>.</p>\n</li>\n<li><p>After you successfully registered, sign in to <a href=\"https://developers.line.biz/en/\">https://developers.line.biz/en/</a></p>\n</li>\n<li><p>In the LINE Developer Console, click <strong>Log In</strong>.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/6CGmnt5eMx6ftwtWmHAF1UWLru0GJiNP--pIs1aQT4gGyLjY7NeT6sC28XK6nFD7WXx-ovHifqCKhPAow_zzkvTl1zziUkEc0GBJScnrF5_FlidmAGOK1PlfIpFggba07hy1R5sY\" alt=\"bse-90\"></p>\n<blockquote>\n<p><strong>Figure 7:</strong> LINE developer dashboard.</p>\n</blockquote>\n</li>\n<li><p>Next, click on <strong>Login with LINE</strong>.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/PJXb27IKNPjbU1Jsr8SNKqqSir46_A_cqEOJtVSCnellKwe5gDVU0TXoForonHqjCy7VZRrCClGMU7B8iddFw39MCmu1dwlZa_F78zj1voNKEYwjXeSZDIe1mgPYqJA92JqXFQu-\" alt=\"bse-91\"></p>\n<blockquote>\n<p><strong>Figure 8:</strong> Log in with LINE</p>\n</blockquote>\n</li>\n<li><p>Enter your email and password. After you successfully log in, you will be redirected to the provider list dashboard.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/010ENg7kijp2_WSgLAQkP9qeeATN3-TTfBjHH5fguK1w8tafddGzb5sI2ubd2daOAm6pe8cMilbz3V1rJ6BM5A8KsYe7N4VU-OsQX4YIBlhn3-O9xzvPBxojxOHWjr4TfpSWhigB\" alt=\"bse-93\"></p>\n<blockquote>\n<p><strong>Figure 9:</strong> Provider list.</p>\n</blockquote>\n</li>\n<li><p>Next, click <strong>“Create New Provider”</strong>. Fill in the provider name.</p>\n</li>\n<li><p>Click <strong>Confirm</strong> to continue.</p>\n</li>\n<li><p>Your new provider has been created.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/zghcVVYNwzQMAhV8cycCCS47artJPaGgLXRLAB4CiJqbVGG1EBdAGVMZalvdHe1nnpfn-zCUgKykM3n0bjjyrwZJy4WyVwlHkpp9ZYPb0px7_IuEqKn7wW_83R6BWRJg5e-I61De\" alt=\"bse-96\"></p>\n<blockquote>\n<p><strong>Figure 10:</strong> New provider.</p>\n</blockquote>\n</li>\n<li><p>Next, set up the channel in the Messaging API by clicking <strong>Create Channel</strong> on Messaging API.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/_lZigIlUmsV1SZJVzLblCZrmJBsGQ3nDdG4RsWi65I0xEislbiil1gmky55VHGNMtnJQ8ABR1OBqh2Ws1pZnIjKMBwaXxO1vSbAil3Mnvszm3IYbc28GMTGNRcuixiqNCscpsHGV\" alt=\"bse-97\"></p>\n<blockquote>\n<p>Figure 11: Create channel.</p>\n</blockquote>\n</li>\n<li><p>Fill in your LINE bot detail.</p>\n</li>\n<li><p>Next, you have to choose the <strong>Developer Trial as Plan</strong>.</p>\n<p><img src=\"https://lh5.googleusercontent.com/ZnulkWi3QzhxMN40jN_48c7mmpJ2Cw7Yi3fhkwruDyYymwyEShdKLfev84ZWlwgo_o3XKi4V-6lQEZZaMcVMwqxUEYqqi0EyngPR6QFmPh0hHNSpDQEZupZa5qH0vCSa9AiEzv18\" alt=\"bse-100\"></p>\n<blockquote>\n<p><strong>Figure 12:</strong> Choose developer trial option.</p>\n</blockquote>\n</li>\n<li><p>Finally, click <strong>Create</strong>. The successfully created channel will look like this.</p>\n<p><img src=\"https://lh4.googleusercontent.com/TaB_gKcSPFs1Ei0nvSqDBG4AzECkVdA41XPaFJc4nHzv5EyiADydWp5e8nUQ6kcnXABHXGN86gmEDtHbYqoGDf14JJcJYAP9D3ES-tXCBxdyq2wZBhsnC7ME7FT0D9uly3KJBxmJ\" alt=\"bse-102\"></p>\n<blockquote>\n<p><strong>Figure 13:</strong> New channel.</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"integrate-line-to-your-chatbot\">Integrate LINE to your chatbot</h3>\n<ol>\n<li><p>Click on the created channel to fill in the Channel Access Token</p>\n</li>\n<li><p>Click <strong>“Issue”</strong> in the Messaging Settings section.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/JejyqTncO-B2A1AraujwVCQVgfDhAP02OBk4-MmhEdtN3RzSgFTC2c45y2BRYNzEF3kU29bLQf3NFMs0dB49LqFCvoPXlUAWvlHMJuyhZa-DwqgAANSj7UwacTLXGHuodgeZehDT\" alt=\"bse-103\"></p>\n<blockquote>\n<p><strong>Figure 14:</strong> Issue access token.</p>\n</blockquote>\n</li>\n<li><p>Then, a dialog will show. Click on <strong>Issue</strong> to continue.</p>\n</li>\n<li><p>Finally, copy the <strong>Channel Access Token</strong> below and paste it on the Create Channel form in the Kata Platform.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/uhQ7LT2knR4S2AJ6fqcPBKLXD4hwwNHX--eWSr-anZT3ViQKlgPgozemprLQtR38n457TuQ9CUMDGdlp77Kf1mrrOZoRTwtFUfv035HJuY1UG3AW5kaqTCkiKALOTHCgKtzMkJZ1\" alt=\"bse-105\"></p>\n<blockquote>\n<p><strong>Figure 15:</strong> Show Channel Access Token.</p>\n</blockquote>\n</li>\n<li><p>Go back to Kata Platform, then paste the Channel Access Token.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/OWwMEqWx-7ChUTTWQOywA8iUM3uztA_F62srIVDZ5auM3KK9N4ubxGSrHDM2NMXGc7eA1QSj1FmzJxOa-xy6S071SdSuU3W05NL2G0wu6ticIxPv1nzMX_blJtedBCL2o46XEqkR\" alt=\"bse-106\"></p>\n<blockquote>\n<p><strong>Figure 16:</strong> Paste Channel Access Token.</p>\n</blockquote>\n</li>\n<li><p>Next, you will fill in the Channel Secret field. Then, in Basic Information, copy Channel Secret from LINE to the Kata Platform.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/uekbS2J-6MhVyI5-vy_AJJSZH9HPvPktts8mYoC7tu2W-kk14_tcGsHwXfHR0xxOqFIcRzknY6ImeuUlaY31InZlOUZI1LpRbnXg7zoQdRViF7NLkYc0BGJK_3EKsEUYqAaAJc-6\" alt=\"bse-107\"></p>\n<blockquote>\n<p><strong>Figure 17:</strong> Copy Channel Secret.</p>\n</blockquote>\n</li>\n<li><p>Go back to the Kata Platform, then paste the Channel Secret.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/W2rmrwQlRBiPLh2iRoyQOJhU0Zl9V5CWaIdbABJLaNOtAJ4ew3GI6u7PSN3yQkEXcSgOdjpBSGgoofpJurOsHgJvfLwoDfoSVVxPWjzO5XnpDaja60rqaKHAlA63ZI2rREZhQle4\" alt=\"bse-108\"></p>\n<blockquote>\n<p><strong>Figure 18:</strong> All fields are filled in.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>“Create”</strong> to generate a webhook URL from the Kata Platform.</p>\n</li>\n</ol>\n<p>After the webhook URL is generated, go to Messaging Settings in the LINE developer console to enable webhook.</p>\n<ol start=\"9\">\n<li><p>Enable the webhook by clicking on <strong>Enable</strong> in the <strong>“Use Webhooks”</strong> section, placed above the Webhook URL field.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/fRxssRnVbglQ_VTSQXCWRcFi-Qdh5UHGxWRe9ZCcuPEzLmAbPCBZRYZdA6jo-1YOzKhhCsgJyb4DCtzKFzCAfA1wxqyhhXywJkBDep7kg4anF8DpaLb7DEstzqYpVWZHUjPzWLVL\" alt=\"bse-111\"></p>\n<blockquote>\n<p><strong>Figure 19:</strong> Enable webhook.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>“Update,”</strong> then paste the webhook URL to the LINE developer console.</p>\n<p><img src=\"https://lh4.googleusercontent.com/F4kHJXYs2MtKVjtnQSjrr5YdrkeBEgySvLLK3rd3QwI426qRHIXqTh0ost9z6MHZiEO0Z1NyPRAlk8qyy4z9rx6qvopjUyC1WCAgtvgzqLkxGyZMl4UZ4_9ITNeYCPCTh6IAsp-G\" alt=\"bse-112\"></p>\n<blockquote>\n<p>Figure 20: Paste webhook from Kata Platform.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>“Update”</strong>, then click <strong>“Verify”</strong>.</p>\n</li>\n<li><p>Next, disable auto-reply messages and greeting messages by following figure 21.</p>\n<p><img src=\"https://lh6.googleusercontent.com/mmYevVpQFQPF8bJeN7qpv97Kipt4me12sF786crYKjnsiaKR1d2xWZvlpxBf86RZAiBeasP0msCE5EOs4XtK-U_8kLbenn3656RxnTPh3ujObT2CqKy-laCfWpLW-ZGj8YDTMrT_\" alt=\"bse-114\"></p>\n<blockquote>\n<p><strong>Figure 21:</strong> Disable auto-reply and greeting messages.</p>\n</blockquote>\n</li>\n<li><p>Congratulations, you have successfully deployed your bot to LINE Messenger.</p>\n</li>\n<li><p>Next, test your bot by scanning the QR code.</p>\n</li>\n</ol>\n<p>It is the end of the guidance. If you find it difficult to follow, you can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a>. Thank you.</p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "title": "How to deploy your chatbot to LINE",
      "date": "2022-01-17T07:00:00+07:00",
      "excerpt": "<p>LINE is a free messaging platform and is famous in Indonesia. This messaging platform supports various interactive action types such as carousel, button, Image Map, and many more.</p>",
      "meta": {
        "relativePath": "how-to-deploy-your-chatbot-to-line.html",
        "createdAt": "2022-02-03T01:16:13.129Z",
        "lastModified": "2022-02-03T01:16:13.129Z",
        "size": 9989,
        "formattedSize": "9.8 KB"
      }
    },
    {
      "id": "how-to-deploy-your-chatbot-using-twitter",
      "contents": "<p>Twitter is a trending social media for most countries, so Twitter chatbots will be a great opportunity to join the trend ✨ In this tutorial, you will learn how to deploy the bot to the Twitter direct message channel. So, let’s get started.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<ol>\n<li>Click <strong>Deploy</strong> menu in the left sidebar</li>\n<li>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</li>\n<li>Choose any deployment version you want to deploy and fill in the changelog.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/7qQL-bT11-PszbC2Y92kcZ_Avayic4bKR4k82jquDTH2_iRs6a6ZL0b7gN8-1cqfvLEtUYZl_l20Tq885jwkx4lU8lI_Gs6lpKD42MCJoP7OQqIttgLTk4O_i6hQiRj1hlE6aPwH\" alt=\"Alt Image 1\"></p>\n<blockquote>\n<p><strong>Figure 1</strong>: Create a new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment</li>\n</ol>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li>Go to the <strong>Deployments &gt; Environment</strong> menu.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/wRHYa5fPbW012q3q7JqosoR9qq5R72aafskrbpILMMs2akEXy50LRF5uTJ2XjYBou26sv8s3K6p0K-Zy1oySuvP5k1F6wGwJrXJGjRuZmHvrJFIny_jjED9ZxrVvBZU06yHbaF2A\" alt=\"Alt Image 2\"></p>\n<blockquote>\n<p><strong>Figure 2</strong>: Set up environment, then set up Twitter channel</p>\n</blockquote>\n<ol start=\"2\">\n<li>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</li>\n<li>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</li>\n<li>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS. Learn more about CMS.</li>\n<li>Click <strong>Create</strong> to create the environment.</li>\n<li>Created environment now has a <strong>Create Channel</strong> button.</li>\n</ol>\n<p>Continue to choose Twitter as a chatbot channel.</p>\n<ol>\n<li>Click the <strong>Create Channel</strong> button to start adding channels to the environment. It will open up the Channel menu within the environment.</li>\n<li>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. A menu to set up the channel will be shown.</li>\n<li>Choose <strong>Twitter</strong> in Channel Type.</li>\n</ol>\n<p><img src=\"https://lh6.googleusercontent.com/1e60t2rOsNQc8QysllKO4gxIGwEvSVapL7El-Ju2VlcCIOTxWnXSGpAXlMgo4VPSAGuhXcImhbyVTHrDO8ZB1VESeV7HcOuUpQnHN8JWxispwE6xCTaFL7ade6q078byGAiDrTNY\" alt=\"Alt Image 3\"></p>\n<blockquote>\n<p><strong>Figure 3</strong>: Create Twitter channel</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Functionality</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Name</td>\n<td>Your channel name</td>\n<td>Max. 30 characters must contain only alphanumeric characters (A-Z, a-z, 0-9), <code>-</code>, and <code>_</code>.</td>\n</tr>\n<tr>\n<td>Access Token</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Access Token Secret</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Consumer Key (API Key)</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Consumer Secret (API Secret)</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"how-to-collect-api-secret-key-access-token-and-access-token-secret\">How to collect API secret key, access token, and access token secret</h2>\n<ol>\n<li>To deploy your bot on Twitter, you need to register for a developer account. Go to <a href=\"https://developer.twitter.com\" target=\"_blank\"><span>http</span>s://developer.twitter.com</a>.</li>\n<li>Continue to sign up by following the instructions.</li>\n<li>Then, log in to the Twitter Developer Page. You will see the homepage.</li>\n<li>Click on <strong>Create An App</strong> tab, then your page will be shown like this:</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/OdoqY_qeP64uzlsZr24JrRhbepoqrtymPXC86F0UaqBZW06e0VVObF7AEVWanBSfZ4KqUf4O6F_W9CUKJe1d8lv8HDaUKk4DW8xJ48Hb43toCvGUbUoElNMn91GUndJiiCaZL5SM\" alt=\"Alt Image 4\"></p>\n<blockquote>\n<p><strong>Figure 4</strong>: Create an app page.</p>\n</blockquote>\n<ol start=\"5\">\n<li>Fill the form then click on <strong>Create</strong> button</li>\n<li>Then, go to the <strong>Keys and tokens</strong> tab. Click the <strong>Regenerate</strong> button to generate an API key, API secret key, access token, and access token secret. Here is an example.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/J3bW4olVVvCgmk6gWQSarPoilsfpbBug3eTpt2TIX1JiZ8b1Io6rWnvy4yeneEfOGqxv1wFZ4MNS4R1oijEAy8uSJeV8Hd6ZGjIuZ6t4C5PY-Sd6yd_gxwOA0vtpEG4R_iNl15HS\" alt=\"Alt Image 5\"></p>\n<blockquote>\n<p><strong>Figure 5</strong>: Generate access token and access token secret</p>\n</blockquote>\n<ol start=\"7\">\n<li>Then, go to the <strong>Permissions</strong> tab. In this tab, change access permissions to <strong>Read, write, and Direct Message</strong>.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/Ngs3Mz1H6fqS-Ahzg_U3lryRdolxVmHJhe0l0BsnQz7CqCaX86UQrpRrSnmuwdL01nSCc4izMjfF6hbotLrgCT9Se0bWWX5fTqGV6Z3l5vQC1IimlqXGanzOHJDL4XU4yg5AItdS\" alt=\"Alt Image 6\"></p>\n<blockquote>\n<p><strong>Figure 6</strong>: Access permissions changed to Read, write and Direct Messages</p>\n</blockquote>\n<ol start=\"8\">\n<li>Go to the <strong>Dev environments</strong>(<a href=\"https://developer.twitter.com/en/account/environments\" target=\"_blank\"><span>http</span>s://developer.twitter.com/en/account/environments</a>), then click the button <strong>Set up dev environment</strong> to begin.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/c8SvPV8iNJ9XguqhDTmpkoW818z6RwCWJCJHwIm2bN9JEe8zpJvr3PVqKiJYnajFLqg81ElyWMovUXDaJPc55GAxFfz1usWVhzgXcEUZ8dTe4u1UN22OaTJqnBmXYyOlr5M3Jgq_\" alt=\"Alt Image 7\"></p>\n<blockquote>\n<p><strong>Figure 7</strong>: Set up dev environment</p>\n</blockquote>\n<p>Next step is to paste the API key, API secret key, access token, and access token secret from Twitter to the Kata Platform.</p>\n<ol>\n<li>Go back to the Key and Tokens tab, copy all fields.</li>\n<li>After copied, go back to Kata Platform (<a href=\"https://platform.kata.ai\" target=\"_blank\"><span>http</span>s://platform.kata.ai</a>)</li>\n<li>Paste the API key, API secret key, access token, and access token secret there. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/V95HDF2NSwY1aGlOR5YeLFWUK_zps9qY_YF_F_bRR4RHtAzDUBmFTiDndTzg4pbXfO-Ln6UBIs-bze3erosAnFcsQt7r8s8TsgKaMEMDZ3u4ZTG0nqPvl0UnIBcMsXpxWMIUwk3A\" alt=\"Alt Image 8\"></p>\n<blockquote>\n<p><strong>Figure 8</strong>: Paste API key, API secret key, access token, and access token secret</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Create</strong> to generate the webhook. You can see a webhook URL from the generated channel.</li>\n<li>Click the <strong>copy</strong> icon to copy the webhook URL.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/n7IGyBPqnBHf10rJlb_M9l0x-xWobhxutiRor9wP0r259gsxGPxHvQS7IipXIqpcLk7FAXoC-edU9X2aPh_8tThKrgwslWgAsDiZhUdOJLZb9MMcA96l8syZL3FINaPbN1i-dXDb\" alt=\"Alt Image 9\"></p>\n<blockquote>\n<p><strong>Figure 9</strong>: Copy webhook URL</p>\n</blockquote>\n<h2 id=\"finalize-twitter-direct-message-set-up\">Finalize Twitter Direct Message Set Up</h2>\n<ol>\n<li>Clone this repository: <a href=\"https://github.com/twitterdev/account-activity-dashboard\" target=\"_blank\"><span>http</span>s://github.com/twitterdev/account-activity-dashboard</a></li>\n<li>Install Node.js dependencies using <strong>npm install</strong> command.</li>\n<li>Create a new <strong>config.json</strong> file based on <strong>config.sample.json</strong> &amp; <strong>.env</strong> file based on <strong>env.template</strong> and fill in your Twitter keys, tokens and webhook environment name. Twitter keys and access tokens are found on your app page on Apps Dashboard (<a href=\"https://developer.twitter.com/apps\" target=\"_blank\"><span>http</span>s://developer.twitter.com/apps</a>). The basic auth properties can be anything you want, and are used for simple password protection to access the configuration UI. Environment name is found on the Dev Environment (<a href=\"https://developer.twitter.com/en/account/environments\" target=\"_blank\"><span>http</span>s://developer.twitter.com/en/account/environments</a>) page. Make sure you have access to the Account Activity API.</li>\n<li>Revisit your developer.twitter.com Apps Settings page, and add the following URL values as whitelisted Callback URLs:</li>\n</ol>\n<pre><code>http://your.app.domain/callbacks/addsub\nhttp://your.app.domain/callbacks/removesub</code></pre><ol start=\"5\">\n<li>Run locally using <strong>npm start</strong> command</li>\n<li>Open <a href=\"http://your.app.domain/webhook\" target=\"_blank\"><span>htt</span>p://your.app.domain/webhook</a>. If it succeeds, username and password are inserted with basic auth properties that you have defined before.</li>\n<li>Paste webhook from Kata Platform to Create or Update Webhook. Click <strong>Create/Update</strong> to continue.</li>\n</ol>\n<p><img src=\"https://lh6.googleusercontent.com/s5aMas6GBzvQLEj8svcnhx-XSbvFvC1mLD9aLi81-PJtABsPXZpPzSO3MLzdAdH_Y7lQ_4ZfOly5WA8_8JQq-EPyZUsoOZyM20F39D9HaYmmvgA1oa1Na5Dqq7jdZjDPsjq3EHvQ\" alt=\"Alt Image 10\"></p>\n<blockquote>\n<p><strong>Figure 10</strong>: Paste webhook URL from Kata Platform</p>\n</blockquote>\n<ol start=\"8\">\n<li>Next, open <a href=\"http://your.app.domain/subscriptions\" target=\"_blank\"><span>htt</span>p://your.app.domain/subscriptions</a>.</li>\n<li>Then, click <strong>Add</strong> to add a user subscription. Login with the same account that you set to become the bot.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/3QZFpJZPNLFUrSARVYQTxDFTMWKzv1yfKBXhKn7-bEsuMnWCsHJuoggMR-gn4mmnLd2jJ7eyKG-OlgOC2fo7XgpJ0jAbyO-4QJax-YJsezFk4Pq7clcrs7UWOdrBkOyUDGVAcEbT\" alt=\"Alt Image 11\"></p>\n<blockquote>\n<p><strong>Figure 11</strong>: Manage subscription page</p>\n</blockquote>\n<ol start=\"10\">\n<li>Finally, create a direct message to the bot account.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/8eja7sV-2GkYVeLQOT-WtVKvgJVXJyuTxKdb1HBOEawPE2aq_KWEWJ9BgPVdHgR3LxYDvaMxUL1xynFc1jW3Hn7-WiDiQHhggcteVo44qbU0qE5wA5gEgQldHW0pp2s12veEv85p\" alt=\"Alt Image 12\"></p>\n<blockquote>\n<p><strong>Figure 12</strong>: Chatbot successfully deployed</p>\n</blockquote>\n<p>This is the end of the guidance, you can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "title": "How to deploy your chatbot using Twitter",
      "product": "kata-platform",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Twitter is a trending social media for most countries, so Twitter chatbots will be a great opportunity to join the trend &#x2728; In this tutorial, you will learn how to deploy the bot to the Twitter direct message channel. So, let&#x2019;s get started.</p>",
      "meta": {
        "relativePath": "how-to-deploy-your-chatbot-using-twitter.html",
        "createdAt": "2022-02-03T01:16:16.461Z",
        "lastModified": "2022-02-03T01:16:16.461Z",
        "size": 9397,
        "formattedSize": "9.2 KB"
      }
    },
    {
      "id": "how-to-use-facebook-messenger-for-your-chatbot",
      "contents": "<p>Facebook Messenger (commonly known as Messenger) is a messaging app and platform developed by Facebook. In this section, we will learn to connect our bot with Messenger. Then, you can use this <a href=\"https://docs.google.com/document/u/0/d/1_0Or96U0Ru32BBzOCcYOiNzuwxKtJdKIxW4ZJZzeceA/edit\">simple bot tutorial</a> to integrate your bot with Messenger.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<ol>\n<li><p>Click the <strong>Deploy</strong> menu in the left sidebar.</p>\n</li>\n<li><p>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</p>\n</li>\n<li><p>Choose any deployment version you want to deploy and fill in the changelog.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/pirqaBIBV5pgDCwlh0meA62oISQC-fpKylZtwIswegWd_H0WafUzhYAULwFgativywXNyx9Qyg-JcvqePHjl7Od-PJDrT5p1yDPD5O4jLIHD1ju7GGWFwbs6PuuEqnqyrCXgYsPc\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 1:</strong> Create a new deployment</p>\n</blockquote>\n</li>\n<li><p>Click <strong>Submit</strong> to finish the deployment.</p>\n</li>\n</ol>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li><p>Go to the <strong>Deployments &gt; Environment</strong> menu.</p>\n<p><img src=\"https://lh6.googleusercontent.com/JRstpsCUtzt-fUbkVMmq84_XssMVqirY0B6b3ibh5oUdlHRkKsm5PFDp_-33unRrJhAbqi3_tQXXlSVo_Y9odjh5i2_xc51paF2qjVD3A7bUMxSIHXGPyfqNtmPHw2NeEY7GBR62\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 2:</strong> Set up the environment, then set up the WhatsApp channel.</p>\n</blockquote>\n</li>\n<li><p>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</p>\n</li>\n<li><p>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</p>\n</li>\n<li><p>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS.<a href=\"https://docs.kata.ai/cms-studio/about/&#39;\"> Learn more about CMS</a>.</p>\n</li>\n<li><p>Click <strong>Create</strong> to create the environment.</p>\n</li>\n<li><p>Created environment now has a <strong>Create Channel</strong> button.</p>\n</li>\n</ol>\n<p>Continue to choose FB Messenger as a chatbot channel.</p>\n<ol>\n<li><p>Click the *<em>Create Channel *</em>button to start adding channels to the environment. It will open up the Channel menu within the environment.</p>\n</li>\n<li><p>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. It will show a menu to set up the channel.</p>\n</li>\n<li><p>Choose <strong>FB Messenger</strong> in Channel Type.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/td1ymVbCSIVL4SgD8jWViUQ9tACf_e93zqR047EbaHhOjxu29w473bZ1C9CVtvbdxfGrlAQQY7xOVh63EwX3KMTPLnpcHjeYALpFwB2baBEh09g-N-RMbaUvb-l4qJxSaRlmHkP9\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> Create FB Messenger channel</p>\n</blockquote>\n</li>\n</ol>\n<table>\n  <tr>\n   <td>\n    <strong>Field Name</strong>\n   </td>\n   <td>\n    <strong>Functionality</strong>\n   </td>\n   <td>\n    <strong>Limitation</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    Name\n   </td>\n   <td>\n    Your channel name\n   </td>\n   <td>\n    Max. 30 characters must contain only alphanumeric characters (A-Z, a-z, 0-9), `-`, and `_`.\n   </td>\n  </tr>\n  <tr>\n   <td>\n    Page Access Token\n   </td>\n   <td rowspan=\"2\" >\n    These are required fields from Facebook to ensure security with third-party applications. In addition, you can find the Page Access Token and App Secret in Facebook Developer.\n   </td>\n   <td>\n    -\n   </td>\n  </tr>\n  <tr>\n   <td>\n    App Secret\n   </td>\n   <td>\n    -\n   </td>\n  </tr>\n</table>\n\n<h2 id=\"how-to-get-page-access-token\">How to get Page Access Token</h2>\n<ol>\n<li><p>First, you have to sign in (register first, if you don’t have a Facebook account) to <a href=\"https://developers.facebook.com/\">https://developers.facebook.com/</a></p>\n</li>\n<li><p>Then, create a new app for your bot.</p>\n<p><img src=\"https://lh5.googleusercontent.com/BGmz6EAY4qfVL7UVC3eno0bzkKceAn1K4gXLJReovNL78LFyVK3a6lDj39m4kSmFhE97NkqrpZa3bNvCU3ohsfRC7RkpbRUCNnNFWu5F_DOyFa9eeMSDoQYu7rRvEIExF2j0R6x2\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 4:</strong> Create a new app for your bot.</p>\n</blockquote>\n</li>\n<li><p>Go to <strong>Messenger &gt; Settings</strong>. You will see the Access Tokens field.</p>\n<p><img src=\"https://lh5.googleusercontent.com/1VcPoy4NknoTEERYPFP9x71gSO_Y7HNYCkzrFhME2WD03f278-NKQzTJK0bBiSXHZqM0Mkl06s5c_6yPRu8AxMaCNX7Xbi6cWhTZZuFEqgaUfWKsVn4l6hpE57LhjHkntRYtWqdf\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 5:</strong> Access Tokens section inside Messenger &gt; Settings menu.</p>\n</blockquote>\n</li>\n<li><p>To get the access token, you need to add a Facebook Page. First, click <strong>Create New Page</strong> to create a new page. Then, continue to create a page by following the instructions.</p>\n</li>\n<li><p>Click <strong>Generate Token</strong> to generate your access token, then copy it to your channel in the Platform.</p>\n<p><img src=\"https://lh5.googleusercontent.com/lNW3CBq_NqxTGs_4CJeOlis_ODDp7is5IO0UWBeFz7tUegk4RERynBmJh8pGuDd4E06mIiZhK0ISXyuMN0rKMB0on9s73r93JkFaYRNUzASkrQRA7GVpTLSmQTkM0LTKSVIhIt23\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 6:</strong> Generate Token button</p>\n</blockquote>\n</li>\n</ol>\n<p>The next step is to paste the access token from Facebook to the Kata Platform.</p>\n<ol>\n<li><p>Go back to Kata Platform (<a href=\"https://platform.kata.ai\">https://platform.kata.ai</a>)</p>\n</li>\n<li><p>Paste the Page Access Token there. Here is the example:</p>\n<p><img src=\"https://lh3.googleusercontent.com/o-6x8m6t0J0p_4MJeJtl7B_ezDVtZ6CU55DZFuLTDrFUCIAdb0k2qNH0uoD0x-mgcWI2n0lXEwzuMGSnmsxKKm2KfsOSHilkcZA8XUF63nfn_yCgsKnDx3-JXedrxBXUj4pEXzlb\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 7:</strong> Paste access token to the Page Access Token field.</p>\n</blockquote>\n</li>\n</ol>\n<p>Let’s continue to get App Secret.</p>\n<h2 id=\"how-to-get-app-secret\">How to get App Secret</h2>\n<ol>\n<li><p>Go to <strong>“Settings” → “Basic”</strong> to find the App Secret.</p>\n</li>\n<li><p>Click <strong>“Show,”</strong> then copy the App Secret.\n<img src=\"https://lh5.googleusercontent.com/wt10fIEZUBmFLKRsg5tGnDJaN8ssn3qKLNHElSZnLUFCIBiEBm9cVJdncdR3XuJ0ndnI8yKZZPWPblMaIMiRWUo0LNdHnqMvZxinVNFkjlowQ5vEEIkkLC0zzuRBE-L5BvL_zpWy\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 8:</strong> Showing App Secret.</p>\n</blockquote>\n</li>\n</ol>\n<p>The next step is to paste the access token from Facebook to the Kata Platform.</p>\n<ol>\n<li><p>Go back to Kata Platform (<a href=\"https://platform.kata.ai\">https://platform.kata.ai</a>)</p>\n</li>\n<li><p>Paste the App Secret there. Here is the example:</p>\n<p><img src=\"https://lh5.googleusercontent.com/71FJSORECUYLLiVG2U0xD1JIT_OUfNfQfRdI971uSIsWQbK2RbdMWTRylPtRsLJxBUluvCUqbuNHKHgCSqk26ENDy2TWaVx8FxcHf9TX3VGZCK_CVMNAnOqcs5Vc2gOrFHefzGit\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 9:</strong> Paste App Secret from Facebook here.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>Create</strong> to generate the webhook. You can see a webhook URL from the generated channel.</p>\n</li>\n<li><p>Click the copy icon to copy the webhook URL.</p>\n<p><img src=\"https://lh6.googleusercontent.com/FKeuK2vrCDJKPFmz9G-tWSYMB9oBO66FC4sTj_-o7VRxmzG5yKjHIGKYc_6i08Dqrt-R5JloTVOh8EqALIP3VV6CJdDSsCPHud4JUiDaCSHEZANVGpJ-3QyKADQZpaeAzkzxshfx\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 10:</strong> Copy webhook URL.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"finalize-set-up-in-facebook\">Finalize Set up in Facebook</h2>\n<h3 id=\"paste-webhook-url-to-facebook\">Paste webhook URL to Facebook</h3>\n<ol>\n<li>Go to the Webhooks field in the <strong>“Messenger” → “Settings.”</strong></li>\n<li>Fill the <strong>“Callback URL”</strong> with a webhook URL from a channel you’ve made in the Kata Platform.</li>\n</ol>\n<h3 id=\"paste-challenge-token-to-facebook\">Paste Challenge Token to Facebook</h3>\n<ol>\n<li><p>To get Challenge Token from your channel, you need to click on the top of the column to trigger the <strong>View Channel</strong> drawer.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/KLqklBmww0wUto-TFDOqliGafescDeaH5-k_vVW9rvlDOgdQGpzuZi-suSUP5bMU7_5hAiwghJrU6IuLxrCs12eAa0tVz11_UR6FoXnQ-G2kPhwQN6F2ePYFhi_u1axtLd9_WVgs\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 11:</strong> Challenge Token located in View Channel drawer.</p>\n</blockquote>\n</li>\n<li><p>Block content inside the Challenge Token field, then copy it.</p>\n</li>\n<li><p>Go back to the <a href=\"https://developers.facebook.com/\">https://developers.facebook.com/</a></p>\n</li>\n<li><p>Next, paste the challenge token in <strong>“Verify Token”</strong> from the Kata Platform.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/_jGjTFmSis0d-3EaRt1tlujc497JPNhsnZ1u0TH1arYNYH_de-NcmrhRNOXD0VUY9J-RQxMy23bgOhPfjR1KdDpCpY8m0DPwGnr4sPaUoKdgNBJgiwD1phrFXD42YOMpbv8OyZtc\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 12:</strong> Fill in challenge token in Verify Token field.</p>\n</blockquote>\n</li>\n<li><p>Finally, click <strong>“Add Subscription”</strong> and check the <strong>“messages”</strong> and <strong>“messaging_postbacks”</strong> checklist.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/gnofrwknfi19LW7QUtlQte5PYRd641Us6dbT2JzaxFK94kAV6brBDIBbV3uGR52T8sTFBW3hyDlUuvfqcCmZmHifNQ8cKXe-yEgLU4KB5VSyh-5EoNNmz8Yw9oidaoIYl2jcL8sq\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 13:</strong> Fill in the checklist in messages and messaging_postbacks.</p>\n</blockquote>\n</li>\n</ol>\n<p>It is the end of the guidance. You can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "title": "How to use Facebook Messenger for your chatbot",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Facebook Messenger (commonly known as Messenger) is a messaging app and platform developed by Facebook. In this section, we will learn to connect our bot with Messenger. Then, you can use this <a href=\"https://docs.google.com/document/u/0/d/1_0Or96U0Ru32BBzOCcYOiNzuwxKtJdKIxW4ZJZzeceA/edit\">simple bot tutorial</a> to integrate your bot with Messenger.</p>",
      "meta": {
        "relativePath": "how-to-use-facebook-messenger-for-your-chatbot.html",
        "createdAt": "2022-02-03T01:16:18.823Z",
        "lastModified": "2022-02-03T01:16:18.823Z",
        "size": 8181,
        "formattedSize": "8.0 KB"
      }
    },
    {
      "id": "how-to-use-freshchat-for-your-chatbot",
      "contents": "<p>Freshchat’s live chat software is the fastest way for you to engage with your website visitors, provide assistance, and convert leads to happy customers. In this section, we will learn to connect our bot with Freshchat. Let’s get started.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<ol>\n<li>Click <strong>Deploy</strong> menu in the left sidebar</li>\n<li>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</li>\n<li>Choose any deployment version you want to deploy and fill in the changelog.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/7qQL-bT11-PszbC2Y92kcZ_Avayic4bKR4k82jquDTH2_iRs6a6ZL0b7gN8-1cqfvLEtUYZl_l20Tq885jwkx4lU8lI_Gs6lpKD42MCJoP7OQqIttgLTk4O_i6hQiRj1hlE6aPwH\" alt=\"Alt Image 1\"></p>\n<blockquote>\n<p><strong>Figure 1</strong>: Create a new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment</li>\n</ol>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li>Go to the <strong>Deployments &gt; Environment</strong> menu.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/wRHYa5fPbW012q3q7JqosoR9qq5R72aafskrbpILMMs2akEXy50LRF5uTJ2XjYBou26sv8s3K6p0K-Zy1oySuvP5k1F6wGwJrXJGjRuZmHvrJFIny_jjED9ZxrVvBZU06yHbaF2A\" alt=\"Alt Image 2\"></p>\n<blockquote>\n<p><strong>Figure 2</strong>: Set up environment, then set up Freshchat channel</p>\n</blockquote>\n<ol start=\"2\">\n<li>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</li>\n<li>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</li>\n<li>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS. Learn more about CMS.</li>\n<li>Click <strong>Create</strong> to create the environment.</li>\n<li>Created environment now has a <strong>Create Channel</strong> button.</li>\n</ol>\n<p>Continue to choose Freshchat as a chatbot channel.</p>\n<ol>\n<li>Click the <strong>Create Channel</strong> button to start adding channels to the environment. It will open up the Channel menu within the environment.</li>\n<li>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. A menu to set up the channel will be shown.</li>\n<li>Choose <strong>Freshchat</strong> in Channel Type.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/FWt0V77RL43HAH3RIBvDyMi3E2zauWpFyYTpJ2gjJt19HpimjGuQqGmCFZd39n6rwD5HSJhkld3V6q09rhXh8s-NPxVNO5dslgddG35XHsU6NG5Kv9BObgrdEmiRJ_x3gX03I6AU\" alt=\"Alt Image 3\"></p>\n<blockquote>\n<p><strong>Figure 3</strong>: Create Freshchat channel</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Functionality</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Name</td>\n<td>Your channel name</td>\n<td>Max. 30 characters must contain only alphanumeric characters (A-Z, a-z, 0-9), <code>-</code>, and <code>_</code>.</td>\n</tr>\n<tr>\n<td>API Token</td>\n<td>Token credential from Freshchat</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Actor ID</td>\n<td>Actor ID that collected from Freshchat</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"how-to-generate-api-token\">How to generate API Token</h2>\n<ol>\n<li>First of all, you need to sign in to your <strong>Freshworks</strong> account to do the integration.</li>\n<li>After you’re logged in, go to the <strong>Settings</strong> page to configure the API Token and Webhook.</li>\n</ol>\n<p><img src=\"https://lh6.googleusercontent.com/Eyqt32M_FitAwHsc3K7f8R4L0yv4Ac5Q6eN59NF1ZdIxrifc5v3hYJ7RSZ5_wviBjixCdQvKT1hi4Xxb0IoERAj6ulonY5svAgyLanTI4PaWbWyhu095trMdEdEIRDeE4ALIMZtR\" alt=\"Alt Image 4\"></p>\n<blockquote>\n<p><strong>Figure 4</strong>: Settings page in Freshwork.</p>\n</blockquote>\n<ol start=\"3\">\n<li>In order to generate the API Token in Freshchat, go to <strong>Settings → API</strong> Tokens.</li>\n<li>Then, click on the <strong>Generate Token</strong> button.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/qq7eetwnsdpkuyLJyuFgtuVVeSIexttruNlYZKjdRaAALgUpIW_fyiKX3WuT4IgAtvtN8HUEoy2LGEwZFdiYdZElToq7ugo5v6QtqWegtR_CDSmDLxNXr6hOPN0UMV7ek3oqgr-n\" alt=\"Alt Image 5\"></p>\n<blockquote>\n<p><strong>Figure 5</strong>: Generate a token in Freshchat.</p>\n</blockquote>\n<p>Next step is to paste the API token from Freshchat to the Kata Platform.</p>\n<ol>\n<li>Go back to Kata Platform (<a href=\"https://platform.kata.ai\" target=\"_blank\"><span>http</span>s://platform.kata.ai</a>)</li>\n<li>Paste the API Token there. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/TqM-vuHTq1HILZl2v1hX-apndSvXK8oTK-jmVB9iRolICO6D-Cj4dqZFBP8eC7ZmTPxhi_zHALo4KecaspQGObLV_k-zuPGdTahoqOkr9gdmXpFT7G6GVFJI9ODLAb5_fjor7zqN\" alt=\"Alt Image 6\"></p>\n<blockquote>\n<p><strong>Figure 6</strong>: Paste the API token to the API token field.</p>\n</blockquote>\n<p>Let’s continue to get an Actor ID.</p>\n<h2 id=\"how-to-generate-actor-id\">How to generate Actor ID</h2>\n<ol>\n<li>Go to <strong>Settings → Team</strong> Members.</li>\n<li>Then, click on the <strong>Add a team member</strong> button. In the “Roles” field, choose “Agent”.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/BLQgfZ_BTU746AMyNQasEQcCn1GfPK_yYaGwPJXzpPPR5Pn3XhXO_c6xwQhtaj74W_ZapR6-MB5NhMx_WxvFSVgKlIzympdNLTeJFhwmXgQjLZls8eNeIT3Ezx3mnd-CX-9t6rkC\" alt=\"Alt Image 7\"></p>\n<blockquote>\n<p><strong>Figure 7</strong>: Add a team member page.</p>\n</blockquote>\n<ol start=\"3\">\n<li>With the API Token we got from the previous step, get the Actor ID using <a href=\"https://www.postman.com/\" target=\"_blank\">Postman</a> or cURL. Actor ID is the agent <code>id</code>.</li>\n</ol>\n<pre><code>curl --request GET &#39;https://api.freshchat.com/v2/agents&#39; \\\n--header &#39;Authorization: Bearer &lt;token&gt;&#39;</code></pre><p><img src=\"https://lh5.googleusercontent.com/0t0vKrQw4h2oGcfCB7wBQ3-MS0TUB2tscZ6hpNvbjvYdkcO-Ec06ce_0SSyhHlzvNdvqRjNvurgaLno7GVB8n4xV18QVkQc8QMZ3mEZutVJJZNGuLPAOwla2rSUjCynvGG_ZI0Tv\" alt=\"Alt Image 8\"></p>\n<blockquote>\n<p><strong>Figure 8</strong>: Showing results from API.</p>\n</blockquote>\n<ol start=\"4\">\n<li>Copy one of the Agent IDs, then paste it to the Kata Platform.</li>\n</ol>\n<p>Next step is to paste the API token from Freshchat to the Kata Platform.</p>\n<ol>\n<li>Go back to Kata Platform (<a href=\"https://platform.kata.ai\" target=\"_blank\"><span>http</span>s://platform.kata.ai</a>)</li>\n<li>Paste the Actor ID there. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/eRnudZWnEAg-b2pS2lBwCr_voiTty-iLdS-aQDPH6PxF7JrB6A0Cxj710Lm3vMKQPbGEgIF9Nm-QecvawTckyXAtEY91aYr6-gQyURNI7Wub0vcxgJbT_ylSkN48wtM0MJvZe7ra\" alt=\"Alt Image 9\"></p>\n<blockquote>\n<p><strong>Figure 9</strong>: Paste Actor ID into channel configuration.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>Create</strong> to generate the webhook. You can see a webhook URL from the generated channel.</li>\n<li>Click the copy icon to copy the webhook URL.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/UyvOd2i7lI6yW8MjTNFpol65olWj6u0lxB1OdTxzU6x6m_piJFCR3PpJHX4hUdbDt87Fg3R3jvh9NP6Nkdkztd9aOJi6D7WrJ7Twody-plu2KMlELQfauc1SeJDvseatgpUVPN3o\" alt=\"Alt Image 10\"></p>\n<blockquote>\n<p><strong>Figure 10</strong>: Copy webhook URL.</p>\n</blockquote>\n<h2 id=\"finalize-freshchat-set-up\">Finalize Freshchat set up</h2>\n<ol>\n<li>Go back to Freshchat, then go to <strong>Settings → Webhooks</strong>.</li>\n<li>Turn on the webhook toggle which is placed in the top right.</li>\n<li>Then, paste the webhook URL in the <strong>Webhook</strong> field.</li>\n<li>Next, fill in a valid email address in the <strong>Failure Notifications</strong> field. It will enable you to receive the notification whenever there is a failure in the integration. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/J1zcFFXMA7Q7XSr6T7y0JQm35lf1qRP3BQdLcLLYiMAITd7C6FTn3wswh1iejXimeq4dCjZIWGmAy8jnF3zgybysyM8tobiiFZSdlTb--6FOD1tDMT_qE3mnLS5VFnnwNGflYISV\" alt=\"Alt Image 11\"></p>\n<blockquote>\n<p><strong>Figure 11</strong>: Set up webhook URL</p>\n</blockquote>\n<ol start=\"5\">\n<li>Finally, click on the <strong>Save</strong> button.</li>\n</ol>\n<p>It works! You can now share your newly created chatbot with your friends.</p>\n<p>Freshchat also has an agent handover feature. It is useful for creating a seamless engagement experience for your customer to interact with your agent to meet their needs. The agent handover flow is:</p>\n<ol>\n<li>End-users start a conversation with a chatbot.</li>\n<li>In the beginning or middle of a conversation, the end-user may request to be connected with any human-agents.</li>\n<li>Chatbot function will be paused if there’s an available agent. If there are none, chatbot will notify the user to make another request after a few minutes.</li>\n</ol>\n<p>This is the end of the guidance, you can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "title": "How to use Freshchat for your chatbot",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Freshchat&#x2019;s live chat software is the fastest way for you to engage with your website visitors, provide assistance, and convert leads to happy customers. In this section, we will learn to connect our bot with Freshchat. Let&#x2019;s get started.</p>",
      "meta": {
        "relativePath": "how-to-use-freshchat-for-your-chatbot.html",
        "createdAt": "2022-02-03T01:16:21.531Z",
        "lastModified": "2022-02-03T01:16:21.531Z",
        "size": 7866,
        "formattedSize": "7.7 KB"
      }
    },
    {
      "id": "how-to-use-instagram-messaging-automation-in-your-project",
      "contents": "<p>Automate your Instagram DM conversation using our flow builder in the Kata Platform. Create bots to reply to customers with text, images, quick replies, generic template, ice breaker, and (coming soon) sticker.</p>\n<h2 id=\"instagram-messaging-features\">Instagram Messaging Features</h2>\n<h3 id=\"instagram-story-reply\">Instagram Story Reply</h3>\n<h4 id=\"about\">About</h4>\n<p>You can send an automated reply to their DM whenever your customers engage you via Instagram Story.</p>\n<h4 id=\"how-to-use\">How to use</h4>\n<ol>\n<li><p>Go to the Kata Platform and select your project.</p>\n</li>\n<li><p>Click to <strong>Flow &gt; Conversation Flow &gt; Intent &gt; Create Intent.</strong></p>\n</li>\n<li><p>Choose <strong>Data</strong> for the <strong>Intent Type</strong> dropdown</p>\n</li>\n<li><p>Click <strong>Add Condition</strong> and fill in</p>\n<pre><code> payload.type == &quot;story_reply&quot;</code></pre></li>\n<li><p>Click Save</p>\n</li>\n</ol>\n<h3 id=\"instagram-story-mention\">Instagram Story Mention</h3>\n<h4 id=\"about-1\">About</h4>\n<p>Whenever your customers mention your account in their Instagram Story, you can send automated replies to their DM.</p>\n<div className=\"info\">\n    <img className=\"borderless\" src=\"/assets/images/icon-info.svg\" />\n    <p>\nImportant note:\n    <ul>\n        <li>Because Instagram Story will be deleted every 24 hours, it is expected that the story attachments will disappear too.</li>\n        <li>Chatbots cannot “read” the Instagram Story Mention content, but human agents can see the attachment. Tips: If your customers mention your account in the complaint context and your chatbot cannot satisfy them with the solutions, the agent can take over the conversation.</li>\n    </ul>\n</p>\n</div>\n\n<h4 id=\"how-to-use-1\">How to Use</h4>\n<ol>\n<li><p>Go to the Kata Platform and select your project.</p>\n</li>\n<li><p>Click to <strong>Flow &gt; Conversation Flow &gt; Intent &gt; Create Intent.</strong></p>\n</li>\n<li><p>Choose <strong>Data</strong> for the intent type dropdown</p>\n</li>\n<li><p>Click <strong>Add Condition</strong> and fill in</p>\n<pre><code> payload.type == &quot;story_mention&quot;</code></pre></li>\n<li><p>Click Save</p>\n</li>\n</ol>\n<h3 id=\"response-type\">Response Type</h3>\n<h4 id=\"sending-texts-reply\">Sending Texts Reply</h4>\n<p>Primary chatbot responses that show text to end-users.</p>\n<h5 id=\"how-to-use-2\">How to Use</h5>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Text.</strong> FYI, the Text limitation for Instagram automation is <strong>1,000 characters</strong> and allows for <strong>emoji</strong>.</li>\n<li>Click <strong>Create Action</strong> to finalize your action</li>\n</ol>\n<h4 id=\"sending-images-reply\">Sending Images Reply</h4>\n<p>Primary chatbot response to send an image to end-users</p>\n<h5 id=\"how-to-use-3\">How to Use</h5>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Text.</strong> FYI, the Text limitation for Instagram automation is <strong>1,000 characters</strong> and allows for <strong>emoji</strong>.</li>\n<li>Click <strong>Create Action</strong> to finalize your action</li>\n</ol>\n<h4 id=\"sending-quick-replies-reply\">Sending Quick Replies Reply</h4>\n<p>You can use this feature to show menu options to end-users and a good user experience to present to end-users your brand’s bot features. In Platform, this feature is named “Quick Reply,” which is placed in Flow &gt; Conversation Flow &gt; State &gt; Action List. Here is the screenshot of quick replies</p>\n<p><img src=\"https://lh3.googleusercontent.com/FDB-nKyk2yaNrbERm8-81PX7YXhbILHkStasPZupcPqTtMatKYnBDoXdDCnwCYhWMXkbtHa3pKblpf69wIfIjeTM4ntWHv07IFocTAvEVO780wsP02-bEeZzojM3pGzYCH8v2BRj\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 1:</strong> Quick replies in Instagram app.</p>\n</blockquote>\n<h5 id=\"how-to-use-4\">How to Use</h5>\n<ol>\n<li><p>Go to the Kata Platform and select your project.</p>\n</li>\n<li><p>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</p>\n</li>\n<li><p>Choose *<em>Quick Reply. *</em>The Quick Reply limitations are (1) Max. 13 quick replies, (2) Each quick reply only allowed 20 char before being truncated.</p>\n</li>\n<li><p>Mapping for Quick Reply with an accurate view to end-user can be seen as follows.</p>\n<p> <img src=\"https://lh5.googleusercontent.com/Lb3BrI0k8186fHdCu_38TfV5ndNmPqNIZJXt5F2gHxlZH5I0r3Rge0kljj-i-EhtFIDQ_iKuJFzJp5qlY7Yy7b765DKOJ4QD8sAVd-tHzNozkrRkhtfGh1bXMN3UZiUkBUa-WWGG\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 2:</strong> Quick replies components.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>Create Action</strong> to finalize your action</p>\n</li>\n</ol>\n<h4 id=\"sending-generic-template-carousel-type\">Sending Generic Template (“Carousel”) Type</h4>\n<p>This feature has an interactive way to show menus or options by adding images and buttons in one bubble. Even more, 1 bubble message can show multiple Generic Templates. Here is the screenshot</p>\n<p><img src=\"https://lh6.googleusercontent.com/K9W-9FuH-m8w68gOWNhYrBw9uOlORlHXzACQndnhLeGEImiMpOCmGZgQWH875HmYmJFfqsChVEiJxEY7W4RpdCm6XJboat_UMC9Zr9yTsIKZ_ud2FIrjIUwKi8gEvqeUyLct8Nsw\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> Generic template in Instagram app.</p>\n</blockquote>\n<h5 id=\"how-to-use-5\">How to Use</h5>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Carousel.</strong> FYI for generic template limitations are (1) Maximum 10 elements, (2) Maximum of 3 buttons per element, (3) Each element consists of The title to display in the template which has 80 character limit, the subtitle to display in the template has 80 character limit.</li>\n<li>Click <strong>Create Action</strong> to finalize your action</li>\n</ol>\n<h4 id=\"sending-ice-breaker-reply\">Sending Ice Breaker Reply</h4>\n<p>We probably felt confused the first time using a chatbot as end-users, especially if the bot hasn’t given apparent bot features. “Ice Breaker” solves this problem by showing a <em>getting started</em> on a few topics after the end-user adds the brand’s account.</p>\n<div className=\"info\">\n    <img className=\"borderless\" src=\"/assets/images/icon-info.svg\" />\n    <p>\nImportant: Ice Breaker is only shown for a first-time chat.\n</p>\n</div>\n\n<p>Here is the screenshot of the feature</p>\n<p><img src=\"https://lh5.googleusercontent.com/Ry1ZHq04kAwWutScBU4jOH5zkPKo5eMwCpCNTvd4TifEg4Q0N9ENcDt8kSkGptVXx9U02xHedzdc78zlUeh6SMekkYCcOnB_bLCHprMSupYf9my3a7CDkSKuQ5wehxOs5gtkWFr2\" alt=\"\"></p>\n<p>Figure 4: Ice breaker in Instagram app.</p>\n<h5 id=\"how-to-use-6\">How to Use</h5>\n<p>Ice Breaker setup must be done in <a href=\"/kata-omnichat/introduction/what-is-kata-omnichat\">Omnichat</a>. Hence, we need to create an Inbox and connect it to Instagram DM. Follow this tutorial on <a href=\"/kata-omnichat/getting-started/connect-your-instagram-messaging-inbox\">how to create an Inbox</a>.</p>\n<p>Finally, you’ve successfully created the Inbox. Let&#39;s jump to <a href=\"/kata-omnichat/manage-inbox-settings/set-up-ice-breaker\">creating the Ice Breaker tutorial</a>.</p>\n<h4 id=\"instagram-sticker-like-heart\">Instagram Sticker (“like heart”)</h4>\n<p>This feature allows your bot to send a sticker heart ❤️ and it is different from inline-like.</p>\n<pre><code>Tips: To develop this feature, you should know that your bot will reply with a “heart” whatever the customers ask. It’s somehow uncomfortable if your customer complains to your bot, then it shows a heart sticker.</code></pre><h5 id=\"how-to-use-7\">How to Use</h5>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Instagram Sticker.</strong></li>\n<li>Click <strong>Create</strong>.</li>\n</ol>\n<h3 id=\"available-soon\">Available Soon</h3>\n<h4 id=\"private-replies\">Private Replies</h4>\n<h5 id=\"about-2\">About</h5>\n<p>Your customers can receive automatic replies in their Instagram DMs (considered “private”) whenever they comment on your brand Instagram post. It is a powerful tool to reach your customer faster and privately whenever they complain or praise your brand.</p>\n<h5 id=\"how-to-use-8\">How to Use</h5>\n<p>You will apply it in the <strong>intent</strong> feature to trigger automatic replies from Instagram Posts. We will update further announcements in this documentation or newsletter.</p>\n<p><img src=\"https://lh5.googleusercontent.com/KQ7PDb-wX0SnD8Od2gZ1LrDyvtk7NIg2a4I5l4KKT2hRxbVtRAu0fG5P-L2hl5qFzAKOGp7Zu5YXaHtnStwX__vdlkcPzjpMJcYlTdlSBxygRgM7tjXdiCSvM0hnV-6A1dVBCS_i\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> Generic template in Instagram app.</p>\n</blockquote>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<p>Go to the tutorial for <a href=\"/tutorial/create-igdm-bot-handover-from-chatbot-to-agent\">creating a simple Instagram DM chatbot</a>.</p>\n<h2 id=\"faq\">FAQ</h2>\n<h3 id=\"i-have-2-igdm-bot-actions-image-type-and-text-type-the-first-response-will-show-an-image-then-a-text-however-after-i-deploy-the-ig-channel-it-offers-a-text-then-an-image-why-did-it-happen\">I have 2 IGDM bot actions: image type and text type. The first response will show an image, then a text. However, after I deploy the IG channel, it offers a text, then an image. Why did it happen?</h3>\n<p>A: Because the API calls limit in Instagram (Facebook policy link) has a maximum of 5 outgoing messages in 1 second. Hence, loading the image and showing it to the end-user took a delay in between, and the impacted image action type didn’t show in the correct order. You cannot avoid it. We suggest you put a good UX conversation to display the image between text since the image will have an incorrect order than the Platform emulator.</p>\n<p>It is the end of the guidance. You can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "title": "How to use Instagram Messaging automation in your project",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Automate your Instagram DM conversation using our flow builder in the Kata Platform. Create bots to reply to customers with text, images, quick replies, generic template, ice breaker, and (coming soon) sticker.</p>",
      "meta": {
        "relativePath": "how-to-use-instagram-messaging-automation-in-your-project.html",
        "createdAt": "2022-02-03T01:16:26.777Z",
        "lastModified": "2022-02-03T01:16:26.777Z",
        "size": 8532,
        "formattedSize": "8.3 KB"
      }
    },
    {
      "id": "how-to-use-qiscus-omnichannel-to-your-chatbot",
      "contents": "<p>Qiscus is an AI compliant, secure and flexible chat SDK for apps and websites. They also provide a multichannel customer service chat solution that is now popular. This section will learn how to connect our bot with Qiscus through the following steps.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<ol>\n<li>Click the <strong>Deploy</strong> menu in the left sidebar.</li>\n<li>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</li>\n<li>Choose any deployment version you want to deploy and fill in the changelog.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/dvpyUOaDxzu0wbCpVdUwDWFrXAuphte-hnudP4Z7jPMZCle7hSIe3RVnQoH2O-NSxfPt6VZAyTfgqvS6ZnZabNfL447X4-UtEZJwpsxETPukgkIx0S--uQxMhhfW05P8OuGfm-m7\" alt=\"Alt Image 1\"></p>\n<blockquote>\n<p><strong>Figure 1</strong>: Create a new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment.</li>\n</ol>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li>Go to the <strong>Deployments &gt; Environment</strong> menu.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/88Pxs5L8JuAmTCQNe8dxJwgPOFZVY72AJ3Vk_rdZqz7xKMnuMGT4En5cMB5kuNEl15BewuIbI54BwOcvpoIvx2f4rf1PfYba_XWGxxglpUGdGwvoWjwGEVmiFlZbrP8lwqUkp3v1\" alt=\"Alt Image 2\"></p>\n<blockquote>\n<p><strong>Figure 2</strong>: Set up the environment, then set up the Qiscus channel.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</li>\n<li>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</li>\n<li>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS. Learn more about CMS.</li>\n<li>Click <strong>Create</strong> to create the environment.</li>\n<li>Created environment now has a <strong>Create Channel</strong> button.</li>\n</ol>\n<p>Continue to choose Freshchat as a chatbot channel.</p>\n<ol>\n<li>Click the <strong>Create Channel</strong> button to start adding channels to the environment. It will open up the Channel menu within the environment.</li>\n<li>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. It will show a menu to set up the channel.</li>\n<li>Choose <strong>Qiscus</strong> in Channel Type.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/ls0ZhBnaEqJbd0EzEF33lttilhDqJwqauIK-FNc8Qrqzdl1J7I0KyMlODc9YoIhi8cdTlWdVLynndKfSJSQyOFxJJK3rFXiNPqVdHvxNDBNrmzH62U4Eh3hms8puCFVqT8AOTrm9\" alt=\"Alt Image 3\"></p>\n<blockquote>\n<p><strong>Figure 3</strong>: Create Qiscus channel</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Functionality</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Name</td>\n<td>Your channel name</td>\n<td>Max. 30 characters must contain only alphanumeric characters (A-Z, a-z, 0-9), <code>-</code>, and <code>_</code>.</td>\n</tr>\n<tr>\n<td>Secret Key</td>\n<td>Key credential from Qiscus</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Bot Email</td>\n<td>Registered email that has Qiscus inbox for chatbot</td>\n<td>Email only</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>Registered email that has Qiscus inbox for chatbot</td>\n<td>HTTPS website only</td>\n</tr>\n</tbody></table>\n<p>To fill in the secret key, bot email, and URL, you need to set up a Qiscus inbox. So, let’s start.</p>\n<h2 id=\"register-and-login-to-qiscus\">Register and login to Qiscus</h2>\n<ol>\n<li>Register to Qiscus Multichannel Chat Website (<a href=\"https://multichannel.qiscus.com/\" target=\"_blank\"><span>http</span>s://multichannel.qiscus.com/</a>) to create a new app. You will be asked to fill in the information regarding your account.</li>\n<li>As soon as you sign up, you will get an email verification from Qiscus Multichannel Chat that you need to verify before using it. So check your email and verify it.</li>\n<li>After verifying your account, you can log into the Qiscus Multichannel Chat dashboard via the login page. Please fill in your credentials to get into the dashboard.</li>\n<li>Then, go to the <strong>Integration</strong> page.</li>\n</ol>\n<h2 id=\"set-up-qiscus-integration\">Set up Qiscus integration</h2>\n<ol>\n<li>Enable the “<strong>Qiscus Widget</strong>” tab like shown in the picture below.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/1GJjJ9_KiU0o347aPuyETeMSGKtikUywh6L0K1eZrawVDwdyLtJV7oy4cOMa7x-yIY1aobagL1X77AcAUzBp6mZa4WiYOislTVZZC2WgJ11ZkK2sZZzAA_ZegADSYsUcDHmTi8O6\" alt=\"Alt Image 4\"></p>\n<blockquote>\n<p><strong>Figure 4</strong>: Enable Qiscus widget.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Copy the snippet code shown on the page and paste it into your website HTML. You can open your HTML later after you integrate the bot.</li>\n<li>Next, you need to integrate the bot by enabling the “<strong>Bot Integration</strong>” in the <strong>Integration Page</strong>.</li>\n<li>On this page, you will see Agent ID, App ID, Qiscus Secret Key, and URL required in Kata Platform to deploy the Qiscus bot. Copy all fields.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/HX8bgSOSiOHHrm2pVT-5K-RLchYTq_3AFEAPN2GLs3sX3NjdSNGiYrU4gwbsM_MfL0oBfG2nrbI_AHMYC6rRz8Ml-6D7d306dbEydUsyHEIysfa8JrZp2XvCen0dEzapgdT-_qhE\" alt=\"Alt Image 5\"></p>\n<blockquote>\n<p><strong>Figure 5</strong>: Bot integration</p>\n</blockquote>\n<p>The next step is to paste the Agent ID, App ID, Qiscus Secret Key, and URL from Qiscus to the Kata Platform.</p>\n<ol>\n<li>Go back to Kata Platform (<a href=\"https://platform.kata.ai\" target=\"_blank\"><span>http</span>s://platform.kata.ai</a>)</li>\n<li>Paste the Agent ID, App ID, Qiscus Secret Key, and URL there. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/C8qEgXagNmauJuTZXU2R3X3RMfKRo7Kd4Y_R-At1d6Ad9oTqmU-KhDBZeVPwo_3fyjVNUL5ydxIUQudLPX3gZh3YrtjpzMZHDTBwuwNwy-hRNK9OAO5fbg7buZ2jgGJdn5WaD00R\" alt=\"Alt Image 6\"></p>\n<blockquote>\n<p><strong>Figure 6</strong>: Paste the Agent ID, App ID, Qiscus Secret Key, and URL into channel configuration.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>Create</strong> to generate the webhook. You can see a webhook URL from the generated channel.</li>\n<li>Click the copy icon to copy the webhook URL.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/-bm2p8jYZsLQLLE4ZeHgXsJQtaQe09fBDtM2gNjuLhPFw4XVUzrudQPxCk8Ek8V3R8vduYAY_1cwsJpAnWDzRzHj1ABeqbst7Cq2J321Gx7RXtkhrAz3TvwCeAfL37B9L5i8JzxD\" alt=\"Alt Image 7\"></p>\n<blockquote>\n<p><strong>Figure 7</strong>: Copy webhook URL.</p>\n</blockquote>\n<h2 id=\"finalize-qiscus-set-up\">Finalize Qiscus set up</h2>\n<ol>\n<li>Go back to Qiscus dashboard <a href=\"https://multichannel.qiscus.com/web/welcome\" target=\"_blank\"><span>http</span>s://multichannel.qiscus.com/web/welcome</a></li>\n<li>Then, go to the “<strong>Bot Integration</strong>” tab. Make sure you’ve enabled it.</li>\n<li>Next, paste the webhook URL in “Bot Webhook URL.”</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/4prVthdWJHkoQZE5GnIi8BmgPzTleXHdCE5XOqd69NmU0ieECWMQc63_jAk71eg-_JfeSskuRt9-Q7knbZT_9ASphpKsfp0eRNbOzcH0j1kyvDLT9Hqsucg0dR7IwJ0iUNKwvX66\" alt=\"Alt Image 8\"></p>\n<blockquote>\n<p><strong>Figure 8</strong>: Paste webhook URL</p>\n</blockquote>\n<ol start=\"4\">\n<li>Finally, click “<strong>Connect</strong>”.</li>\n</ol>\n<p>This is the end of the guidance. You can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "title": "How to use Qiscus omnichannel to your chatbot",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Qiscus is an AI compliant, secure and flexible chat SDK for apps and websites. They also provide a multichannel customer service chat solution that is now popular. This section will learn how to connect our bot with Qiscus through the following steps.</p>",
      "meta": {
        "relativePath": "how-to-use-qiscus-omnichannel-to-your-chatbot.html",
        "createdAt": "2022-02-03T01:16:29.610Z",
        "lastModified": "2022-02-03T01:16:29.610Z",
        "size": 6872,
        "formattedSize": "6.7 KB"
      }
    },
    {
      "id": "how-to-use-slack-as-your-chatbot-messaging-platform",
      "contents": "<p>Slack is a messaging platform that is commonly used for office and community. In this tutorial, you will learn how to deploy your chatbot to the Slack channel. So, let’s get started.</p>\n<h2 id=\"deploy-your-chatbot\">Deploy your chatbot</h2>\n<ol>\n<li>Click <strong>Deploy</strong> menu in the left sidebar</li>\n<li>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</li>\n<li>Choose any deployment version you want to deploy and fill in the changelog.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/7qQL-bT11-PszbC2Y92kcZ_Avayic4bKR4k82jquDTH2_iRs6a6ZL0b7gN8-1cqfvLEtUYZl_l20Tq885jwkx4lU8lI_Gs6lpKD42MCJoP7OQqIttgLTk4O_i6hQiRj1hlE6aPwH\" alt=\"Alt Image 1\"></p>\n<blockquote>\n<p><strong>Figure 1</strong>: Create a new deployment</p>\n</blockquote>\n<ol start=\"4\">\n<li>Click <strong>Submit</strong> to finish the deployment</li>\n</ol>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li>Go to the <strong>Deployments &gt; Environment</strong> menu.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/wRHYa5fPbW012q3q7JqosoR9qq5R72aafskrbpILMMs2akEXy50LRF5uTJ2XjYBou26sv8s3K6p0K-Zy1oySuvP5k1F6wGwJrXJGjRuZmHvrJFIny_jjED9ZxrVvBZU06yHbaF2A\" alt=\"Alt Image 2\"></p>\n<blockquote>\n<p><strong>Figure 2</strong>: Set up environment, then set up Slack channel</p>\n</blockquote>\n<ol start=\"2\">\n<li>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</li>\n<li>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</li>\n<li>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS. Learn more about CMS.</li>\n<li>Click <strong>Create</strong> to create the environment.</li>\n<li>Created environment now has a <strong>Create Channel</strong> button.</li>\n</ol>\n<p>Continue to choose Slack as a chatbot channel.</p>\n<ol>\n<li>Click the <strong>Create Channel</strong> button to start adding channels to the environment. It will open up the Channel menu within the environment.</li>\n<li>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. A menu to set up the channel will be shown.</li>\n<li>Choose <strong>Slack</strong> in Channel Type.</li>\n</ol>\n<p><img src=\"https://lh6.googleusercontent.com/z42cdweupNpQZMC-XPd-h1nTnldKR6aqXiHyns0CLwKM6fJOWL_KETXxjnqR8JGQniuzgSTuk_6n6NWJ25DwJlsAFdSaLD-wEFMB8TyJEG32h4buUPbgnHslNGTilzpi_sIRQCsl\" alt=\"Alt Image 3\"></p>\n<blockquote>\n<p><strong>Figure 3</strong>: Create Slack channel</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Functionality</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Name</td>\n<td>Your channel name</td>\n<td>Max. 30 characters must contain only alphanumeric characters (A-Z, a-z, 0-9), <code>-</code>, and <code>_</code>.</td>\n</tr>\n<tr>\n<td>Bot Token</td>\n<td>Slack token</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"create-slack-app\">Create Slack app</h2>\n<ol>\n<li>First thing first, you need to sign in into your Slack Team to create a new app and get its token. After logging in, open this URL <a href=\"https://api.slack.com/slack-apps\" target=\"_blank\"><span>http</span>s://api.slack.com/slack-apps</a>.</li>\n<li>Click “<strong>Start here</strong>” button, then click on “<strong>Create a Slack app</strong>” button.</li>\n<li>Fill in the required fields. Next, choose your “<strong>Development Slack Team</strong>”.</li>\n<li>Click the “<strong>Create App</strong>” button.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/fU8j2fKw-F614Lw6RF6TrdplgKYn5Df4x_xjZxBSdYxDfQL55ONoXV-DeZ6x1vJA_zIuxAQYybHJFPqlufykCEMb93bAq6Jb1CTWk8Vt1_2Wk_J8Y_pPICtuq1FxUbH3uTlnFAlV\" alt=\"Alt Image 4\"></p>\n<blockquote>\n<p><strong>Figure 4</strong>: Create a Slack app</p>\n</blockquote>\n<ol start=\"5\">\n<li>From “<strong>Basic Information</strong>” in the App Credentials section, you can see the Verification Token. You will use it later to deploy our bot.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/-GUXRR6JucSe8NT06Fnk2nEYwdaueZvO5e0ulm97uWMEiK_wfsO3mR3EOoYeS7Bmd-9ZhYaFEGirwRGA3tN5_eAoc3ddHxzaarje3fNlk-esD8ctJHHkBAYQqeQAd81NOivhJLVC\" alt=\"Alt Image 5\"></p>\n<blockquote>\n<p><strong>Figure 5</strong>: Verification Token</p>\n</blockquote>\n<ol start=\"6\">\n<li>Open “<strong>OAuth &amp; Permissions</strong>” in the “<strong>Scopes</strong>” section. You should fill in the scope permission by adding below scopes.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/kRrL0lMntvMUoeKHVoiT8nJHXd6XORHEIIde0y4Me7wjw_I5-0TazRcCtV3caRif-X09sltZHyn1OA2D96pETq1ukIQBR0sxpikQOkrl_1mubBw4OyDFiswwlZYBSBESdVHLAHY4\" alt=\"Alt Image 6\"></p>\n<blockquote>\n<p><strong>Figure 6</strong>: Filling Scopes</p>\n</blockquote>\n<ol start=\"7\">\n<li>Open “<strong>Bot User</strong>” in Features from the sidebar menu. Fill the “<strong>Display name</strong>” and “<strong>Default username</strong>” of your bot. Also, turn on the “<strong>Always Show My Bot as Online</strong>” toggle.</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/kRrL0lMntvMUoeKHVoiT8nJHXd6XORHEIIde0y4Me7wjw_I5-0TazRcCtV3caRif-X09sltZHyn1OA2D96pETq1ukIQBR0sxpikQOkrl_1mubBw4OyDFiswwlZYBSBESdVHLAHY4\" alt=\"Alt Image 7\"></p>\n<blockquote>\n<p><strong>Figure 7</strong>: Bot User</p>\n</blockquote>\n<ol start=\"8\">\n<li>Click the “<strong>Add Bot User</strong>” button to finish.</li>\n<li>Go back to “<strong>OAuth &amp; Permissions</strong>”, then select “<strong>Install App to Workspace</strong>”</li>\n</ol>\n<p><img src=\"https://lh4.googleusercontent.com/YRx_xwpQ5w5qbQsVVBk5NHP6TRB0V5gM-CyDL_E0rc_CSSSVgrSsg2lfL5JlVCQvoiy5rfAO0hlf0e0UJWlx9bVXbIxl6XEwKuFcdqNz4hGkcCM4swIFrg0K3qRfOMwcNhACPujH\" alt=\"Alt Image 8\"></p>\n<blockquote>\n<p><strong>Figure 8</strong>: Install App to Workspace.</p>\n</blockquote>\n<ol start=\"10\">\n<li>Click the “<strong>Allow</strong>” button.</li>\n<li>Still in the “Oauth &amp; Permissions”, you will get “OAuth Access Token” and “Bot User OAuth Access Token”. Copy this “Bot User OAuth Access Token” to deploy our bot using the Kata Platform.</li>\n</ol>\n<p>Next step is to paste the access token from Slack to the Kata Platform.</p>\n<ol>\n<li>Go back to Kata Platform (<a href=\"https://platform.kata.ai\" target=\"_blank\"><span>http</span>s://platform.kata.ai</a>)</li>\n<li>Paste the App Secret there. Here is the example:</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/58FSMuw7dIekqFd2-fWXzIy8VFYh8gNzCroSzXUNPHqN7lfSfJGwGIoFYHH77nS89CAWa4cP1gG2jEO24zHniczhSa6f6-Pe_zDPs8hwU0NXjXzJvHBnLOzrsf-QTR6N20ADjfEh\" alt=\"Alt Image 9\"></p>\n<blockquote>\n<p><strong>Figure 9</strong>: Paste App Secret from Slack here.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Click <strong>Create</strong> to generate the webhook. You can see a webhook URL from the generated channel.</li>\n<li>Click the copy icon to copy the webhook URL.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/LjuSizrX-Bri5iwPnXU5zsVXyAMkfon9WlZI0UzrjIcOyZw32oTTlNK9XI8FoefAGPQKGKMvJyUBJaPCemNTKqg3isHxGwRbMoR8HRKt5UScJmgZyOjygdhieaTlrwkvmiQv39A-\" alt=\"Alt Image 10\"></p>\n<blockquote>\n<p><strong>Figure 10</strong>: Copy webhook URL.</p>\n</blockquote>\n<h2 id=\"finalize-slack-set-up\">Finalize Slack set up</h2>\n<ol>\n<li>Go back to Slack <a href=\"https://api.slack.com/slack-apps\" target=\"_blank\"><span>http</span>s://api.slack.com/slack-apps</a></li>\n<li>Then, click on the “<strong>Event Subscriptions</strong>” tab.</li>\n</ol>\n<p><img src=\"https://lh3.googleusercontent.com/8JKGdQSy6WShmem13i7ePHcY0jKmicQ6eWFFVyAyGhX2tG5WoJXPOxBhRUb5BKlLa4qGGX4pRZuXaPmBAltLddT2uqXF36SklENSvoMy2_rVZZwxoolCePS85FM22DXCeBIqKZ0p\" alt=\"Alt Image 11\"></p>\n<blockquote>\n<p><strong>Figure 11</strong>: Event Subscription menu.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Next, turn on the “<strong>Enable Events</strong>” toggle.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/Lw33b72gIysW0BF6ow-GZq7jod9VMtdBrd1FGen5Ni0UXJckW4O1LblhGmV2JXBURGVHqZUGCi86wYEpYv0vAf5rVOMR3dW-gK3j319rsSnqA-Ic0cx_Oga4qjJZMUxULromKCxR\" alt=\"Alt Image 12\"></p>\n<blockquote>\n<p><strong>Figure 12</strong>: Turn on Enable Events toggle.</p>\n</blockquote>\n<ol start=\"4\">\n<li>You will see the “<strong>Request URL</strong>” field. Then, paste the webhook URL.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/FORhM2xupEMXcOu_F0F2I-1xEbLRQv-ETFKHq1SihMu8X5Oobq9Cb04pDNef2eVHP9UxFgP4THe1KofM85Yld12lZHvWtAIIfxkWeqVRQfyiXQgLMqnqISuWpeCTXIMxLEPxepSi\" alt=\"ALt Iamge 13\"></p>\n<blockquote>\n<p><strong>Figure 13</strong>: Request URL</p>\n</blockquote>\n<ol start=\"5\">\n<li>Expand the “<strong>Subscribe to bot events</strong>” then add the selected User Event like in the below image.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/FORhM2xupEMXcOu_F0F2I-1xEbLRQv-ETFKHq1SihMu8X5Oobq9Cb04pDNef2eVHP9UxFgP4THe1KofM85Yld12lZHvWtAIIfxkWeqVRQfyiXQgLMqnqISuWpeCTXIMxLEPxepSi\" alt=\"Alt Image 14\"></p>\n<blockquote>\n<p><strong>Figure 14</strong>: Subscribe bot events</p>\n</blockquote>\n<ol start=\"6\">\n<li>Now you can search for your bot in your slack Workspace.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/FORhM2xupEMXcOu_F0F2I-1xEbLRQv-ETFKHq1SihMu8X5Oobq9Cb04pDNef2eVHP9UxFgP4THe1KofM85Yld12lZHvWtAIIfxkWeqVRQfyiXQgLMqnqISuWpeCTXIMxLEPxepSi\" alt=\"Alt Image 15\"></p>\n<blockquote>\n<p><strong>Figure 15</strong>: Workspace Search</p>\n</blockquote>\n<ol start=\"7\">\n<li>Finally, you can now share your newly created chatbot with your friends.</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/nSm61wJbh3swnFC1cc80yOn7JhqeSLvlwojzISltdOWhh-CvvlXHgbDBV4k_vjAQWfk_-F72geHBSOhmahBmJETQujSSM05rBkObTEKm169z9lt6QDZyMjItdoQ69eJcDG3yg-pd\" alt=\"Alt Image 16\"></p>\n<blockquote>\n<p><strong>Figure 16</strong>: Successfully deployed Slack bot</p>\n</blockquote>\n<p>This is the end of the guidance, you can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "title": "How to use Slack as your chatbot messaging platform",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Slack is a messaging platform that is commonly used for office and community. In this tutorial, you will learn how to deploy your chatbot to the Slack channel. So, let&#x2019;s get started.</p>",
      "meta": {
        "relativePath": "how-to-use-slack-as-your-chatbot-messaging-platform.html",
        "createdAt": "2022-02-03T01:16:34.056Z",
        "lastModified": "2022-02-03T01:16:34.056Z",
        "size": 8407,
        "formattedSize": "8.2 KB"
      }
    },
    {
      "id": "how-to-use-facebook-messenger-for-your-chatbot",
      "contents": "<p>Telegram is a free messaging platform that is commonly used for chatbot deployment. This tutorial will learn how to deploy your chatbot in Telegram. So, let’s get started.</p>\n<h2 id=\"create-a-deployment\">Create a deployment</h2>\n<p>Deployment is a step to merge all Revisions in Flow, NLU, and CMS so that you can integrate bots into the channel. Before starting channel integration, chatbots must at least have 1 deployment.</p>\n<ol>\n<li><p>In the sidebar, choose the <strong>Deploy</strong> menu. Then, select <strong>Overview</strong>.</p>\n<p><img src=\"https://lh3.googleusercontent.com/X9ozLBwqlS0wd328Z8SaOVshbP5ChTdvFfxlvHDiz11Jfy8HQ5dblvX7-82XXX7tFGNoLf1cNuEQf4yzDXVXijCVRliSAtv5OfSplLK_qADAW4tjlpPIhUrDGzhpLNjq0fmEjpot\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 1:</strong> Deploy menu interface.</p>\n</blockquote>\n</li>\n<li><p>Click the <strong>New Deployment</strong> button. Then it will show a form on the right screen.</p>\n</li>\n<li><p>Choose the deployment version. In the Kata Platform, there are 3 deployment versions which are:</p>\n<ul>\n<li>Major to deploy significant changes, such as change chatbot use-case.</li>\n<li>Minor to deploy medium changes, such as adding new features in your chatbot.</li>\n<li>Patch to deploy small changes, such as change copy in action.</li>\n</ul>\n<h2 id=\"\"><img src=\"https://lh6.googleusercontent.com/RqD2SzTdKBGSNMadqHufkUqiTsiw7XC-rUVcZtYc_nvy_mexuKa9R8L7lBkrUs-JkCUhXCZeqjHKyL47kfrJJrOu86YoCa8srTo0mNHVdu_d3uIONi7lEGtH43hJHy4hoohxtHG9\" alt=\"\"></h2>\n<blockquote>\n<p><strong>Figure 2:</strong> Create a new deployment</p>\n</blockquote>\n</li>\n<li><p>Then, click the <strong>Submit</strong> button. If deployment is successful, then the interface will be shown like this.</p>\n<p><img src=\"https://lh5.googleusercontent.com/2cDEriJ68_pc_A8t2o_D23uQxxog93MbCbnzln8rIvGr39-wLDEpr6xg2Sjsr0MDFnLbRe3kDFcA4u5Mgdo-NRuDBtssEDRAsrxuoxEWDCVj8x7QOqqywtck31gTyeMW8H5WNSKR\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> Deployment has been created.</p>\n</blockquote>\n</li>\n</ol>\n<p>The step after creating a deployment is to create an environment. An environment is a zone in computer science that provides a place to run integrated applications. For example, Kata Platform has 3 environments: development, staging, and production.</p>\n<ol>\n<li><p>Choose the menu <strong>Deploy</strong>, then choose <strong>Environment</strong>.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/jVbMvnS2xyjgpH9Apo5bLpPzBuauhQ2L5ApfbUuosdDc-ebK7hOA-yoX1ewo3daEfVC7oxhVe5laUBX9SA2uDhGbEQHaQ9Wo_2tFKJha_mkNth-fSAxnLjz3WTwuGNJwNoH7Dd_B\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 4:</strong> Environment interface.</p>\n</blockquote>\n</li>\n<li><p>In this step, you will create a Development environment. Click the button <strong>Create Environment</strong> in the <strong>Development</strong> card.</p>\n</li>\n<li><p>Fill in the environment, then click <strong>Create</strong>.</p>\n<p> <img src=\"https://lh3.googleusercontent.com/CWX4zolKmj8c7SEaIjK5xGxJCVjcCHs2I_G_kXZEq8NY_8WyyXIINijBC4RAr6mocFSltUTi-uOSy7pr6miBwCsRV44Nn4ze8ArPUawRIR4Qs_MfxaNA-_hvqk8SCeiZEcmDidTe\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 5:</strong> Create an environment interface.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"integration-to-a-channel\">Integration to a channel</h2>\n<p>This step will create a chatbot integration with the Telegram messaging platform. Telegram is a free messaging platform to deploy chatbots with a simple setup.</p>\n<ol>\n<li><p>In the <strong>Deploy &gt; Environment</strong>, click the <strong>Create Channel</strong> button.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/ezfc46LuzaXJnF9VKEhSKqY5zodilbzvy_2Q7rCFvRzPVIidshrDGEQKs8Rie-lBp0oIRtOtt-tzqDTu0Nrdjfipobp3yPYcRzSu1cSjM0MhQYm9YqrIQnKYc_K0Uu3XyqEGvJVv\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 6:</strong> Button deploys channel in a Development environment.</p>\n</blockquote>\n</li>\n<li><p>You will redirect to the <strong>Create Channel</strong> page. Click the <strong>“+ Create Channel”</strong> button to create a new channel.</p>\n</li>\n<li><p>Fill in the channel name and choose type as Telegram. To fill in the Bot User OAuth Access Token field, we must set up a chatbot in Telegram first. The next step is to open your Telegram application and log in.</p>\n</li>\n</ol>\n<p>Before you start, you need a Telegram account already registered and logged in to your application.</p>\n<h2 id=\"connect-chatbot-to-telegram\">Connect chatbot to Telegram</h2>\n<ol>\n<li><p>The first step is to register your bot to the BotFather account.</p>\n<p><img src=\"https://lh3.googleusercontent.com/YUTPEWYP7DZtrbYunLTLjgP4lHZQRoP2xmmWcKOOvG6IWOL1s_u3qIvG6QwNxTxbjY0MMReJXdfrEq3RQXQz7PtcSAvvfEvakVlosgSr1Y0hv6qV2Zookr_VX96eZAIclXpG_ZIE\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 7:</strong> Search BotFather account.</p>\n</blockquote>\n</li>\n<li><p>Type <code>/newbot</code> and BotFather will ask for your chatbot name. Feel free to use any name you like.</p>\n</li>\n<li><p>After that, you will be asked to enter your chatbot username. Remember that your bot username has to either start or end with <code>bot</code>.</p>\n</li>\n<li><p>Once finished, BotFather will respond with a bot token to access the Telegram Bot API.</p>\n<p><img src=\"https://lh4.googleusercontent.com/sbcbsZbqbZbyyuJ1euujSA_QinUVezu8xkxYtBMy5Wza9KiPSTqvNDejGwUWITCPrHNmq9D2q1MzfpVfbrKzRS76le6maTEVCwIKFBWB70hKRP_ULUvvLWWRQFs0aLJtZSX8S9aJ\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 8:</strong> Telegram shows bot token.</p>\n</blockquote>\n</li>\n<li><p>Go back to Platform, then copy the bot access token into the channel drawer.</p>\n<p><img src=\"https://lh5.googleusercontent.com/VtgDI37yuKNJk1jgvg3eLY7FLSX1yhteGWsk4IMEAXkTS_HqdpLrm1Xiwry_06BdA3OHXfQwxNNSuCRIK1FsDrmlN4wIsgslUUX7d4d8cJa-p0twL7-skg9pfQfK4P8U57Md_LyA\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 9:</strong> Input bot access token.</p>\n</blockquote>\n</li>\n<li><p>Click <strong>Create</strong> to get a webhook from the Kata Platform. Then, click the copy button to copy the webhook URL.</p>\n</li>\n<li><p>Click on the webhook link to <strong>View</strong> <strong>Channel</strong> detail. It will show a drawer to copy the access token and webhook URL.</p>\n</li>\n</ol>\n<p><img src=\"https://lh5.googleusercontent.com/7E3dcEqMdAztnC5yC1yn6Ale-asPsGBdafV_lYgPH3HtWLsNIrX1OLHEZ7MXSmQqfVJJF67-JZivfbsmBw_xYZfA7cpHpREzlFOmM_sjkqpquFFrUM5Esw-fhCC-wZZdzAvNHzB6\" alt=\"\"></p>\n<blockquote>\n<p>Figure 10: View Channel detail</p>\n</blockquote>\n<ol start=\"8\">\n<li>Next, open a new tab on your browser and enter this URL. Change <code>{my_bot_token}</code> into your own bot token. Also, paste <code>{kata_platform_webhook_url}</code>with the copied webhook URL.</li>\n</ol>\n<pre><code>https://api.telegram.org/bot{my_bot_token}/setWebhook?url={kata_platform_webhook_url}</code></pre><ol start=\"9\">\n<li><p>Click “Go” or press Enter on the keyboard.</p>\n<p><img src=\"https://lh5.googleusercontent.com/U2G3zkuhNSvRV6jRNHj9K37fH1R_5Tujv9uG3s0KWsCWqPOasDZvoGxinOnWqbOi0khiyxtNVL_ObfBQMWdlf15Bi0U7FQ67V3Tyavg_wQTfA-xQ4bzRxzjg04JJ8D7mwQ4-33cN\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 11:</strong> Telegram bot has successfully connected.</p>\n</blockquote>\n</li>\n<li><p>If you see the message “Webhook was set,” you’re all set! Let’s try our chatbot. Open Telegram on the desktop or mobile, and start chatting with your bot.</p>\n<p><img src=\"https://lh3.googleusercontent.com/Byu9CQWZ8PEFCth-eH5bikeueYDvb0z8wSTvsL2SG1NMqEcN9VeO95UQdf1z-xZRPFmiLxQeCsy6d0YiigfJiNkpkMEdzgvOxeBAEizAwlq2OnXv0hbJK6Z_i2fpeduHdTtuw96g\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 12:</strong> Testing “Hello” in Telegram chatbot</p>\n</blockquote>\n</li>\n</ol>\n<p>It is the end of this guidance. You can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "product": "kata-platform",
      "title": "How to use Telegram as your chatbot messaging platform",
      "date": "2021-08-26T07:00:00+07:00",
      "excerpt": "<p>Telegram is a free messaging platform that is commonly used for chatbot deployment. This tutorial will learn how to deploy your chatbot in Telegram. So, let&#x2019;s get started.</p>",
      "meta": {
        "relativePath": "how-to-use-telegram-as-your-chatbox-messaging-platform.html",
        "createdAt": "2022-02-03T01:16:44.408Z",
        "lastModified": "2022-02-03T01:16:44.408Z",
        "size": 6742,
        "formattedSize": "6.6 KB"
      }
    },
    {
      "id": "how-to-use-whatsapp-business-api-in-my-chatbot",
      "contents": "<p>Automate your WhatsApp conversation by using our flow builder in the Kata Platform. Create bots to reply to end-users with several bot action types:</p>\n<ul>\n<li>Text</li>\n<li>Image and Image with Caption</li>\n<li>🎉 NEW 🎉 List Message</li>\n<li>🎉 NEW 🎉 Reply Button</li>\n</ul>\n<h2 id=\"bot-response-types\">Bot response types</h2>\n<h3 id=\"text\">Text</h3>\n<h4 id=\"about\">About</h4>\n<p>Reply to your chatbot users (“end-users”) by sending them text as a primary response.</p>\n<p>Here is an example of a text response to end-users.</p>\n<p><img src=\"https://lh5.googleusercontent.com/DYwYgnnaIw2U_ECFHxVrEfezYRutiHycQdKMjeg7Ywr4CrhB4fjqfnnuENz7sJ6fgn0tXTbwiOCWQOFNB1p789s4W4AcAWkRxpoW6abD3Q7fplZ-SOg05lz8m7W75cG2m1RXuW6p\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 1:</strong> Action type text in WhatsApp.</p>\n</blockquote>\n<h4 id=\"how-to-use\">How to Use</h4>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Text</strong>and enter the text you want to send.</li>\n<li>Click <strong>Create Action</strong> to finalize your action.</li>\n</ol>\n<h3 id=\"image-and-image-with-caption\">Image and Image with Caption</h3>\n<h4 id=\"about-1\">About</h4>\n<p>Send images to your users on WhatsApp. You can also add a caption for the image.</p>\n<p>Here is an example of image response and using caption to end-users.</p>\n<p><img src=\"https://lh4.googleusercontent.com/156Ws2BK3YI8JdZK24qHbeKBr1V8kokQG0jH_wIWMSm92VmAY3thqzHSDgJEkuNRezcDuXuZ7Dba2iL5GAsQ8hkZuOFppLnyXnfXkl67t3J0BNMQG15kHzkxWsFiLj-juWJrEUIv\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 2:</strong> Image with Caption Example</p>\n</blockquote>\n<h4 id=\"how-to-use-1\">How to Use</h4>\n<ol>\n<li>Go to the Kata Platform and select your project.</li>\n<li>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</li>\n<li>Choose <strong>Image</strong> and enter the Image and Thumbnail URL.</li>\n<li>The image caption is optional.</li>\n<li>Click <strong>Create Action</strong> to finalize your action.</li>\n</ol>\n<h3 id=\"🎉-new-🎉-list-message\">🎉 NEW 🎉 List Message</h3>\n<h4 id=\"about-2\">About</h4>\n<p>Send a list of options your users can choose. You can provide up to 10 options (“rows”) from a List Message.</p>\n<p>Here is an example of a List Message response to end-users.</p>\n<p><img src=\"https://lh3.googleusercontent.com/9HUWTebnkFfvgkwgl622xkv2pqN2lwCoIixtVU56J0Qne3Ek4W5fXHgv_mj60FVBoLLsytDNK7sUD64MlWVYNSrgfGPRVFxtRXC-muAqKWnvWt64uJNulePGHM-S6CXlXmavBMGC\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 3:</strong> The tapping button will show the options</p>\n</blockquote>\n<p><img src=\"https://lh4.googleusercontent.com/1KgR3dQcrihTZhgmdHjuBGqA1QfwXi9uMaGdklRGLsuwrrrWFtwxuwEbNg3QuayVKtIZHQhQs8RSy4W01Kcs2TsJLq3x506kVu68s7NCAblegqKpLBnL0JXqvub7tBK9c9qnzX5z\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 4:</strong> Show pop-up dialog menu</p>\n</blockquote>\n<h4 id=\"composition\">Composition</h4>\n<ol>\n<li><p>Header type</p>\n<p> <img src=\"https://lh6.googleusercontent.com/ktThNKp49yWJ3AVT1AbNjVqVmAXZQvmgzo5TxI67qsdPJYSd1NlODWdSLQGilXLNVwSn7AmJct5KtPj-ekf8cebTc9Ubake3O4ufgNES8L7P5N5-rOLjJQ60xBWD7ZDJgiVcs9Os\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 5:</strong> List Message with header type “Text” and “None” in Platform</p>\n</blockquote>\n<p> <img src=\"https://lh6.googleusercontent.com/SWRAXF7vQMYgNWVUcdepTIBShE1PGrVa8JY4q-jSUwM7-QZI0O4Z8wi1bsBN6EBZEP8Wau4Wn4Qdmw9-NTRL2LLu3bcq2QD46H9xNfFuHwXvoY5mtxWMaSd2cyEa0CujjaGpIPKi\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 6:</strong> List Message with header type “Text” and “None” in WhatsApp</p>\n</blockquote>\n</li>\n<li><p>Header composition</p>\n<p> <img src=\"https://lh4.googleusercontent.com/oYM9IQdYQDrqiDDs_CXOX00tosRqXSH0-ZFp7-V6Zs0ZvaPwtanmQz5Zh5U-DqAJfRdrNjO9B0LXV8B8v_Qpn7thO-I9D1HQnjMJE8MDbGEpNBjjasTdokjaz-on0-1BV_Yyw4_w\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 7:</strong> List Message button composition (before showing menu list) in Platform</p>\n</blockquote>\n<p> <img src=\"https://lh4.googleusercontent.com/vly_ewYjHNEHAhOnGhXCHYlvDdIM7gNEJ511eNMwuG-XiSadj66UkeYE6R-YGJpNv6g7oW498dbujOWEuyyNknrUhcyMAeRg4myXFKDl41dqaKvntNFfa5fqmCLr4v_T0fO6rKvt\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 8:</strong> List Message button composition (before showing menu list) in WhatsApp</p>\n</blockquote>\n</li>\n<li><p>Section and Row</p>\n<p> <img src=\"https://lh4.googleusercontent.com/Mi9lpTKwUEX8_46dRS_el77FkpSKSzJNyTLw20n_XXanta8IbWQe2dQFtnG9JnFrBgygRlkW85jvSPP9xemSvrb2dzVGj36gn2k04_aUyqgqjFvUZaJrwDPlzLXSdYZfaAhJ-Xax\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 9:</strong> List Message composition (showing menu list) in Platform</p>\n</blockquote>\n<p> <img src=\"https://lh5.googleusercontent.com/jUMDjYGOHAwmRkjxeGyAi2DKqIrlwl2JUMjnVF4t5ox5ZCArpVQX80kpiJ7pBvxvcY3It4d9FkjfC19yBDfynJnUZTkGSb7B72kA4jkCqK3E2lwlgXskg8-5sDvsVq4NXCFXUdaE\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 10:</strong> List Message composition (showing menu list) in WhatsApp</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"how-to-use-2\">How to Use</h4>\n<p>Follow these steps to create a new List Message</p>\n<ol>\n<li><p>Go to the Kata Platform and select your project.</p>\n</li>\n<li><p>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</p>\n</li>\n<li><p>Choose<strong>List Message.</strong>This action type only works on WhatsApp. Adding this on other channels will result in an error.</p>\n</li>\n<li><p>Fill in the fields.</p>\n</li>\n<li><p>You should know some critical notes on List Message: (1) “Section” has no limit. You can add as many sections as you want; (2)You can create up to 10 rows; (3) “Row ID” in the same section must be unique. For example:</p>\n<ol>\n<li><p>You make a section called “FAQ Topics.”</p>\n</li>\n<li><p>Inside FAQ Topics, you have 3 rows.</p>\n</li>\n<li><p>Those 3 rows inside FAQ Topics can’t use the same ID.</p>\n<p><img src=\"https://lh4.googleusercontent.com/yeG4VH5iGbhuoZt1wXFMug2961eFIT3ch9yJBZB6r-Ue1L1DQ-HV5iEvRt0zKU5IBnEIDk_Y2eaYXAS8mYx2lmWYoPbptQNc9MWeBTeFkZDme41gukBSOH21fQUVziIqDWUxo9WN\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 11:</strong> Using similar Row ID under 1 section is not allowed</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>Click <strong>Create Action</strong> to finalize your action</p>\n</li>\n</ol>\n<p>After end-users click any options, the bot must execute a response based on the clicked option. You can map the selected option by end-users using row title or row id.</p>\n<ul>\n<li><p>Using row <code>title</code>. For example:</p>\n<pre><code>context.chosen == payload.postback.title</code></pre></li>\n<li><p>Using row <code>id</code>. For example:</p>\n<pre><code>context.chosen == payload.postback.id</code></pre></li>\n</ul>\n<h3 id=\"🎉-new-🎉-reply-button\">🎉 NEW 🎉 Reply Button</h3>\n<h4 id=\"about-3\">About</h4>\n<p>The reply button allows users to send a reply to the chatbot quickly. In addition, you can create up to 3 buttons.</p>\n<p>Here are examples of Reply Button responses to end-users.</p>\n<p><img src=\"https://lh3.googleusercontent.com/I79PvbM_RUvOVnXu7PyAXTQWlBM7EXv0vOt_u93tN67mUBw-wMhpDwuoWDh4UPNr-6nWY30DPzWnHueIPsrNbr9bS-efRYKBGeaNF3SOmbCnuGgCViYaTJ6ORyczgUNv6qlnmoBC\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 12:</strong> Reply button with <strong>Text</strong> as header</p>\n</blockquote>\n<p><img src=\"https://lh6.googleusercontent.com/5xgUxs65M8XURjBcXZWuMksor5BL-UnVPBiJx6kpriG0J1PpmHQ52SnggVkNLEPcGTaK5M6ovxHACpoRTPEhkDhY6H5co25viKWRPrmie4khIPAYu9xcW1RZyPGQhFd4ZvWyZZ4G\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 13:</strong> Reply button with <strong>Image</strong> as header</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/98deRuedgda_B63m_mecshmO5f2EHybyIzkDUTqKePR5jWo_JiAQHjAEqDBPIz29S0F3z2n6NViMV5MuXW5cGZ5J8-BwhhUCiXDcD0S47Lb-9OPpy_iMcArsAQ_soB3ONpJkETCk\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 14:</strong> Reply button with <strong>Document</strong> as header</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/924zwMRgN7c7UJ9Za3t2x0ZBFvZgNJVn-cCDq8sbtbx-NdGctwKVzoReTHKRUefT8-o0Pu-qELo_jiHzrV1aiVms4Dpc09WUxHXd_09mB9KRRkM60AMSbJBppKVEvmCjJqyLQlN1\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 15:</strong> Reply button with <strong>Video</strong> as header</p>\n</blockquote>\n<h4 id=\"how-to-use-3\">How to Use</h4>\n<p>Follow these steps to create a new Reply Button.</p>\n<ol>\n<li><p>Go to the Kata Platform and select your project.</p>\n</li>\n<li><p>Click to <strong>Flow &gt; Conversation Flow &gt; State &gt; Action List</strong>.</p>\n</li>\n<li><p>Choose<strong>Reply Button.</strong>This action type only works on WhatsApp. Adding this on other channels will result in an error.</p>\n</li>\n<li><p>Fill in the fields. Some critical notes on the Reply button that you should know:</p>\n<ol>\n<li><p>“Button ID” must be unique when creating action.</p>\n</li>\n<li><p>The maximum number of buttons is 3 buttons.</p>\n</li>\n<li><p>Header type video only allows .mp4 extension, and we recommend the size is &lt; 5 MB because end-users may experience slow connection when loading the video.</p>\n</li>\n<li><p>Header types image, video, and document must use HTTP/HTTPS link.</p>\n<p><img src=\"https://lh5.googleusercontent.com/IZNHP_6jHo9bMid2uMy2r00x_12FJ0c7Wfqke01fKrksGyv6IYbOaO5ffyQkgUz7K8YX1l-gWoC_uyqW-FH7GhVFBmCqg1ZVVPWySKYK76PiIwx_xT5wdY4WpRcbXv2pxo4Amo44\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 16:</strong> Reply Button composition</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>Click <strong>Create Action</strong> to finalize your action.</p>\n</li>\n</ol>\n<p>After end-users click any button, the bot must execute a response based on the clicked button. You can map the selected button by end-users using button <code>title</code> or button <code>id</code>.</p>\n<ul>\n<li><p>Using button <code>title</code>. For example:</p>\n<pre><code>context.chosen == payload.postback.title</code></pre></li>\n<li><p>Using button <code>id</code>. For example:</p>\n<pre><code>context.chosen == payload.postback.id</code></pre></li>\n</ul>\n<h2 id=\"how-to-deploy\">How to deploy</h2>\n<p>You can create a simple bot using text by following this bot tutorial: <a href=\"/kata-platform/documentation-content/start-your-first-chatbot\">Start your first chatbot</a>.</p>\n<p>You can deploy your bot by following these steps.</p>\n<h3 id=\"create-a-deployment\">Create a deployment</h3>\n<ol>\n<li><p>Click the <strong>Deploy</strong> menu in the left sidebar.</p>\n</li>\n<li><p>On the Deploy page, click on the <strong>New Deployment</strong> button in the top right corner. It will open up the Create Deployment menu.</p>\n</li>\n<li><p>Choose any deployment version you want to deploy and fill in the changelog.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/PGpitsLKOJuhPDA5JPL2CRCu_vUqe-3qFEECl-zpkzC6-wz9980U8Xzj4eUQ1CqPaBsQVCynTKBgfhY1_qUhZhFcd8ISwXAElg54uj-hEu9JjgfQymGKqYIh_nv91gfKgwOSy2Ga\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 17:</strong> Create a new deployment</p>\n</blockquote>\n</li>\n<li><p>Click <strong>Submit</strong> to finish the deployment.</p>\n</li>\n</ol>\n<h3 id=\"create-a-new-environment\">Create a new environment</h3>\n<p>If you already have an environment created, skip these steps.</p>\n<ol>\n<li><p>Go to the <strong>Deployments &gt; Environment</strong> menu.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/WRsJW8Lk4FoLS5jy4f3AX_z30iJuhVkKi80wZ7e6WSV0hX4FutatiZzZ54-TjCnIHh7PsxykkTavvx4pAAjSRfQuFNtNEamxV6PbDRy9-188i1rH26nkSVqZ8aY6mLENIfQEu_ba\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 18:</strong> Set up the environment, then set up WhatsApp channel.</p>\n</blockquote>\n</li>\n<li><p>Click the <strong>Create Environment</strong> button in any environment. You will see a drawer to create a new environment.</p>\n</li>\n<li><p>Choose the <strong>development version</strong> you want (in this tutorial, we use the 1.0.0 version)</p>\n</li>\n<li><p>Fill in the <strong>environment URL</strong>. This environment URL is used for CMS.<a href=\"https://docs.kata.ai/cms-studio/about/&#39;\">Learn more about CMS</a>.</p>\n</li>\n<li><p>Click <strong>Create</strong> to create the environment.</p>\n</li>\n<li><p>Created environment now has a <strong>Create Channel</strong> button.</p>\n</li>\n</ol>\n<h3 id=\"create-whatsapp-business-account\">Create WhatsApp business account</h3>\n<p>You can only deploy bots to a verified WhatsApp Business number. To get the number, you have to:</p>\n<ol>\n<li>Go to <a href=\"https://business.kata.ai\">https://business.kata.ai</a></li>\n<li><a href=\"/business-dashboard/get-started\">Create a business dashboard account</a></li>\n<li><a href=\"/business-dashboard/how-to-register\">Register your new WhatsApp number</a></li>\n</ol>\n<p>Then, you’re ready to get the access token from your WhatsApp business account.</p>\n<ol>\n<li><p>In Business Dashboard, go to the Whatsapp Numbers menu.</p>\n<p> <img src=\"https://lh6.googleusercontent.com/DLOgeJYML2occH4Jc8rakW50F5ZKEY__jnN6FaVQTaCJjsoRY7mpV8Wyfcjyi67fhh6atGQ-d0yYuQK6Pqs0uplhNN6MsV8TP2gWf_fZA5KyKwdIUYJ-OqSrta4X2GqvB5xfL5M9\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 19:</strong> WhatsApp numbers list</p>\n</blockquote>\n</li>\n<li><p>Then, click the WhatsApp number you want to deploy. You will redirect to the <strong>Manage WhatsApp Number</strong> page.</p>\n</li>\n<li><p>In the Manage WhatsApp Number page, scroll down to <strong>API Credential.</strong></p>\n<p> <img src=\"https://lh4.googleusercontent.com/ZHZHBBbvKENy3cQ-0lQsDFbVHk2HKPWl7bJu7zobjC_oFTA2lCOiv9jnbRqzcPbi1NELWtX0k-SFfgVfAXRqFdRr8OkOZYePkc1WHTwusGXrqg9rX9LWmsKtmiuWQkaS46EjMgTn\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 20:</strong> API Credential</p>\n</blockquote>\n</li>\n<li><p>Next, you will need to download<a href=\"https://www.postman.com/downloads/\">Postman</a> to hit the WhatsApp API.</p>\n</li>\n<li><p>Copy the <strong>username</strong> and <strong>password</strong> from the API Credential section in the Business Dashboard into Postman.</p>\n</li>\n<li><p>Open Postman and fill in the <strong>URL</strong> as follows::</p>\n<pre><code> URL: POST [https://api-whatsapp.kata.ai/v1/users/login](https://api-whatsapp.kata.ai/v1/users/login)</code></pre></li>\n<li><p>Enter the username and password from Business Dashboard to the Body. Examples:</p>\n<pre><code> Body::\n\n {\n “username”: “amanda123”\n “password”: “Q1w2e3r4#kata”\n }</code></pre></li>\n<li><p>Click <strong>Send</strong> in Postman. You will get the access token as shown.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/H1rMF2QFPvSO2MDgnR2yOAWu5goXCi_PkLmCuNUE0qtTXsO5G_gEAveI54xSJErM71_vz9UEuzjEa49wxntmb0W6rlsiqGrnhw29NElNnOBYRLHSxuh7WW5xJqY2Z9kLeumPSbTM\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 21:</strong> Access token shows after hitting login API.</p>\n</blockquote>\n</li>\n<li><p>Copy the <strong>access token</strong> in the API result and save it next.</p>\n</li>\n</ol>\n<h3 id=\"finalize-deployment-whatsapp-channel\">Finalize deployment WhatsApp channel</h3>\n<ol>\n<li><p>Log in to Kata Platform (<a href=\"https://platform.kata.ai\">https://platform.kata.ai</a>)</p>\n</li>\n<li><p>Click your project that already had a chatbot and deployed</p>\n</li>\n<li><p>Then, go to the menu: <strong>Deploy &gt; Environment</strong>.</p>\n</li>\n<li><p>Click the <strong>Create Channel</strong> button to start adding channels to the environment. It will open up the Channel menu within the environment.</p>\n</li>\n<li><p>Click the ”<strong>+ Create Channel</strong>” button in the channel table list. It will show a menu to set up the channel.</p>\n</li>\n<li><p>Choose WhatsApp in Channel Type</p>\n</li>\n<li><p>Paste the access token into the field, and enter<a href=\"https://api-whatsapp.kata.ai\">https://api-whatsapp.kata.ai</a> in the URL field.</p>\n<p> <img src=\"https://lh4.googleusercontent.com/dxleBhfH7IfcpGUT5NonHdls9d9mX2IkMycYLnIhFuztfVr2d0nNsPBX5uzHTOX73dFXqBmTjQ4WdWxQ9OquJSKu1L_WRpGbROdQYr9UK42gvrQLWfA5ItVZI0-Omt01viPtIZaZ\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 22:</strong> Fill in the access token and URL</p>\n</blockquote>\n</li>\n<li><p>Click Save to deploy your bot.</p>\n</li>\n</ol>\n<p>You’re all set! Now you can start chatting with your WhatsApp bot.</p>\n<p><img src=\"https://lh4.googleusercontent.com/JJMFOw4_fnSjJYufFR8UNMrzCKgrqrIYicUA3ufIVbvgQHCLdTgEmCYcxN2f-20H5LiMZCpHPqgEXOoD4kL8yhkFjAM87mP-28e342_zRw56sjiEqVIiCmeP2w5nRh9a4eOaAwEQ\" alt=\"\"></p>\n<blockquote>\n<p><strong>Figure 23:</strong> Successfully deployed chatbot in WhatsApp</p>\n</blockquote>\n<p>It is the end of the guidance. You can contact <a href=\"mailto:support@kata.ai\">support@kata.ai</a> if you have any difficulties when implementing this.</p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-ig-handover.png",
      "title": "How to use WhatsApp Business API in my chatbot",
      "product": "kata-platform",
      "date": "2021-10-25T07:00:00+07:00",
      "excerpt": "<p>Automate your WhatsApp conversation by using our flow builder in the Kata Platform. Create bots to reply to end-users with several bot action types:</p>",
      "meta": {
        "relativePath": "how-to-use-whatsapp-business-api-in-my-chatbot.html",
        "createdAt": "2022-02-03T01:16:38.308Z",
        "lastModified": "2022-02-03T01:16:38.308Z",
        "size": 13541,
        "formattedSize": "13.2 KB"
      }
    },
    {
      "id": "integration-chatbot-with-cms-studio",
      "contents": "<h2 id=\"introduction\">Introduction</h2>\n<p>CMS Studio allows you to build a dashboard for your chatbot. This dashboard lets your clients to add, edit, or remove certain contents of your bot.</p>\n<p>Previously, from <a href=\"/tutorial/bot-studio/\">Bot studio tutorial</a> we have learned how to create a Pizza Bot. So, in this tutorial we will learn how to set up a dashboard where your clients can edit bot response for “confirmPizza” and “Fallback” state.</p>\n<p>Before we begin, you need to read <a href=\"/cms-studio/about/\">CMS Studio</a> docs to learn the basic concepts of CMS Studio.</p>\n<h2 id=\"set-up-cms-studio\">Set up CMS Studio</h2>\n<p>We assume at this stage you already deployed your bot. If you haven&#39;t, you can learn how to on <a href=\"/tutorial/bot-studio/\">Bot studio tutorial</a>.</p>\n<h3 id=\"create-environment\">Create Environment</h3>\n<p>Click on Create Environment.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-1.png\" alt=\"bcms-1\"></p>\n<p>Environment URL will be used as a web address where your client can access the dashboard. For demo purpose, we will name it “my-cms”</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-2.png\" alt=\"bcms-2\"></p>\n<p>Click on Create to submit data. Successfully created environment will be seen as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-3.png\" alt=\"bcms-3\"></p>\n<h3 id=\"create-cms-pages-and-forms\">Create CMS Pages and Forms</h3>\n<p>Go to CMS menu and select Pages. This menu is a place for you to arrange pages, forms and elements.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-4.png\" alt=\"bcms-4\"></p>\n<p>Click “+” button to start a new page. In this use case, we will create a page named “Text Response” with label “textResponse”. Click Create then enter the page.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-5.png\" alt=\"bcms-5\"></p>\n<p>There is a breadcrumb on top left to indicate which page you are in. Click on “+” button to create a form</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-6.png\" alt=\"bcms-6\"></p>\n<p>Fill in the fields as follows</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-7.png\" alt=\"bcms-7\"></p>\n<p>Then, click on “Order Pizza” form you&#39;ve just created</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-8.png\" alt=\"bcms-8\"></p>\n<h3 id=\"introduction-to-text-box-element\">Introduction to Text Box Element</h3>\n<p>For the first use case, we will use Text Box elements to change bot response in confirmPizza State.</p>\n<p>Click on Text Box element in left sidebar to add it to your form.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-9.png\" alt=\"bcms-9\"></p>\n<p>Added element is shown as above. Our next step is to fill in label and ID, and default value.</p>\n<ul>\n<li>Label is a title for the element, so try to use any word that is easy to understand.</li>\n<li>ID is used to define the element in bot. Every element&#39;s ID is unique, and will be used as a code later on.</li>\n<li>Default value is the value you want to put on the bot, for example the copywriting.</li>\n</ul>\n<h3 id=\"add-asking-confirmation-text-to-form\">Add Asking Confirmation Text to Form</h3>\n<p>Fill in text box element as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-10.png\" alt=\"bcms-10\"></p>\n<h3 id=\"add-fallback-text-to-form\">Add Fallback Text to Form</h3>\n<p>Fill in text box element as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-11.png\" alt=\"bcms-11\"></p>\n<p>Then, click on Save button to save the structure.</p>\n<h3 id=\"publish-cms\">Publish CMS</h3>\n<p>After you saved your CMS structure, go to Pages. Afterwards, click Publish.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-12.png\" alt=\"bcms-12\"></p>\n<p>Publish is a term that similar with commit in Git. You must publish your saved CMS before you create a deployment. Further explanation can be seen on <a href=\"./deployment-guide/introduction/\">Deployment Guide</a></p>\n<h2 id=\"invite-user-to-cms-client\">Invite User to CMS Client</h2>\n<p>You can only invite Kata Platform users to Kata Dashboard. So make sure your client already has registered account on Kata Platform before you invite them. In the future update, we will support inviting non-Kata Platform users.</p>\n<p>Click on Users menu under CMS Studio</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-13.png\" alt=\"bcms-13\"></p>\n<p>Then, click on Add User button</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-14.png\" alt=\"bcms-14\"></p>\n<p>Next, Add User drawer will show</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-15.png\" alt=\"bcms-15\"></p>\n<p>Fill in e-mail and choose Development environment . Then click Add to send an invitation to that user&#39;s email.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-16.png\" alt=\"bcms-16\"></p>\n<h2 id=\"integrate-elements-to-bot\">Integrate Elements to Bot</h2>\n<p>There are 3 things that we have defined on CMS, which are:</p>\n<ul>\n<li><code>Page_label</code> in Page (ex: <code>textResponse</code>)</li>\n<li><code>Form_label</code> in Form (ex: <code>orderPizza</code>)</li>\n<li><code>ID</code> in Element. (ex: <code>askingConfirmation</code>)</li>\n</ul>\n<p>This information will be used in Bot Studio to sync a value from your dashboard. To do that, we have to enter a code with this format on the action we want to sync:</p>\n<pre><code>$(cms.[page_label].[form_label].[element_ID].value)</code></pre><h3 id=\"change-value-in-confirmpizza-state\">Change Value in confirmPizza State</h3>\n<p>In this case, this is what we will put on <code>confirmPizza</code> action on Bot Studio.</p>\n<pre><code>$(cms.textResponse.orderPizza.askingConfirmation.value)</code></pre><p>To update the action, you have to go back to Bot Studio and click on confirmPizza state.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-17.png\" alt=\"bcms-17\"></p>\n<p>Then, click on confirmPizza state. Replace the original text which is this:</p>\n<pre><code>Do you want to order $(context.pizza)?</code></pre><p>with this code:</p>\n<pre><code>$(cms.textResponse.orderPizza.askingConfirmation.value)</code></pre><p><img src=\"/assets/images/tutorial/bot-cms/bcms-18.png\" alt=\"bcms-18\"></p>\n<p>Click Update Action to update your action. <strong>Then click on Update</strong> to update state.</p>\n<h3 id=\"change-value-in-fallback-state\">Change Value in Fallback State</h3>\n<p>Click on init state in fallback flow.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-19.png\" alt=\"bcms-19\"></p>\n<p>Click on init state to update the action&#39;s value. Fill in the value as follows</p>\n<pre><code>$(cms.textResponse.orderPizza.sorryMessage.value)</code></pre><p><img src=\"/assets/images/tutorial/bot-cms/bcms-20.png\" alt=\"bcms-20\"></p>\n<p>Click Update Action to update your action. <strong>Then click on Update</strong> to update state.</p>\n<h3 id=\"publish-your-bot\">Publish Your Bot</h3>\n<p>Afterward, publish your bot by clicking Publish.</p>\n<h2 id=\"deploy-cms--bot-revision\">Deploy CMS &amp; Bot Revision</h2>\n<p>Go to Deploy menu to deploy the newest version of your bot. Click on New Deployment, choose any deployment version and fill in change log. Then, click on Submit.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-21.png\" alt=\"bcms-21\"></p>\n<p>Then, go to Environment to change deployment. Click on more button to update.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-22.png\" alt=\"bcms-22\"></p>\n<p>Next, click Update. Update environment drawer will appear.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-23.png\" alt=\"bcms-23\"></p>\n<p>Choose latest deployment then click Update. Changes will be shown as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-24.png\" alt=\"bcms-24\"></p>\n<h2 id=\"customize-content-in-cms-client\">Customize Content in CMS Client</h2>\n<p>Your invited user will receive an email containing the dashboard&#39;s URL or you can give them direct URL yourselves.</p>\n<h3 id=\"enter-cms-using-e-mail\">Enter CMS using E-mail</h3>\n<p>If you get an e-mail, click on Accept Invitation then you will be redirected to login page</p>\n<h3 id=\"enter-cms-using-link\">Enter CMS using Link</h3>\n<p>Click on link for CMS client such as dashboard.kata.ai/(namespace). For this tutorial, we will access <a href=\"https://dashboard.kata.ai/login/my-cms\" target=\"_blank\">https://dashboard.kata.ai/my-cms</a></p>\n<p>The front page of Kata Dashboard looks like this</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-25.png\" alt=\"bcms-25\"></p>\n<p>Click on Login after you filled in username/e-mail and password.</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-26.png\" alt=\"bcms-26\"></p>\n<h3 id=\"edit-content-in-cms-client\">Edit Content in CMS Client</h3>\n<p>Click on available form which is “Order Pizza”</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-27.png\" alt=\"bcms-27\"></p>\n<p>Fill in those elements with sentences that you want. For example:</p>\n<pre><code>Asking confirmation: You&#39;re almost done. Do you want to order $(context.pizza)?\nFallback: Hmm, I don&#39;t understand that. How about we talk other things?\n</code></pre><p>Click on Save icon to save in each element.</p>\n<h2 id=\"show-changes-in-line\">Show Changes in LINE</h2>\n<p>After you changed your deployment in environment, you can test directly in your bot&#39;s LINE account.</p>\n<p>Testing for confirmation:</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-28.png\" alt=\"bcms-28\"></p>\n<p>Testing for fallback:</p>\n<p><img src=\"/assets/images/tutorial/bot-cms/bcms-29.png\" alt=\"bcms-29\"></p>\n",
      "layout": "tutorial",
      "imgSpot": "/assets/images/tutorial/spot-cms-integration.png",
      "product": "kata-platform",
      "title": "Integration Chatbot with Kata CMS",
      "prev": "integration-chatbot-with-nl-studio",
      "next": "create-igdm-bot-handover-from-chatbot-to-agent",
      "excerpt": "<p>CMS Studio allows you to build a dashboard for your chatbot. This dashboard lets your clients to add, edit, or remove certain contents of your bot.</p>",
      "meta": {
        "relativePath": "integration-chatbot-with-cms-studio.html",
        "createdAt": "2022-02-03T01:16:51.517Z",
        "lastModified": "2022-02-03T01:16:51.517Z",
        "size": 8166,
        "formattedSize": "8.0 KB"
      }
    },
    {
      "id": "integration-chatbot-with-nl-studio",
      "contents": "<h2 id=\"introduction\">Introduction</h2>\n<p>In this tutorial, we will create a simple conversation bot and integrated to NL studio. For pre-condition, you must create a bot by follow this tutorial in here <a href=\"/tutorial/bot-studio/\">Bot studio tutorial</a>. You will create a NLModel which able to process pizza ordering orders. Further explanation for NLStudio, you may see in here <a href=\"/tutorial/nl-studio/\">NL Studio Guideline</a></p>\n<p>Let&#39;s start !</p>\n<h2 id=\"create-entity\">Create Entity</h2>\n<p>Assumed you already logged in and visit your project. Go to NL Studio menu by click NL menu</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-1.png\" alt=\"bnl-1\"></p>\n<p>Then, click on Create Entity to start.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-2.png\" alt=\"bnl-2\"></p>\n<p>Click on Create. Here is a view after you create intent <code>entity</code></p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-3.png\" alt=\"bnl-3\"></p>\n<h2 id=\"conduct-data-training\">Conduct Data Training</h2>\n<p>After you created the entity, the next step is data training. You have to enter a sentence to train <code>intent</code> trait. Click on Training menu</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-4.png\" alt=\"bnl-4\"></p>\n<p>Then, you are able to enter sentence to train data. Put a sentence “I want to order pizza” and press enter in your keyboard</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-5.png\" alt=\"bnl-5\"></p>\n<p>Afterward, click on Add Trait and select <code>intent:order</code>.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-6.png\" alt=\"bnl-6\"></p>\n<p>Next, click “Train” button to train entity you has created. The final display will look like this</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-7.png\" alt=\"bnl-7\"></p>\n<p>Entity shall train a lot for precisely understanding user&#39;s input, if you&#39;re doing training data in several sentences.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-8.png\" alt=\"bnl-8\"></p>\n<p>If you&#39;ve done enough training, you are able to try testing by click &quot;Test NLU&quot; button. This feature will support you to predict more data.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-9.png\" alt=\"bnl-9\"></p>\n<h2 id=\"publish-your-nl\">Publish Your NL</h2>\n<p>Then, publish your NL for save training data and NL model.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-10.png\" alt=\"bnl-10\"></p>\n<h2 id=\"integration-with-nlus\">Integration with NLUs</h2>\n<p>Next step is start integration with your bot using created entity. To get started, go to Bot menu and click NLUs sub-menu.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-11.png\" alt=\"bnl-11\"></p>\n<p>Click on Create NLU and fill in as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-12.png\" alt=\"bnl-12\"></p>\n<p>NLUid is found in NL menu in Setting. Click on NL menu, then click Settings</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-13.png\" alt=\"bnl-13\"></p>\n<p>Afterward, copy NLUid into NLUid field in Create NLU drawer as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-14.png\" alt=\"bnl-14\"></p>\n<p>Click Create to continue. Successfully created NLUs will be appeared as follow</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-15.png\" alt=\"bnl-15\"></p>\n<h2 id=\"integration-with-bot\">Integration with Bot</h2>\n<p>Next, go to Conversation Flows and click on tab Intents. Select <code>orderTxt</code> that you&#39;ve created earlier to handle user input (you may see this tutorial <a href=\"/tutorial/bot-studio/\">Bot studio tutorial</a>), then add a new classifier as below</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-16.png\" alt=\"bnl-16\"></p>\n<p>Click Update to save updated Intent.</p>\n<h2 id=\"testing-your-bot\">Testing Your Bot</h2>\n<p>Click on Publish bot to save your bot.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-17.png\" alt=\"bnl-17\"></p>\n<p>Voila, your bot is successfully integrated. Let&#39;s start in bot emulator.</p>\n<p><img src=\"/assets/images/tutorial/bot-nl/bnl-18.png\" alt=\"bnl-18\"></p>\n",
      "layout": "tutorial",
      "title": "Integration Chatbot with NL Studio Tutorial",
      "imgSpot": "/assets/images/tutorial/spot-nl-studio-integration.png",
      "product": "kata-platform",
      "prev": "nl-studio-tutorial",
      "next": "integration-chatbot-with-cms-studio",
      "date": "2018-09-09T07:00:00+07:00",
      "excerpt": "<p>In this tutorial, we will create a simple conversation bot and integrated to NL studio. For pre-condition, you must create a bot by follow this tutorial in here <a href=\"/tutorial/bot-studio/\">Bot studio tutorial</a>. You will create a NLModel which able to process pizza ordering orders. Further explanation for NLStudio, you may see in here <a href=\"/tutorial/nl-studio/\">NL Studio Guideline</a></p>",
      "meta": {
        "relativePath": "integration-chatbot-with-nl-studio.html",
        "createdAt": "2022-02-03T01:16:55.199Z",
        "lastModified": "2022-02-03T01:16:55.199Z",
        "size": 3635,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "nl-studio",
      "contents": "<h2 id=\"introduction\">Introduction</h2>\n<p>In <a href=\"/tutorials/bot-studio/\">Bot studio tutorial</a>, we learned how to make keyword-based chatbot to order pizza. However, keyword-based chatbot is not so smart. In this tutorial we will learn how to enhance the chatbot using NL Studio.</p>\n<h2 id=\"creating-a-nl-model-with-nl-studio\">Creating a NL Model with NL Studio</h2>\n<h3 id=\"login-to-kata--platform\">Login to Kata | platform</h3>\n<p>Login to Kata | Platform by entering your username and password.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-1.png\" alt=\"nlst-1\"></p>\n<p>Click Login to continue</p>\n<h3 id=\"create-entity-label\">Create Entity Label</h3>\n<p>After you entered to Kata Platform, click on the project you&#39;ve created</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-2.png\" alt=\"nlst-2\"></p>\n<p>Then, click on NLU on the side bar</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-3.png\" alt=\"nlst-3\"></p>\n<p>Next, click Create Entity. Entity has similar definition with NL Model. It will help us to classify every input from users.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-4.png\" alt=\"nlst-4\"></p>\n<p>Now, create an entity called <code>intent</code> that with 4 labels: <code>order</code>, <code>askOptions</code>, <code>confirm</code> and <code>cancel</code>. Further explanation about entity is explained in <a href=\"https://docs.kata.ai/nl-studio/nlu/\">NL Studio Docs</a></p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-5.png\" alt=\"nlst-5\"></p>\n<h3 id=\"create-entity-type\">Create Entity Type</h3>\n<p>In this entity <code>type</code>, we will create an entity with dictionary type (further explanation about entity dictionary type is explained in <a href=\"https://docs.kata.ai/nl-studio/nlu/\">NL Studio Docs</a>). This entity will handle pizza type selection. Add new entity and fill in the data as follows</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-6.png\" alt=\"nlst-6\"></p>\n<p>Then, continue filling the dictionary by adding other types</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-7.png\" alt=\"nlst-7\"></p>\n<h3 id=\"create-entity-size\">Create Entity Size</h3>\n<p>Entity <code>size</code> is used to handle pizzas size. In this entity, we will use <code>Belongs to</code> feature which binds an entity under another entity (further explanation about belongsTo usage is explained in <a href=\"https://docs.kata.ai/nl-studio/nlu/\">NL Studio Docs</a>). We will put entity <code>size</code> under entity <code>type</code>.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-8.png\" alt=\"nlst-8\"></p>\n<p>In dictionary section, enter a keyword as a prediction for input from users</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-9.png\" alt=\"nlst-9\"></p>\n<h3 id=\"create-entity-crust\">Create Entity Crust</h3>\n<p>Next, we will create an entity named <code>crust</code> to find out crust type on pizza. We&#39;ll put it under entity <code>type</code>.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-10.png\" alt=\"nlst-10\"></p>\n<p>Enter the data as follows</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-11.png\" alt=\"nlst-11\"></p>\n<h3 id=\"create-entity-qty\">Create Entity Qty</h3>\n<p>In pizza chatbot which we created earlier, user must enter pizza number to purchase using regex (regular expression.)</p>\n<p>Entity <code>qty</code> will use dictionary by entering numbers or keywords related to the number of pizzas ordered. Add entity then fill in the form as follows</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-12.png\" alt=\"nlst-12\"></p>\n<p>Then, fill in as below</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-13.png\" alt=\"nlst-13\"></p>\n<p>After you&#39;ve created entities, try to train data using your defined entities.</p>\n<h3 id=\"training-your-model\">Training Your Model</h3>\n<p>To start training, enter Training menu under NLU</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-14.png\" alt=\"nlst-14\"></p>\n<p>Enter a simple phrase like &quot;want pizza&quot; and press &quot;enter&quot; on your keyboard</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-15.png\" alt=\"nlst-15\"></p>\n<p>Then, in this section you can start tagging and classifying text. Click on Add Trait, then select <code>intent: order</code>.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-16.png\" alt=\"nlst-16\"></p>\n<p>Click Train to submit your dataset.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-17.png\" alt=\"nlst-17\"></p>\n<p>Then, add a few more sentences to train more data. You can follow this</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-18.png\" alt=\"nlst-18\"></p>\n<p>In our next example, we will do partial tagging by entering text and doing text selection on the word we want to tag. <strong>The process of selecting text can be done by blocking one or more words at a time using a cursor.</strong></p>\n<p>You can follow the example in this following picture. On the sentence &quot;how much american all star&quot;, select only on the word &quot;American all star&quot;</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-19.png\" alt=\"nlst-19\"></p>\n<p>Then, select entity <code>type</code> to classify</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-20.png\" alt=\"nlst-20\"></p>\n<p>You can also enter a phrase &quot;I want American all star pizza, two and bbq hand tossed one&quot; and tag it like this</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-21.png\" alt=\"nlst-21\"></p>\n<p>You may see a number beside an entity. That number represents how accurate an entity identifies a phrase (highest is 1.0)</p>\n<p>Try to tag more sentences.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-22.png\" alt=\"nlst-22\"></p>\n<p>Next, we will define parent entity using <code>BelongsTo</code>. Click on <code>BelongsTo</code> dropdown on <code>small</code> phrase, then select &quot;Pepperoni&quot;. Final result looks like this</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-23.png\" alt=\"nlst-23\"></p>\n<h3 id=\"testing-nlu-in-prediction-console\">Testing NLU in Prediction Console</h3>\n<p>Use Test NLU to test a dataset.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-24.png\" alt=\"nlst-24\"></p>\n<p>Enter a word such as &quot;i want two aas&quot; (read: aas means American All Star). You can see the prediction result as you can see in this image</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-25.png\" alt=\"nlst-25\"></p>\n<h2 id=\"adjusting-the-dataset\">Adjusting the Dataset</h2>\n<p>When performing NLU prediction in Test NLU, sometimes the prediction result is wrong, incomplete, or still has a low confidence score.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-26.png\" alt=\"nlst-26\"></p>\n<p>For example, the sentence above should be tagged as <code>intent:order</code>. However, prediction result has no prediction to order. To improve or fix a prediction, enter Log menu.</p>\n<h3 id=\"enter-log-menu\">Enter Log Menu</h3>\n<p>Go to Log menu under NLU</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-27.png\" alt=\"nlst-27\"></p>\n<p>On this page, you will see previous dataset when you have predicted on Test NLU.</p>\n<h3 id=\"fix-the-prediction\">Fix The Prediction</h3>\n<p>We will adjust the dataset. Click on pencil icon (which placed in left icon)</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-28.png\" alt=\"nlst-28\"></p>\n<p>Then, select <code>intent:order</code>.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-29.png\" alt=\"nlst-29\"></p>\n<p>Click train to revise the prediction. Trained data will be seen as follow.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-30.png\" alt=\"nlst-30\"></p>\n<p>You will receive a notification after you click “Train”</p>\n<h3 id=\"test-nlu-with-data-that-has-been-fixed\">Test NLU with data that has been fixed</h3>\n<p>We will try to predict another dataset and see if the result has been improved. Click Test NLU and enter a phrase &quot;hi, do you sell aas&quot;.</p>\n<p><img src=\"/assets/images/tutorial/nl-studio/nlst-31.png\" alt=\"nlst-31\"></p>\n<p>Congratulations, now you have learned how to train entity in NL Studio.</p>\n",
      "layout": "tutorial",
      "title": "NL Studio Tutorial",
      "imgSpot": "/assets/images/tutorial/spot-nl-studio.png",
      "product": "kata-platform",
      "prev": "bot-studio-tutorial",
      "next": "integration-chatbot-with-nl-studio",
      "date": "2018-08-08T07:00:00+07:00",
      "excerpt": "<p>In <a href=\"/tutorials/bot-studio/\">Bot studio tutorial</a>, we learned how to make keyword-based chatbot to order pizza. However, keyword-based chatbot is not so smart. In this tutorial we will learn how to enhance the chatbot using NL Studio.</p>",
      "meta": {
        "relativePath": "nl-studio.html",
        "createdAt": "2022-02-03T01:16:59.006Z",
        "lastModified": "2022-02-03T01:16:59.006Z",
        "size": 6846,
        "formattedSize": "6.7 KB"
      }
    }
  ]
}
